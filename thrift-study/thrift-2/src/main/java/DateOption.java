/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class DateOption implements org.apache.thrift.TBase<DateOption, DateOption._Fields>, java.io.Serializable, Cloneable, Comparable<DateOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateOption");

  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DAYS_IN_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("days_in_cycle", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CUSTOM_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("custom_option", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateOptionTupleSchemeFactory());
  }

  /**
   * 
   * @see Frequency
   */
  public Frequency frequency; // optional
  public List<String> days_in_cycle; // optional
  public DateInfo start_date; // optional
  public DateInfo end_date; // optional
  public CustomRepeat custom_option; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Frequency
     */
    FREQUENCY((short)1, "frequency"),
    DAYS_IN_CYCLE((short)2, "days_in_cycle"),
    START_DATE((short)3, "start_date"),
    END_DATE((short)4, "end_date"),
    CUSTOM_OPTION((short)5, "custom_option");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FREQUENCY
          return FREQUENCY;
        case 2: // DAYS_IN_CYCLE
          return DAYS_IN_CYCLE;
        case 3: // START_DATE
          return START_DATE;
        case 4: // END_DATE
          return END_DATE;
        case 5: // CUSTOM_OPTION
          return CUSTOM_OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FREQUENCY,_Fields.DAYS_IN_CYCLE,_Fields.START_DATE,_Fields.END_DATE,_Fields.CUSTOM_OPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Frequency.class)));
    tmpMap.put(_Fields.DAYS_IN_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("days_in_cycle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateInfo.class)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateInfo.class)));
    tmpMap.put(_Fields.CUSTOM_OPTION, new org.apache.thrift.meta_data.FieldMetaData("custom_option", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustomRepeat.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateOption.class, metaDataMap);
  }

  public DateOption() {
    this.frequency = Frequency.NEVER;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateOption(DateOption other) {
    if (other.isSetFrequency()) {
      this.frequency = other.frequency;
    }
    if (other.isSetDays_in_cycle()) {
      List<String> __this__days_in_cycle = new ArrayList<String>(other.days_in_cycle);
      this.days_in_cycle = __this__days_in_cycle;
    }
    if (other.isSetStart_date()) {
      this.start_date = new DateInfo(other.start_date);
    }
    if (other.isSetEnd_date()) {
      this.end_date = new DateInfo(other.end_date);
    }
    if (other.isSetCustom_option()) {
      this.custom_option = new CustomRepeat(other.custom_option);
    }
  }

  public DateOption deepCopy() {
    return new DateOption(this);
  }

  
  public void clear() {
    this.frequency = Frequency.NEVER;

    this.days_in_cycle = null;
    this.start_date = null;
    this.end_date = null;
    this.custom_option = null;
  }

  /**
   * 
   * @see Frequency
   */
  public Frequency getFrequency() {
    return this.frequency;
  }

  /**
   * 
   * @see Frequency
   */
  public DateOption setFrequency(Frequency frequency) {
    this.frequency = frequency;
    return this;
  }

  public void unsetFrequency() {
    this.frequency = null;
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return this.frequency != null;
  }

  public void setFrequencyIsSet(boolean value) {
    if (!value) {
      this.frequency = null;
    }
  }

  public int getDays_in_cycleSize() {
    return (this.days_in_cycle == null) ? 0 : this.days_in_cycle.size();
  }

  public java.util.Iterator<String> getDays_in_cycleIterator() {
    return (this.days_in_cycle == null) ? null : this.days_in_cycle.iterator();
  }

  public void addToDays_in_cycle(String elem) {
    if (this.days_in_cycle == null) {
      this.days_in_cycle = new ArrayList<String>();
    }
    this.days_in_cycle.add(elem);
  }

  public List<String> getDays_in_cycle() {
    return this.days_in_cycle;
  }

  public DateOption setDays_in_cycle(List<String> days_in_cycle) {
    this.days_in_cycle = days_in_cycle;
    return this;
  }

  public void unsetDays_in_cycle() {
    this.days_in_cycle = null;
  }

  /** Returns true if field days_in_cycle is set (has been assigned a value) and false otherwise */
  public boolean isSetDays_in_cycle() {
    return this.days_in_cycle != null;
  }

  public void setDays_in_cycleIsSet(boolean value) {
    if (!value) {
      this.days_in_cycle = null;
    }
  }

  public DateInfo getStart_date() {
    return this.start_date;
  }

  public DateOption setStart_date(DateInfo start_date) {
    this.start_date = start_date;
    return this;
  }

  public void unsetStart_date() {
    this.start_date = null;
  }

  /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_date() {
    return this.start_date != null;
  }

  public void setStart_dateIsSet(boolean value) {
    if (!value) {
      this.start_date = null;
    }
  }

  public DateInfo getEnd_date() {
    return this.end_date;
  }

  public DateOption setEnd_date(DateInfo end_date) {
    this.end_date = end_date;
    return this;
  }

  public void unsetEnd_date() {
    this.end_date = null;
  }

  /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_date() {
    return this.end_date != null;
  }

  public void setEnd_dateIsSet(boolean value) {
    if (!value) {
      this.end_date = null;
    }
  }

  public CustomRepeat getCustom_option() {
    return this.custom_option;
  }

  public DateOption setCustom_option(CustomRepeat custom_option) {
    this.custom_option = custom_option;
    return this;
  }

  public void unsetCustom_option() {
    this.custom_option = null;
  }

  /** Returns true if field custom_option is set (has been assigned a value) and false otherwise */
  public boolean isSetCustom_option() {
    return this.custom_option != null;
  }

  public void setCustom_optionIsSet(boolean value) {
    if (!value) {
      this.custom_option = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((Frequency)value);
      }
      break;

    case DAYS_IN_CYCLE:
      if (value == null) {
        unsetDays_in_cycle();
      } else {
        setDays_in_cycle((List<String>)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStart_date();
      } else {
        setStart_date((DateInfo)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEnd_date();
      } else {
        setEnd_date((DateInfo)value);
      }
      break;

    case CUSTOM_OPTION:
      if (value == null) {
        unsetCustom_option();
      } else {
        setCustom_option((CustomRepeat)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FREQUENCY:
      return getFrequency();

    case DAYS_IN_CYCLE:
      return getDays_in_cycle();

    case START_DATE:
      return getStart_date();

    case END_DATE:
      return getEnd_date();

    case CUSTOM_OPTION:
      return getCustom_option();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FREQUENCY:
      return isSetFrequency();
    case DAYS_IN_CYCLE:
      return isSetDays_in_cycle();
    case START_DATE:
      return isSetStart_date();
    case END_DATE:
      return isSetEnd_date();
    case CUSTOM_OPTION:
      return isSetCustom_option();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateOption)
      return this.equals((DateOption)that);
    return false;
  }

  public boolean equals(DateOption that) {
    if (that == null)
      return false;

    boolean this_present_frequency = true && this.isSetFrequency();
    boolean that_present_frequency = true && that.isSetFrequency();
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (!this.frequency.equals(that.frequency))
        return false;
    }

    boolean this_present_days_in_cycle = true && this.isSetDays_in_cycle();
    boolean that_present_days_in_cycle = true && that.isSetDays_in_cycle();
    if (this_present_days_in_cycle || that_present_days_in_cycle) {
      if (!(this_present_days_in_cycle && that_present_days_in_cycle))
        return false;
      if (!this.days_in_cycle.equals(that.days_in_cycle))
        return false;
    }

    boolean this_present_start_date = true && this.isSetStart_date();
    boolean that_present_start_date = true && that.isSetStart_date();
    if (this_present_start_date || that_present_start_date) {
      if (!(this_present_start_date && that_present_start_date))
        return false;
      if (!this.start_date.equals(that.start_date))
        return false;
    }

    boolean this_present_end_date = true && this.isSetEnd_date();
    boolean that_present_end_date = true && that.isSetEnd_date();
    if (this_present_end_date || that_present_end_date) {
      if (!(this_present_end_date && that_present_end_date))
        return false;
      if (!this.end_date.equals(that.end_date))
        return false;
    }

    boolean this_present_custom_option = true && this.isSetCustom_option();
    boolean that_present_custom_option = true && that.isSetCustom_option();
    if (this_present_custom_option || that_present_custom_option) {
      if (!(this_present_custom_option && that_present_custom_option))
        return false;
      if (!this.custom_option.equals(that.custom_option))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(DateOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(other.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, other.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDays_in_cycle()).compareTo(other.isSetDays_in_cycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDays_in_cycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days_in_cycle, other.days_in_cycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustom_option()).compareTo(other.isSetCustom_option());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustom_option()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom_option, other.custom_option);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DateOption(");
    boolean first = true;

    if (isSetFrequency()) {
      sb.append("frequency:");
      if (this.frequency == null) {
        sb.append("null");
      } else {
        sb.append(this.frequency);
      }
      first = false;
    }
    if (isSetDays_in_cycle()) {
      if (!first) sb.append(", ");
      sb.append("days_in_cycle:");
      if (this.days_in_cycle == null) {
        sb.append("null");
      } else {
        sb.append(this.days_in_cycle);
      }
      first = false;
    }
    if (isSetStart_date()) {
      if (!first) sb.append(", ");
      sb.append("start_date:");
      if (this.start_date == null) {
        sb.append("null");
      } else {
        sb.append(this.start_date);
      }
      first = false;
    }
    if (isSetEnd_date()) {
      if (!first) sb.append(", ");
      sb.append("end_date:");
      if (this.end_date == null) {
        sb.append("null");
      } else {
        sb.append(this.end_date);
      }
      first = false;
    }
    if (isSetCustom_option()) {
      if (!first) sb.append(", ");
      sb.append("custom_option:");
      if (this.custom_option == null) {
        sb.append("null");
      } else {
        sb.append(this.custom_option);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (start_date != null) {
      start_date.validate();
    }
    if (end_date != null) {
      end_date.validate();
    }
    if (custom_option != null) {
      custom_option.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateOptionStandardSchemeFactory implements SchemeFactory {
    public DateOptionStandardScheme getScheme() {
      return new DateOptionStandardScheme();
    }
  }

  private static class DateOptionStandardScheme extends StandardScheme<DateOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequency = Frequency.findByValue(iprot.readI32());
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAYS_IN_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.days_in_cycle = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.days_in_cycle.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setDays_in_cycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start_date = new DateInfo();
              struct.start_date.read(iprot);
              struct.setStart_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.end_date = new DateInfo();
              struct.end_date.read(iprot);
              struct.setEnd_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUSTOM_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.custom_option = new CustomRepeat();
              struct.custom_option.read(iprot);
              struct.setCustom_optionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.frequency != null) {
        if (struct.isSetFrequency()) {
          oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
          oprot.writeI32(struct.frequency.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.days_in_cycle != null) {
        if (struct.isSetDays_in_cycle()) {
          oprot.writeFieldBegin(DAYS_IN_CYCLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.days_in_cycle.size()));
            for (String _iter11 : struct.days_in_cycle)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.start_date != null) {
        if (struct.isSetStart_date()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          struct.start_date.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.end_date != null) {
        if (struct.isSetEnd_date()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          struct.end_date.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.custom_option != null) {
        if (struct.isSetCustom_option()) {
          oprot.writeFieldBegin(CUSTOM_OPTION_FIELD_DESC);
          struct.custom_option.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateOptionTupleSchemeFactory implements SchemeFactory {
    public DateOptionTupleScheme getScheme() {
      return new DateOptionTupleScheme();
    }
  }

  private static class DateOptionTupleScheme extends TupleScheme<DateOption> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DateOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFrequency()) {
        optionals.set(0);
      }
      if (struct.isSetDays_in_cycle()) {
        optionals.set(1);
      }
      if (struct.isSetStart_date()) {
        optionals.set(2);
      }
      if (struct.isSetEnd_date()) {
        optionals.set(3);
      }
      if (struct.isSetCustom_option()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFrequency()) {
        oprot.writeI32(struct.frequency.getValue());
      }
      if (struct.isSetDays_in_cycle()) {
        {
          oprot.writeI32(struct.days_in_cycle.size());
          for (String _iter12 : struct.days_in_cycle)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetStart_date()) {
        struct.start_date.write(oprot);
      }
      if (struct.isSetEnd_date()) {
        struct.end_date.write(oprot);
      }
      if (struct.isSetCustom_option()) {
        struct.custom_option.write(oprot);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DateOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.frequency = Frequency.findByValue(iprot.readI32());
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.days_in_cycle = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.days_in_cycle.add(_elem15);
          }
        }
        struct.setDays_in_cycleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.start_date = new DateInfo();
        struct.start_date.read(iprot);
        struct.setStart_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.end_date = new DateInfo();
        struct.end_date.read(iprot);
        struct.setEnd_dateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.custom_option = new CustomRepeat();
        struct.custom_option.read(iprot);
        struct.setCustom_optionIsSet(true);
      }
    }
  }

}

