/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class IotServiceContext implements org.apache.thrift.TBase<IotServiceContext, IotServiceContext._Fields>, java.io.Serializable, Cloneable, Comparable<IotServiceContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IotServiceContext");

  private static final org.apache.thrift.protocol.TField NETS_FIELD_DESC = new org.apache.thrift.protocol.TField("nets", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FAQ_NETS_FIELD_DESC = new org.apache.thrift.protocol.TField("faq_nets", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IotServiceContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IotServiceContextTupleSchemeFactory());
  }

  public Map<String,String> nets; // optional
  public Map<String,String> faq_nets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NETS((short)1, "nets"),
    FAQ_NETS((short)2, "faq_nets");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NETS
          return NETS;
        case 2: // FAQ_NETS
          return FAQ_NETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NETS,_Fields.FAQ_NETS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NETS, new org.apache.thrift.meta_data.FieldMetaData("nets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FAQ_NETS, new org.apache.thrift.meta_data.FieldMetaData("faq_nets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IotServiceContext.class, metaDataMap);
  }

  public IotServiceContext() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IotServiceContext(IotServiceContext other) {
    if (other.isSetNets()) {
      Map<String,String> __this__nets = new HashMap<String,String>(other.nets);
      this.nets = __this__nets;
    }
    if (other.isSetFaq_nets()) {
      Map<String,String> __this__faq_nets = new HashMap<String,String>(other.faq_nets);
      this.faq_nets = __this__faq_nets;
    }
  }

  public IotServiceContext deepCopy() {
    return new IotServiceContext(this);
  }

  
  public void clear() {
    this.nets = null;
    this.faq_nets = null;
  }

  public int getNetsSize() {
    return (this.nets == null) ? 0 : this.nets.size();
  }

  public void putToNets(String key, String val) {
    if (this.nets == null) {
      this.nets = new HashMap<String,String>();
    }
    this.nets.put(key, val);
  }

  public Map<String,String> getNets() {
    return this.nets;
  }

  public IotServiceContext setNets(Map<String,String> nets) {
    this.nets = nets;
    return this;
  }

  public void unsetNets() {
    this.nets = null;
  }

  /** Returns true if field nets is set (has been assigned a value) and false otherwise */
  public boolean isSetNets() {
    return this.nets != null;
  }

  public void setNetsIsSet(boolean value) {
    if (!value) {
      this.nets = null;
    }
  }

  public int getFaq_netsSize() {
    return (this.faq_nets == null) ? 0 : this.faq_nets.size();
  }

  public void putToFaq_nets(String key, String val) {
    if (this.faq_nets == null) {
      this.faq_nets = new HashMap<String,String>();
    }
    this.faq_nets.put(key, val);
  }

  public Map<String,String> getFaq_nets() {
    return this.faq_nets;
  }

  public IotServiceContext setFaq_nets(Map<String,String> faq_nets) {
    this.faq_nets = faq_nets;
    return this;
  }

  public void unsetFaq_nets() {
    this.faq_nets = null;
  }

  /** Returns true if field faq_nets is set (has been assigned a value) and false otherwise */
  public boolean isSetFaq_nets() {
    return this.faq_nets != null;
  }

  public void setFaq_netsIsSet(boolean value) {
    if (!value) {
      this.faq_nets = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NETS:
      if (value == null) {
        unsetNets();
      } else {
        setNets((Map<String,String>)value);
      }
      break;

    case FAQ_NETS:
      if (value == null) {
        unsetFaq_nets();
      } else {
        setFaq_nets((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NETS:
      return getNets();

    case FAQ_NETS:
      return getFaq_nets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NETS:
      return isSetNets();
    case FAQ_NETS:
      return isSetFaq_nets();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IotServiceContext)
      return this.equals((IotServiceContext)that);
    return false;
  }

  public boolean equals(IotServiceContext that) {
    if (that == null)
      return false;

    boolean this_present_nets = true && this.isSetNets();
    boolean that_present_nets = true && that.isSetNets();
    if (this_present_nets || that_present_nets) {
      if (!(this_present_nets && that_present_nets))
        return false;
      if (!this.nets.equals(that.nets))
        return false;
    }

    boolean this_present_faq_nets = true && this.isSetFaq_nets();
    boolean that_present_faq_nets = true && that.isSetFaq_nets();
    if (this_present_faq_nets || that_present_faq_nets) {
      if (!(this_present_faq_nets && that_present_faq_nets))
        return false;
      if (!this.faq_nets.equals(that.faq_nets))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(IotServiceContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNets()).compareTo(other.isSetNets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nets, other.nets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaq_nets()).compareTo(other.isSetFaq_nets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaq_nets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faq_nets, other.faq_nets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("IotServiceContext(");
    boolean first = true;

    if (isSetNets()) {
      sb.append("nets:");
      if (this.nets == null) {
        sb.append("null");
      } else {
        sb.append(this.nets);
      }
      first = false;
    }
    if (isSetFaq_nets()) {
      if (!first) sb.append(", ");
      sb.append("faq_nets:");
      if (this.faq_nets == null) {
        sb.append("null");
      } else {
        sb.append(this.faq_nets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IotServiceContextStandardSchemeFactory implements SchemeFactory {
    public IotServiceContextStandardScheme getScheme() {
      return new IotServiceContextStandardScheme();
    }
  }

  private static class IotServiceContextStandardScheme extends StandardScheme<IotServiceContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IotServiceContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map516 = iprot.readMapBegin();
                struct.nets = new HashMap<String,String>(2*_map516.size);
                for (int _i517 = 0; _i517 < _map516.size; ++_i517)
                {
                  String _key518;
                  String _val519;
                  _key518 = iprot.readString();
                  _val519 = iprot.readString();
                  struct.nets.put(_key518, _val519);
                }
                iprot.readMapEnd();
              }
              struct.setNetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAQ_NETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map520 = iprot.readMapBegin();
                struct.faq_nets = new HashMap<String,String>(2*_map520.size);
                for (int _i521 = 0; _i521 < _map520.size; ++_i521)
                {
                  String _key522;
                  String _val523;
                  _key522 = iprot.readString();
                  _val523 = iprot.readString();
                  struct.faq_nets.put(_key522, _val523);
                }
                iprot.readMapEnd();
              }
              struct.setFaq_netsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IotServiceContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nets != null) {
        if (struct.isSetNets()) {
          oprot.writeFieldBegin(NETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.nets.size()));
            for (Map.Entry<String, String> _iter524 : struct.nets.entrySet())
            {
              oprot.writeString(_iter524.getKey());
              oprot.writeString(_iter524.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.faq_nets != null) {
        if (struct.isSetFaq_nets()) {
          oprot.writeFieldBegin(FAQ_NETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.faq_nets.size()));
            for (Map.Entry<String, String> _iter525 : struct.faq_nets.entrySet())
            {
              oprot.writeString(_iter525.getKey());
              oprot.writeString(_iter525.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IotServiceContextTupleSchemeFactory implements SchemeFactory {
    public IotServiceContextTupleScheme getScheme() {
      return new IotServiceContextTupleScheme();
    }
  }

  private static class IotServiceContextTupleScheme extends TupleScheme<IotServiceContext> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, IotServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNets()) {
        optionals.set(0);
      }
      if (struct.isSetFaq_nets()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNets()) {
        {
          oprot.writeI32(struct.nets.size());
          for (Map.Entry<String, String> _iter526 : struct.nets.entrySet())
          {
            oprot.writeString(_iter526.getKey());
            oprot.writeString(_iter526.getValue());
          }
        }
      }
      if (struct.isSetFaq_nets()) {
        {
          oprot.writeI32(struct.faq_nets.size());
          for (Map.Entry<String, String> _iter527 : struct.faq_nets.entrySet())
          {
            oprot.writeString(_iter527.getKey());
            oprot.writeString(_iter527.getValue());
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, IotServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map528 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.nets = new HashMap<String,String>(2*_map528.size);
          for (int _i529 = 0; _i529 < _map528.size; ++_i529)
          {
            String _key530;
            String _val531;
            _key530 = iprot.readString();
            _val531 = iprot.readString();
            struct.nets.put(_key530, _val531);
          }
        }
        struct.setNetsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map532 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.faq_nets = new HashMap<String,String>(2*_map532.size);
          for (int _i533 = 0; _i533 < _map532.size; ++_i533)
          {
            String _key534;
            String _val535;
            _key534 = iprot.readString();
            _val535 = iprot.readString();
            struct.faq_nets.put(_key534, _val535);
          }
        }
        struct.setFaq_netsIsSet(true);
      }
    }
  }

}

