/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class TrioFeatureBundle implements org.apache.thrift.TBase<TrioFeatureBundle, TrioFeatureBundle._Fields>, java.io.Serializable, Cloneable, Comparable<TrioFeatureBundle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TrioFeatureBundle");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INTENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("intentions", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("request_timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField USER_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)50);
  private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_profile", org.apache.thrift.protocol.TType.STRUCT, (short)51);
  private static final org.apache.thrift.protocol.TField REPLY_FROM_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_from_service", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField RESPS_FIELD_DESC = new org.apache.thrift.protocol.TField("resps", org.apache.thrift.protocol.TType.LIST, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TrioFeatureBundleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TrioFeatureBundleTupleSchemeFactory());
  }

  public String query; // required
  public Map<Domain,Double> intentions; // optional
  public long request_timestamp; // optional
  public UserContext user_ctx; // optional
  public TrioUserProfile user_profile; // optional
  /**
   * 
   * @see ServiceName
   */
  public ServiceName reply_from_service; // optional
  public List<ResponseParams> resps; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    INTENTIONS((short)2, "intentions"),
    REQUEST_TIMESTAMP((short)3, "request_timestamp"),
    USER_CTX((short)50, "user_ctx"),
    USER_PROFILE((short)51, "user_profile"),
    /**
     * 
     * @see ServiceName
     */
    REPLY_FROM_SERVICE((short)100, "reply_from_service"),
    RESPS((short)101, "resps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // INTENTIONS
          return INTENTIONS;
        case 3: // REQUEST_TIMESTAMP
          return REQUEST_TIMESTAMP;
        case 50: // USER_CTX
          return USER_CTX;
        case 51: // USER_PROFILE
          return USER_PROFILE;
        case 100: // REPLY_FROM_SERVICE
          return REPLY_FROM_SERVICE;
        case 101: // RESPS
          return RESPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUEST_TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INTENTIONS,_Fields.REQUEST_TIMESTAMP,_Fields.USER_CTX,_Fields.USER_PROFILE,_Fields.REPLY_FROM_SERVICE,_Fields.RESPS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTENTIONS, new org.apache.thrift.meta_data.FieldMetaData("intentions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Domain.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.REQUEST_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("request_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_CTX, new org.apache.thrift.meta_data.FieldMetaData("user_ctx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserContext.class)));
    tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("user_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrioUserProfile.class)));
    tmpMap.put(_Fields.REPLY_FROM_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("reply_from_service", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceName.class)));
    tmpMap.put(_Fields.RESPS, new org.apache.thrift.meta_data.FieldMetaData("resps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseParams.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TrioFeatureBundle.class, metaDataMap);
  }

  public TrioFeatureBundle() {
  }

  public TrioFeatureBundle(
    String query)
  {
    this();
    this.query = query;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TrioFeatureBundle(TrioFeatureBundle other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetIntentions()) {
      Map<Domain,Double> __this__intentions = new HashMap<Domain,Double>(other.intentions.size());
      for (Map.Entry<Domain, Double> other_element : other.intentions.entrySet()) {

        Domain other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        Domain __this__intentions_copy_key = other_element_key;

        Double __this__intentions_copy_value = other_element_value;

        __this__intentions.put(__this__intentions_copy_key, __this__intentions_copy_value);
      }
      this.intentions = __this__intentions;
    }
    this.request_timestamp = other.request_timestamp;
    if (other.isSetUser_ctx()) {
      this.user_ctx = new UserContext(other.user_ctx);
    }
    if (other.isSetUser_profile()) {
      this.user_profile = new TrioUserProfile(other.user_profile);
    }
    if (other.isSetReply_from_service()) {
      this.reply_from_service = other.reply_from_service;
    }
    if (other.isSetResps()) {
      List<ResponseParams> __this__resps = new ArrayList<ResponseParams>(other.resps.size());
      for (ResponseParams other_element : other.resps) {
        __this__resps.add(new ResponseParams(other_element));
      }
      this.resps = __this__resps;
    }
  }

  public TrioFeatureBundle deepCopy() {
    return new TrioFeatureBundle(this);
  }

  
  public void clear() {
    this.query = null;
    this.intentions = null;
    setRequest_timestampIsSet(false);
    this.request_timestamp = 0;
    this.user_ctx = null;
    this.user_profile = null;
    this.reply_from_service = null;
    this.resps = null;
  }

  public String getQuery() {
    return this.query;
  }

  public TrioFeatureBundle setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public int getIntentionsSize() {
    return (this.intentions == null) ? 0 : this.intentions.size();
  }

  public void putToIntentions(Domain key, double val) {
    if (this.intentions == null) {
      this.intentions = new HashMap<Domain,Double>();
    }
    this.intentions.put(key, val);
  }

  public Map<Domain,Double> getIntentions() {
    return this.intentions;
  }

  public TrioFeatureBundle setIntentions(Map<Domain,Double> intentions) {
    this.intentions = intentions;
    return this;
  }

  public void unsetIntentions() {
    this.intentions = null;
  }

  /** Returns true if field intentions is set (has been assigned a value) and false otherwise */
  public boolean isSetIntentions() {
    return this.intentions != null;
  }

  public void setIntentionsIsSet(boolean value) {
    if (!value) {
      this.intentions = null;
    }
  }

  public long getRequest_timestamp() {
    return this.request_timestamp;
  }

  public TrioFeatureBundle setRequest_timestamp(long request_timestamp) {
    this.request_timestamp = request_timestamp;
    setRequest_timestampIsSet(true);
    return this;
  }

  public void unsetRequest_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field request_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID);
  }

  public void setRequest_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID, value);
  }

  public UserContext getUser_ctx() {
    return this.user_ctx;
  }

  public TrioFeatureBundle setUser_ctx(UserContext user_ctx) {
    this.user_ctx = user_ctx;
    return this;
  }

  public void unsetUser_ctx() {
    this.user_ctx = null;
  }

  /** Returns true if field user_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ctx() {
    return this.user_ctx != null;
  }

  public void setUser_ctxIsSet(boolean value) {
    if (!value) {
      this.user_ctx = null;
    }
  }

  public TrioUserProfile getUser_profile() {
    return this.user_profile;
  }

  public TrioFeatureBundle setUser_profile(TrioUserProfile user_profile) {
    this.user_profile = user_profile;
    return this;
  }

  public void unsetUser_profile() {
    this.user_profile = null;
  }

  /** Returns true if field user_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_profile() {
    return this.user_profile != null;
  }

  public void setUser_profileIsSet(boolean value) {
    if (!value) {
      this.user_profile = null;
    }
  }

  /**
   * 
   * @see ServiceName
   */
  public ServiceName getReply_from_service() {
    return this.reply_from_service;
  }

  /**
   * 
   * @see ServiceName
   */
  public TrioFeatureBundle setReply_from_service(ServiceName reply_from_service) {
    this.reply_from_service = reply_from_service;
    return this;
  }

  public void unsetReply_from_service() {
    this.reply_from_service = null;
  }

  /** Returns true if field reply_from_service is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_from_service() {
    return this.reply_from_service != null;
  }

  public void setReply_from_serviceIsSet(boolean value) {
    if (!value) {
      this.reply_from_service = null;
    }
  }

  public int getRespsSize() {
    return (this.resps == null) ? 0 : this.resps.size();
  }

  public java.util.Iterator<ResponseParams> getRespsIterator() {
    return (this.resps == null) ? null : this.resps.iterator();
  }

  public void addToResps(ResponseParams elem) {
    if (this.resps == null) {
      this.resps = new ArrayList<ResponseParams>();
    }
    this.resps.add(elem);
  }

  public List<ResponseParams> getResps() {
    return this.resps;
  }

  public TrioFeatureBundle setResps(List<ResponseParams> resps) {
    this.resps = resps;
    return this;
  }

  public void unsetResps() {
    this.resps = null;
  }

  /** Returns true if field resps is set (has been assigned a value) and false otherwise */
  public boolean isSetResps() {
    return this.resps != null;
  }

  public void setRespsIsSet(boolean value) {
    if (!value) {
      this.resps = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case INTENTIONS:
      if (value == null) {
        unsetIntentions();
      } else {
        setIntentions((Map<Domain,Double>)value);
      }
      break;

    case REQUEST_TIMESTAMP:
      if (value == null) {
        unsetRequest_timestamp();
      } else {
        setRequest_timestamp((Long)value);
      }
      break;

    case USER_CTX:
      if (value == null) {
        unsetUser_ctx();
      } else {
        setUser_ctx((UserContext)value);
      }
      break;

    case USER_PROFILE:
      if (value == null) {
        unsetUser_profile();
      } else {
        setUser_profile((TrioUserProfile)value);
      }
      break;

    case REPLY_FROM_SERVICE:
      if (value == null) {
        unsetReply_from_service();
      } else {
        setReply_from_service((ServiceName)value);
      }
      break;

    case RESPS:
      if (value == null) {
        unsetResps();
      } else {
        setResps((List<ResponseParams>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case INTENTIONS:
      return getIntentions();

    case REQUEST_TIMESTAMP:
      return Long.valueOf(getRequest_timestamp());

    case USER_CTX:
      return getUser_ctx();

    case USER_PROFILE:
      return getUser_profile();

    case REPLY_FROM_SERVICE:
      return getReply_from_service();

    case RESPS:
      return getResps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case INTENTIONS:
      return isSetIntentions();
    case REQUEST_TIMESTAMP:
      return isSetRequest_timestamp();
    case USER_CTX:
      return isSetUser_ctx();
    case USER_PROFILE:
      return isSetUser_profile();
    case REPLY_FROM_SERVICE:
      return isSetReply_from_service();
    case RESPS:
      return isSetResps();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TrioFeatureBundle)
      return this.equals((TrioFeatureBundle)that);
    return false;
  }

  public boolean equals(TrioFeatureBundle that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_intentions = true && this.isSetIntentions();
    boolean that_present_intentions = true && that.isSetIntentions();
    if (this_present_intentions || that_present_intentions) {
      if (!(this_present_intentions && that_present_intentions))
        return false;
      if (!this.intentions.equals(that.intentions))
        return false;
    }

    boolean this_present_request_timestamp = true && this.isSetRequest_timestamp();
    boolean that_present_request_timestamp = true && that.isSetRequest_timestamp();
    if (this_present_request_timestamp || that_present_request_timestamp) {
      if (!(this_present_request_timestamp && that_present_request_timestamp))
        return false;
      if (this.request_timestamp != that.request_timestamp)
        return false;
    }

    boolean this_present_user_ctx = true && this.isSetUser_ctx();
    boolean that_present_user_ctx = true && that.isSetUser_ctx();
    if (this_present_user_ctx || that_present_user_ctx) {
      if (!(this_present_user_ctx && that_present_user_ctx))
        return false;
      if (!this.user_ctx.equals(that.user_ctx))
        return false;
    }

    boolean this_present_user_profile = true && this.isSetUser_profile();
    boolean that_present_user_profile = true && that.isSetUser_profile();
    if (this_present_user_profile || that_present_user_profile) {
      if (!(this_present_user_profile && that_present_user_profile))
        return false;
      if (!this.user_profile.equals(that.user_profile))
        return false;
    }

    boolean this_present_reply_from_service = true && this.isSetReply_from_service();
    boolean that_present_reply_from_service = true && that.isSetReply_from_service();
    if (this_present_reply_from_service || that_present_reply_from_service) {
      if (!(this_present_reply_from_service && that_present_reply_from_service))
        return false;
      if (!this.reply_from_service.equals(that.reply_from_service))
        return false;
    }

    boolean this_present_resps = true && this.isSetResps();
    boolean that_present_resps = true && that.isSetResps();
    if (this_present_resps || that_present_resps) {
      if (!(this_present_resps && that_present_resps))
        return false;
      if (!this.resps.equals(that.resps))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(TrioFeatureBundle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntentions()).compareTo(other.isSetIntentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intentions, other.intentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_timestamp()).compareTo(other.isSetRequest_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_timestamp, other.request_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_ctx()).compareTo(other.isSetUser_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ctx, other.user_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_profile()).compareTo(other.isSetUser_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_profile, other.user_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_from_service()).compareTo(other.isSetReply_from_service());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_from_service()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_from_service, other.reply_from_service);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResps()).compareTo(other.isSetResps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resps, other.resps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("TrioFeatureBundle(");
    boolean first = true;

    sb.append("query:");
    if (this.query == null) {
      sb.append("null");
    } else {
      sb.append(this.query);
    }
    first = false;
    if (isSetIntentions()) {
      if (!first) sb.append(", ");
      sb.append("intentions:");
      if (this.intentions == null) {
        sb.append("null");
      } else {
        sb.append(this.intentions);
      }
      first = false;
    }
    if (isSetRequest_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("request_timestamp:");
      sb.append(this.request_timestamp);
      first = false;
    }
    if (isSetUser_ctx()) {
      if (!first) sb.append(", ");
      sb.append("user_ctx:");
      if (this.user_ctx == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ctx);
      }
      first = false;
    }
    if (isSetUser_profile()) {
      if (!first) sb.append(", ");
      sb.append("user_profile:");
      if (this.user_profile == null) {
        sb.append("null");
      } else {
        sb.append(this.user_profile);
      }
      first = false;
    }
    if (isSetReply_from_service()) {
      if (!first) sb.append(", ");
      sb.append("reply_from_service:");
      if (this.reply_from_service == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_from_service);
      }
      first = false;
    }
    if (isSetResps()) {
      if (!first) sb.append(", ");
      sb.append("resps:");
      if (this.resps == null) {
        sb.append("null");
      } else {
        sb.append(this.resps);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (user_ctx != null) {
      user_ctx.validate();
    }
    if (user_profile != null) {
      user_profile.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TrioFeatureBundleStandardSchemeFactory implements SchemeFactory {
    public TrioFeatureBundleStandardScheme getScheme() {
      return new TrioFeatureBundleStandardScheme();
    }
  }

  private static class TrioFeatureBundleStandardScheme extends StandardScheme<TrioFeatureBundle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TrioFeatureBundle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map554 = iprot.readMapBegin();
                struct.intentions = new HashMap<Domain,Double>(2*_map554.size);
                for (int _i555 = 0; _i555 < _map554.size; ++_i555)
                {
                  Domain _key556;
                  double _val557;
                  _key556 = Domain.findByValue(iprot.readI32());
                  _val557 = iprot.readDouble();
                  struct.intentions.put(_key556, _val557);
                }
                iprot.readMapEnd();
              }
              struct.setIntentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_timestamp = iprot.readI64();
              struct.setRequest_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // USER_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_ctx = new UserContext();
              struct.user_ctx.read(iprot);
              struct.setUser_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // USER_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_profile = new TrioUserProfile();
              struct.user_profile.read(iprot);
              struct.setUser_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // REPLY_FROM_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
              struct.setReply_from_serviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // RESPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list558 = iprot.readListBegin();
                struct.resps = new ArrayList<ResponseParams>(_list558.size);
                for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                {
                  ResponseParams _elem560;
                  _elem560 = new ResponseParams();
                  _elem560.read(iprot);
                  struct.resps.add(_elem560);
                }
                iprot.readListEnd();
              }
              struct.setRespsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TrioFeatureBundle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeString(struct.query);
        oprot.writeFieldEnd();
      }
      if (struct.intentions != null) {
        if (struct.isSetIntentions()) {
          oprot.writeFieldBegin(INTENTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.intentions.size()));
            for (Map.Entry<Domain, Double> _iter561 : struct.intentions.entrySet())
            {
              oprot.writeI32(_iter561.getKey().getValue());
              oprot.writeDouble(_iter561.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequest_timestamp()) {
        oprot.writeFieldBegin(REQUEST_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.request_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.user_ctx != null) {
        if (struct.isSetUser_ctx()) {
          oprot.writeFieldBegin(USER_CTX_FIELD_DESC);
          struct.user_ctx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_profile != null) {
        if (struct.isSetUser_profile()) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.user_profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_from_service != null) {
        if (struct.isSetReply_from_service()) {
          oprot.writeFieldBegin(REPLY_FROM_SERVICE_FIELD_DESC);
          oprot.writeI32(struct.reply_from_service.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.resps != null) {
        if (struct.isSetResps()) {
          oprot.writeFieldBegin(RESPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resps.size()));
            for (ResponseParams _iter562 : struct.resps)
            {
              _iter562.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TrioFeatureBundleTupleSchemeFactory implements SchemeFactory {
    public TrioFeatureBundleTupleScheme getScheme() {
      return new TrioFeatureBundleTupleScheme();
    }
  }

  private static class TrioFeatureBundleTupleScheme extends TupleScheme<TrioFeatureBundle> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, TrioFeatureBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.query);
      BitSet optionals = new BitSet();
      if (struct.isSetIntentions()) {
        optionals.set(0);
      }
      if (struct.isSetRequest_timestamp()) {
        optionals.set(1);
      }
      if (struct.isSetUser_ctx()) {
        optionals.set(2);
      }
      if (struct.isSetUser_profile()) {
        optionals.set(3);
      }
      if (struct.isSetReply_from_service()) {
        optionals.set(4);
      }
      if (struct.isSetResps()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIntentions()) {
        {
          oprot.writeI32(struct.intentions.size());
          for (Map.Entry<Domain, Double> _iter563 : struct.intentions.entrySet())
          {
            oprot.writeI32(_iter563.getKey().getValue());
            oprot.writeDouble(_iter563.getValue());
          }
        }
      }
      if (struct.isSetRequest_timestamp()) {
        oprot.writeI64(struct.request_timestamp);
      }
      if (struct.isSetUser_ctx()) {
        struct.user_ctx.write(oprot);
      }
      if (struct.isSetUser_profile()) {
        struct.user_profile.write(oprot);
      }
      if (struct.isSetReply_from_service()) {
        oprot.writeI32(struct.reply_from_service.getValue());
      }
      if (struct.isSetResps()) {
        {
          oprot.writeI32(struct.resps.size());
          for (ResponseParams _iter564 : struct.resps)
          {
            _iter564.write(oprot);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, TrioFeatureBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.query = iprot.readString();
      struct.setQueryIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map565 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.intentions = new HashMap<Domain,Double>(2*_map565.size);
          for (int _i566 = 0; _i566 < _map565.size; ++_i566)
          {
            Domain _key567;
            double _val568;
            _key567 = Domain.findByValue(iprot.readI32());
            _val568 = iprot.readDouble();
            struct.intentions.put(_key567, _val568);
          }
        }
        struct.setIntentionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.request_timestamp = iprot.readI64();
        struct.setRequest_timestampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.user_ctx = new UserContext();
        struct.user_ctx.read(iprot);
        struct.setUser_ctxIsSet(true);
      }
      if (incoming.get(3)) {
        struct.user_profile = new TrioUserProfile();
        struct.user_profile.read(iprot);
        struct.setUser_profileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
        struct.setReply_from_serviceIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list569 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resps = new ArrayList<ResponseParams>(_list569.size);
          for (int _i570 = 0; _i570 < _list569.size; ++_i570)
          {
            ResponseParams _elem571;
            _elem571 = new ResponseParams();
            _elem571.read(iprot);
            struct.resps.add(_elem571);
          }
        }
        struct.setRespsIsSet(true);
      }
    }
  }

}

