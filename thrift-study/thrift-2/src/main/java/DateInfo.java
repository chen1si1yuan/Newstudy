/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class DateInfo implements org.apache.thrift.TBase<DateInfo, DateInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DateInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateInfo");

  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateInfoTupleSchemeFactory());
  }

  public String year; // optional
  public String month; // optional
  public String day; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YEAR((short)1, "year"),
    MONTH((short)2, "month"),
    DAY((short)3, "day");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YEAR
          return YEAR;
        case 2: // MONTH
          return MONTH;
        case 3: // DAY
          return DAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.YEAR,_Fields.MONTH,_Fields.DAY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateInfo.class, metaDataMap);
  }

  public DateInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateInfo(DateInfo other) {
    if (other.isSetYear()) {
      this.year = other.year;
    }
    if (other.isSetMonth()) {
      this.month = other.month;
    }
    if (other.isSetDay()) {
      this.day = other.day;
    }
  }

  public DateInfo deepCopy() {
    return new DateInfo(this);
  }

  
  public void clear() {
    this.year = null;
    this.month = null;
    this.day = null;
  }

  public String getYear() {
    return this.year;
  }

  public DateInfo setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public String getMonth() {
    return this.month;
  }

  public DateInfo setMonth(String month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  public String getDay() {
    return this.day;
  }

  public DateInfo setDay(String day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((String)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YEAR:
      return getYear();

    case MONTH:
      return getMonth();

    case DAY:
      return getDay();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateInfo)
      return this.equals((DateInfo)that);
    return false;
  }

  public boolean equals(DateInfo that) {
    if (that == null)
      return false;

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(DateInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DateInfo(");
    boolean first = true;

    if (isSetYear()) {
      sb.append("year:");
      if (this.year == null) {
        sb.append("null");
      } else {
        sb.append(this.year);
      }
      first = false;
    }
    if (isSetMonth()) {
      if (!first) sb.append(", ");
      sb.append("month:");
      if (this.month == null) {
        sb.append("null");
      } else {
        sb.append(this.month);
      }
      first = false;
    }
    if (isSetDay()) {
      if (!first) sb.append(", ");
      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateInfoStandardSchemeFactory implements SchemeFactory {
    public DateInfoStandardScheme getScheme() {
      return new DateInfoStandardScheme();
    }
  }

  private static class DateInfoStandardScheme extends StandardScheme<DateInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.month = iprot.readString();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day = iprot.readString();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.year != null) {
        if (struct.isSetYear()) {
          oprot.writeFieldBegin(YEAR_FIELD_DESC);
          oprot.writeString(struct.year);
          oprot.writeFieldEnd();
        }
      }
      if (struct.month != null) {
        if (struct.isSetMonth()) {
          oprot.writeFieldBegin(MONTH_FIELD_DESC);
          oprot.writeString(struct.month);
          oprot.writeFieldEnd();
        }
      }
      if (struct.day != null) {
        if (struct.isSetDay()) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeString(struct.day);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateInfoTupleSchemeFactory implements SchemeFactory {
    public DateInfoTupleScheme getScheme() {
      return new DateInfoTupleScheme();
    }
  }

  private static class DateInfoTupleScheme extends TupleScheme<DateInfo> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetYear()) {
        optionals.set(0);
      }
      if (struct.isSetMonth()) {
        optionals.set(1);
      }
      if (struct.isSetDay()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
      if (struct.isSetMonth()) {
        oprot.writeString(struct.month);
      }
      if (struct.isSetDay()) {
        oprot.writeString(struct.day);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
      if (incoming.get(1)) {
        struct.month = iprot.readString();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.day = iprot.readString();
        struct.setDayIsSet(true);
      }
    }
  }

}

