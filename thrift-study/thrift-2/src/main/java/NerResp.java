/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class NerResp implements org.apache.thrift.TBase<NerResp, NerResp._Fields>, java.io.Serializable, Cloneable, Comparable<NerResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NerResp");

  private static final org.apache.thrift.protocol.TField RESPS_FIELD_DESC = new org.apache.thrift.protocol.TField("resps", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NerRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NerRespTupleSchemeFactory());
  }

  public Map<String,NerSingleResp> resps; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPS((short)1, "resps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPS
          return RESPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RESPS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPS, new org.apache.thrift.meta_data.FieldMetaData("resps", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NerSingleResp.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NerResp.class, metaDataMap);
  }

  public NerResp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NerResp(NerResp other) {
    if (other.isSetResps()) {
      Map<String,NerSingleResp> __this__resps = new HashMap<String,NerSingleResp>(other.resps.size());
      for (Map.Entry<String, NerSingleResp> other_element : other.resps.entrySet()) {

        String other_element_key = other_element.getKey();
        NerSingleResp other_element_value = other_element.getValue();

        String __this__resps_copy_key = other_element_key;

        NerSingleResp __this__resps_copy_value = new NerSingleResp(other_element_value);

        __this__resps.put(__this__resps_copy_key, __this__resps_copy_value);
      }
      this.resps = __this__resps;
    }
  }

  public NerResp deepCopy() {
    return new NerResp(this);
  }

  
  public void clear() {
    this.resps = null;
  }

  public int getRespsSize() {
    return (this.resps == null) ? 0 : this.resps.size();
  }

  public void putToResps(String key, NerSingleResp val) {
    if (this.resps == null) {
      this.resps = new HashMap<String,NerSingleResp>();
    }
    this.resps.put(key, val);
  }

  public Map<String,NerSingleResp> getResps() {
    return this.resps;
  }

  public NerResp setResps(Map<String,NerSingleResp> resps) {
    this.resps = resps;
    return this;
  }

  public void unsetResps() {
    this.resps = null;
  }

  /** Returns true if field resps is set (has been assigned a value) and false otherwise */
  public boolean isSetResps() {
    return this.resps != null;
  }

  public void setRespsIsSet(boolean value) {
    if (!value) {
      this.resps = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPS:
      if (value == null) {
        unsetResps();
      } else {
        setResps((Map<String,NerSingleResp>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPS:
      return getResps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPS:
      return isSetResps();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NerResp)
      return this.equals((NerResp)that);
    return false;
  }

  public boolean equals(NerResp that) {
    if (that == null)
      return false;

    boolean this_present_resps = true && this.isSetResps();
    boolean that_present_resps = true && that.isSetResps();
    if (this_present_resps || that_present_resps) {
      if (!(this_present_resps && that_present_resps))
        return false;
      if (!this.resps.equals(that.resps))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(NerResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResps()).compareTo(other.isSetResps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resps, other.resps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("NerResp(");
    boolean first = true;

    if (isSetResps()) {
      sb.append("resps:");
      if (this.resps == null) {
        sb.append("null");
      } else {
        sb.append(this.resps);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NerRespStandardSchemeFactory implements SchemeFactory {
    public NerRespStandardScheme getScheme() {
      return new NerRespStandardScheme();
    }
  }

  private static class NerRespStandardScheme extends StandardScheme<NerResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NerResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.resps = new HashMap<String,NerSingleResp>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10;
                  NerSingleResp _val11;
                  _key10 = iprot.readString();
                  _val11 = new NerSingleResp();
                  _val11.read(iprot);
                  struct.resps.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setRespsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NerResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resps != null) {
        if (struct.isSetResps()) {
          oprot.writeFieldBegin(RESPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.resps.size()));
            for (Map.Entry<String, NerSingleResp> _iter12 : struct.resps.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              _iter12.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NerRespTupleSchemeFactory implements SchemeFactory {
    public NerRespTupleScheme getScheme() {
      return new NerRespTupleScheme();
    }
  }

  private static class NerRespTupleScheme extends TupleScheme<NerResp> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, NerResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResps()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetResps()) {
        {
          oprot.writeI32(struct.resps.size());
          for (Map.Entry<String, NerSingleResp> _iter13 : struct.resps.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            _iter13.getValue().write(oprot);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, NerResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resps = new HashMap<String,NerSingleResp>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16;
            NerSingleResp _val17;
            _key16 = iprot.readString();
            _val17 = new NerSingleResp();
            _val17.read(iprot);
            struct.resps.put(_key16, _val17);
          }
        }
        struct.setRespsIsSet(true);
      }
    }
  }

}

