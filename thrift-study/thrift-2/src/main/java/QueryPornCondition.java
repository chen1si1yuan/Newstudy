/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class QueryPornCondition implements org.apache.thrift.TBase<QueryPornCondition, QueryPornCondition._Fields>, java.io.Serializable, Cloneable, Comparable<QueryPornCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryPornCondition");

  private static final org.apache.thrift.protocol.TField IS_GBK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_gbk", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField USE_PORN_WORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("use_porn_words", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REMOVE_LETTER_FIELD_DESC = new org.apache.thrift.protocol.TField("remove_letter", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField USE_GENERAL_PORN_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("use_general_porn_word", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField USE_STRICT_PORN_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("use_strict_porn_word", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryPornConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryPornConditionTupleSchemeFactory());
  }

  public boolean is_gbk; // optional
  public boolean use_porn_words; // optional
  public boolean remove_letter; // optional
  public boolean use_general_porn_word; // optional
  public boolean use_strict_porn_word; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_GBK((short)1, "is_gbk"),
    USE_PORN_WORDS((short)2, "use_porn_words"),
    REMOVE_LETTER((short)3, "remove_letter"),
    USE_GENERAL_PORN_WORD((short)4, "use_general_porn_word"),
    USE_STRICT_PORN_WORD((short)5, "use_strict_porn_word");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_GBK
          return IS_GBK;
        case 2: // USE_PORN_WORDS
          return USE_PORN_WORDS;
        case 3: // REMOVE_LETTER
          return REMOVE_LETTER;
        case 4: // USE_GENERAL_PORN_WORD
          return USE_GENERAL_PORN_WORD;
        case 5: // USE_STRICT_PORN_WORD
          return USE_STRICT_PORN_WORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_GBK_ISSET_ID = 0;
  private static final int __USE_PORN_WORDS_ISSET_ID = 1;
  private static final int __REMOVE_LETTER_ISSET_ID = 2;
  private static final int __USE_GENERAL_PORN_WORD_ISSET_ID = 3;
  private static final int __USE_STRICT_PORN_WORD_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_GBK,_Fields.USE_PORN_WORDS,_Fields.REMOVE_LETTER,_Fields.USE_GENERAL_PORN_WORD,_Fields.USE_STRICT_PORN_WORD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_GBK, new org.apache.thrift.meta_data.FieldMetaData("is_gbk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_PORN_WORDS, new org.apache.thrift.meta_data.FieldMetaData("use_porn_words", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REMOVE_LETTER, new org.apache.thrift.meta_data.FieldMetaData("remove_letter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_GENERAL_PORN_WORD, new org.apache.thrift.meta_data.FieldMetaData("use_general_porn_word", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USE_STRICT_PORN_WORD, new org.apache.thrift.meta_data.FieldMetaData("use_strict_porn_word", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryPornCondition.class, metaDataMap);
  }

  public QueryPornCondition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryPornCondition(QueryPornCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_gbk = other.is_gbk;
    this.use_porn_words = other.use_porn_words;
    this.remove_letter = other.remove_letter;
    this.use_general_porn_word = other.use_general_porn_word;
    this.use_strict_porn_word = other.use_strict_porn_word;
  }

  public QueryPornCondition deepCopy() {
    return new QueryPornCondition(this);
  }

  
  public void clear() {
    setIs_gbkIsSet(false);
    this.is_gbk = false;
    setUse_porn_wordsIsSet(false);
    this.use_porn_words = false;
    setRemove_letterIsSet(false);
    this.remove_letter = false;
    setUse_general_porn_wordIsSet(false);
    this.use_general_porn_word = false;
    setUse_strict_porn_wordIsSet(false);
    this.use_strict_porn_word = false;
  }

  public boolean isIs_gbk() {
    return this.is_gbk;
  }

  public QueryPornCondition setIs_gbk(boolean is_gbk) {
    this.is_gbk = is_gbk;
    setIs_gbkIsSet(true);
    return this;
  }

  public void unsetIs_gbk() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_GBK_ISSET_ID);
  }

  /** Returns true if field is_gbk is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_gbk() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_GBK_ISSET_ID);
  }

  public void setIs_gbkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_GBK_ISSET_ID, value);
  }

  public boolean isUse_porn_words() {
    return this.use_porn_words;
  }

  public QueryPornCondition setUse_porn_words(boolean use_porn_words) {
    this.use_porn_words = use_porn_words;
    setUse_porn_wordsIsSet(true);
    return this;
  }

  public void unsetUse_porn_words() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_PORN_WORDS_ISSET_ID);
  }

  /** Returns true if field use_porn_words is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_porn_words() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_PORN_WORDS_ISSET_ID);
  }

  public void setUse_porn_wordsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_PORN_WORDS_ISSET_ID, value);
  }

  public boolean isRemove_letter() {
    return this.remove_letter;
  }

  public QueryPornCondition setRemove_letter(boolean remove_letter) {
    this.remove_letter = remove_letter;
    setRemove_letterIsSet(true);
    return this;
  }

  public void unsetRemove_letter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMOVE_LETTER_ISSET_ID);
  }

  /** Returns true if field remove_letter is set (has been assigned a value) and false otherwise */
  public boolean isSetRemove_letter() {
    return EncodingUtils.testBit(__isset_bitfield, __REMOVE_LETTER_ISSET_ID);
  }

  public void setRemove_letterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMOVE_LETTER_ISSET_ID, value);
  }

  public boolean isUse_general_porn_word() {
    return this.use_general_porn_word;
  }

  public QueryPornCondition setUse_general_porn_word(boolean use_general_porn_word) {
    this.use_general_porn_word = use_general_porn_word;
    setUse_general_porn_wordIsSet(true);
    return this;
  }

  public void unsetUse_general_porn_word() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_GENERAL_PORN_WORD_ISSET_ID);
  }

  /** Returns true if field use_general_porn_word is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_general_porn_word() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_GENERAL_PORN_WORD_ISSET_ID);
  }

  public void setUse_general_porn_wordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_GENERAL_PORN_WORD_ISSET_ID, value);
  }

  public boolean isUse_strict_porn_word() {
    return this.use_strict_porn_word;
  }

  public QueryPornCondition setUse_strict_porn_word(boolean use_strict_porn_word) {
    this.use_strict_porn_word = use_strict_porn_word;
    setUse_strict_porn_wordIsSet(true);
    return this;
  }

  public void unsetUse_strict_porn_word() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USE_STRICT_PORN_WORD_ISSET_ID);
  }

  /** Returns true if field use_strict_porn_word is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_strict_porn_word() {
    return EncodingUtils.testBit(__isset_bitfield, __USE_STRICT_PORN_WORD_ISSET_ID);
  }

  public void setUse_strict_porn_wordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USE_STRICT_PORN_WORD_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_GBK:
      if (value == null) {
        unsetIs_gbk();
      } else {
        setIs_gbk((Boolean)value);
      }
      break;

    case USE_PORN_WORDS:
      if (value == null) {
        unsetUse_porn_words();
      } else {
        setUse_porn_words((Boolean)value);
      }
      break;

    case REMOVE_LETTER:
      if (value == null) {
        unsetRemove_letter();
      } else {
        setRemove_letter((Boolean)value);
      }
      break;

    case USE_GENERAL_PORN_WORD:
      if (value == null) {
        unsetUse_general_porn_word();
      } else {
        setUse_general_porn_word((Boolean)value);
      }
      break;

    case USE_STRICT_PORN_WORD:
      if (value == null) {
        unsetUse_strict_porn_word();
      } else {
        setUse_strict_porn_word((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_GBK:
      return Boolean.valueOf(isIs_gbk());

    case USE_PORN_WORDS:
      return Boolean.valueOf(isUse_porn_words());

    case REMOVE_LETTER:
      return Boolean.valueOf(isRemove_letter());

    case USE_GENERAL_PORN_WORD:
      return Boolean.valueOf(isUse_general_porn_word());

    case USE_STRICT_PORN_WORD:
      return Boolean.valueOf(isUse_strict_porn_word());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_GBK:
      return isSetIs_gbk();
    case USE_PORN_WORDS:
      return isSetUse_porn_words();
    case REMOVE_LETTER:
      return isSetRemove_letter();
    case USE_GENERAL_PORN_WORD:
      return isSetUse_general_porn_word();
    case USE_STRICT_PORN_WORD:
      return isSetUse_strict_porn_word();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryPornCondition)
      return this.equals((QueryPornCondition)that);
    return false;
  }

  public boolean equals(QueryPornCondition that) {
    if (that == null)
      return false;

    boolean this_present_is_gbk = true && this.isSetIs_gbk();
    boolean that_present_is_gbk = true && that.isSetIs_gbk();
    if (this_present_is_gbk || that_present_is_gbk) {
      if (!(this_present_is_gbk && that_present_is_gbk))
        return false;
      if (this.is_gbk != that.is_gbk)
        return false;
    }

    boolean this_present_use_porn_words = true && this.isSetUse_porn_words();
    boolean that_present_use_porn_words = true && that.isSetUse_porn_words();
    if (this_present_use_porn_words || that_present_use_porn_words) {
      if (!(this_present_use_porn_words && that_present_use_porn_words))
        return false;
      if (this.use_porn_words != that.use_porn_words)
        return false;
    }

    boolean this_present_remove_letter = true && this.isSetRemove_letter();
    boolean that_present_remove_letter = true && that.isSetRemove_letter();
    if (this_present_remove_letter || that_present_remove_letter) {
      if (!(this_present_remove_letter && that_present_remove_letter))
        return false;
      if (this.remove_letter != that.remove_letter)
        return false;
    }

    boolean this_present_use_general_porn_word = true && this.isSetUse_general_porn_word();
    boolean that_present_use_general_porn_word = true && that.isSetUse_general_porn_word();
    if (this_present_use_general_porn_word || that_present_use_general_porn_word) {
      if (!(this_present_use_general_porn_word && that_present_use_general_porn_word))
        return false;
      if (this.use_general_porn_word != that.use_general_porn_word)
        return false;
    }

    boolean this_present_use_strict_porn_word = true && this.isSetUse_strict_porn_word();
    boolean that_present_use_strict_porn_word = true && that.isSetUse_strict_porn_word();
    if (this_present_use_strict_porn_word || that_present_use_strict_porn_word) {
      if (!(this_present_use_strict_porn_word && that_present_use_strict_porn_word))
        return false;
      if (this.use_strict_porn_word != that.use_strict_porn_word)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(QueryPornCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIs_gbk()).compareTo(other.isSetIs_gbk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_gbk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_gbk, other.is_gbk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_porn_words()).compareTo(other.isSetUse_porn_words());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_porn_words()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_porn_words, other.use_porn_words);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemove_letter()).compareTo(other.isSetRemove_letter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemove_letter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remove_letter, other.remove_letter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_general_porn_word()).compareTo(other.isSetUse_general_porn_word());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_general_porn_word()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_general_porn_word, other.use_general_porn_word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUse_strict_porn_word()).compareTo(other.isSetUse_strict_porn_word());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_strict_porn_word()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_strict_porn_word, other.use_strict_porn_word);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryPornCondition(");
    boolean first = true;

    if (isSetIs_gbk()) {
      sb.append("is_gbk:");
      sb.append(this.is_gbk);
      first = false;
    }
    if (isSetUse_porn_words()) {
      if (!first) sb.append(", ");
      sb.append("use_porn_words:");
      sb.append(this.use_porn_words);
      first = false;
    }
    if (isSetRemove_letter()) {
      if (!first) sb.append(", ");
      sb.append("remove_letter:");
      sb.append(this.remove_letter);
      first = false;
    }
    if (isSetUse_general_porn_word()) {
      if (!first) sb.append(", ");
      sb.append("use_general_porn_word:");
      sb.append(this.use_general_porn_word);
      first = false;
    }
    if (isSetUse_strict_porn_word()) {
      if (!first) sb.append(", ");
      sb.append("use_strict_porn_word:");
      sb.append(this.use_strict_porn_word);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryPornConditionStandardSchemeFactory implements SchemeFactory {
    public QueryPornConditionStandardScheme getScheme() {
      return new QueryPornConditionStandardScheme();
    }
  }

  private static class QueryPornConditionStandardScheme extends StandardScheme<QueryPornCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryPornCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_GBK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_gbk = iprot.readBool();
              struct.setIs_gbkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USE_PORN_WORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_porn_words = iprot.readBool();
              struct.setUse_porn_wordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOVE_LETTER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.remove_letter = iprot.readBool();
              struct.setRemove_letterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USE_GENERAL_PORN_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_general_porn_word = iprot.readBool();
              struct.setUse_general_porn_wordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USE_STRICT_PORN_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_strict_porn_word = iprot.readBool();
              struct.setUse_strict_porn_wordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryPornCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIs_gbk()) {
        oprot.writeFieldBegin(IS_GBK_FIELD_DESC);
        oprot.writeBool(struct.is_gbk);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_porn_words()) {
        oprot.writeFieldBegin(USE_PORN_WORDS_FIELD_DESC);
        oprot.writeBool(struct.use_porn_words);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRemove_letter()) {
        oprot.writeFieldBegin(REMOVE_LETTER_FIELD_DESC);
        oprot.writeBool(struct.remove_letter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_general_porn_word()) {
        oprot.writeFieldBegin(USE_GENERAL_PORN_WORD_FIELD_DESC);
        oprot.writeBool(struct.use_general_porn_word);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_strict_porn_word()) {
        oprot.writeFieldBegin(USE_STRICT_PORN_WORD_FIELD_DESC);
        oprot.writeBool(struct.use_strict_porn_word);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryPornConditionTupleSchemeFactory implements SchemeFactory {
    public QueryPornConditionTupleScheme getScheme() {
      return new QueryPornConditionTupleScheme();
    }
  }

  private static class QueryPornConditionTupleScheme extends TupleScheme<QueryPornCondition> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryPornCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIs_gbk()) {
        optionals.set(0);
      }
      if (struct.isSetUse_porn_words()) {
        optionals.set(1);
      }
      if (struct.isSetRemove_letter()) {
        optionals.set(2);
      }
      if (struct.isSetUse_general_porn_word()) {
        optionals.set(3);
      }
      if (struct.isSetUse_strict_porn_word()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIs_gbk()) {
        oprot.writeBool(struct.is_gbk);
      }
      if (struct.isSetUse_porn_words()) {
        oprot.writeBool(struct.use_porn_words);
      }
      if (struct.isSetRemove_letter()) {
        oprot.writeBool(struct.remove_letter);
      }
      if (struct.isSetUse_general_porn_word()) {
        oprot.writeBool(struct.use_general_porn_word);
      }
      if (struct.isSetUse_strict_porn_word()) {
        oprot.writeBool(struct.use_strict_porn_word);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryPornCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.is_gbk = iprot.readBool();
        struct.setIs_gbkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.use_porn_words = iprot.readBool();
        struct.setUse_porn_wordsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remove_letter = iprot.readBool();
        struct.setRemove_letterIsSet(true);
      }
      if (incoming.get(3)) {
        struct.use_general_porn_word = iprot.readBool();
        struct.setUse_general_porn_wordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.use_strict_porn_word = iprot.readBool();
        struct.setUse_strict_porn_wordIsSet(true);
      }
    }
  }

}

