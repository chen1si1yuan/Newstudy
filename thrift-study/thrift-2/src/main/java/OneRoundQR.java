/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class OneRoundQR implements org.apache.thrift.TBase<OneRoundQR, OneRoundQR._Fields>, java.io.Serializable, Cloneable, Comparable<OneRoundQR> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OneRoundQR");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("query_basic_seg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("query_phrase_seg", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REPLY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_basic_seg", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPLY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_phrase_seg", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OneRoundQRStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OneRoundQRTupleSchemeFactory());
  }

  public String query; // optional
  public String reply; // optional
  public String query_basic_seg; // optional
  public String query_phrase_seg; // optional
  public String reply_basic_seg; // optional
  public String reply_phrase_seg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    REPLY((short)2, "reply"),
    QUERY_BASIC_SEG((short)3, "query_basic_seg"),
    QUERY_PHRASE_SEG((short)4, "query_phrase_seg"),
    REPLY_BASIC_SEG((short)5, "reply_basic_seg"),
    REPLY_PHRASE_SEG((short)6, "reply_phrase_seg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // REPLY
          return REPLY;
        case 3: // QUERY_BASIC_SEG
          return QUERY_BASIC_SEG;
        case 4: // QUERY_PHRASE_SEG
          return QUERY_PHRASE_SEG;
        case 5: // REPLY_BASIC_SEG
          return REPLY_BASIC_SEG;
        case 6: // REPLY_PHRASE_SEG
          return REPLY_PHRASE_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QUERY,_Fields.REPLY,_Fields.QUERY_BASIC_SEG,_Fields.QUERY_PHRASE_SEG,_Fields.REPLY_BASIC_SEG,_Fields.REPLY_PHRASE_SEG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("query_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("query_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("reply_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("reply_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OneRoundQR.class, metaDataMap);
  }

  public OneRoundQR() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneRoundQR(OneRoundQR other) {
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
    if (other.isSetQuery_basic_seg()) {
      this.query_basic_seg = other.query_basic_seg;
    }
    if (other.isSetQuery_phrase_seg()) {
      this.query_phrase_seg = other.query_phrase_seg;
    }
    if (other.isSetReply_basic_seg()) {
      this.reply_basic_seg = other.reply_basic_seg;
    }
    if (other.isSetReply_phrase_seg()) {
      this.reply_phrase_seg = other.reply_phrase_seg;
    }
  }

  public OneRoundQR deepCopy() {
    return new OneRoundQR(this);
  }

  
  public void clear() {
    this.query = null;
    this.reply = null;
    this.query_basic_seg = null;
    this.query_phrase_seg = null;
    this.reply_basic_seg = null;
    this.reply_phrase_seg = null;
  }

  public String getQuery() {
    return this.query;
  }

  public OneRoundQR setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public String getReply() {
    return this.reply;
  }

  public OneRoundQR setReply(String reply) {
    this.reply = reply;
    return this;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public String getQuery_basic_seg() {
    return this.query_basic_seg;
  }

  public OneRoundQR setQuery_basic_seg(String query_basic_seg) {
    this.query_basic_seg = query_basic_seg;
    return this;
  }

  public void unsetQuery_basic_seg() {
    this.query_basic_seg = null;
  }

  /** Returns true if field query_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_basic_seg() {
    return this.query_basic_seg != null;
  }

  public void setQuery_basic_segIsSet(boolean value) {
    if (!value) {
      this.query_basic_seg = null;
    }
  }

  public String getQuery_phrase_seg() {
    return this.query_phrase_seg;
  }

  public OneRoundQR setQuery_phrase_seg(String query_phrase_seg) {
    this.query_phrase_seg = query_phrase_seg;
    return this;
  }

  public void unsetQuery_phrase_seg() {
    this.query_phrase_seg = null;
  }

  /** Returns true if field query_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_phrase_seg() {
    return this.query_phrase_seg != null;
  }

  public void setQuery_phrase_segIsSet(boolean value) {
    if (!value) {
      this.query_phrase_seg = null;
    }
  }

  public String getReply_basic_seg() {
    return this.reply_basic_seg;
  }

  public OneRoundQR setReply_basic_seg(String reply_basic_seg) {
    this.reply_basic_seg = reply_basic_seg;
    return this;
  }

  public void unsetReply_basic_seg() {
    this.reply_basic_seg = null;
  }

  /** Returns true if field reply_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_basic_seg() {
    return this.reply_basic_seg != null;
  }

  public void setReply_basic_segIsSet(boolean value) {
    if (!value) {
      this.reply_basic_seg = null;
    }
  }

  public String getReply_phrase_seg() {
    return this.reply_phrase_seg;
  }

  public OneRoundQR setReply_phrase_seg(String reply_phrase_seg) {
    this.reply_phrase_seg = reply_phrase_seg;
    return this;
  }

  public void unsetReply_phrase_seg() {
    this.reply_phrase_seg = null;
  }

  /** Returns true if field reply_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_phrase_seg() {
    return this.reply_phrase_seg != null;
  }

  public void setReply_phrase_segIsSet(boolean value) {
    if (!value) {
      this.reply_phrase_seg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((String)value);
      }
      break;

    case QUERY_BASIC_SEG:
      if (value == null) {
        unsetQuery_basic_seg();
      } else {
        setQuery_basic_seg((String)value);
      }
      break;

    case QUERY_PHRASE_SEG:
      if (value == null) {
        unsetQuery_phrase_seg();
      } else {
        setQuery_phrase_seg((String)value);
      }
      break;

    case REPLY_BASIC_SEG:
      if (value == null) {
        unsetReply_basic_seg();
      } else {
        setReply_basic_seg((String)value);
      }
      break;

    case REPLY_PHRASE_SEG:
      if (value == null) {
        unsetReply_phrase_seg();
      } else {
        setReply_phrase_seg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case REPLY:
      return getReply();

    case QUERY_BASIC_SEG:
      return getQuery_basic_seg();

    case QUERY_PHRASE_SEG:
      return getQuery_phrase_seg();

    case REPLY_BASIC_SEG:
      return getReply_basic_seg();

    case REPLY_PHRASE_SEG:
      return getReply_phrase_seg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case REPLY:
      return isSetReply();
    case QUERY_BASIC_SEG:
      return isSetQuery_basic_seg();
    case QUERY_PHRASE_SEG:
      return isSetQuery_phrase_seg();
    case REPLY_BASIC_SEG:
      return isSetReply_basic_seg();
    case REPLY_PHRASE_SEG:
      return isSetReply_phrase_seg();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneRoundQR)
      return this.equals((OneRoundQR)that);
    return false;
  }

  public boolean equals(OneRoundQR that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_query_basic_seg = true && this.isSetQuery_basic_seg();
    boolean that_present_query_basic_seg = true && that.isSetQuery_basic_seg();
    if (this_present_query_basic_seg || that_present_query_basic_seg) {
      if (!(this_present_query_basic_seg && that_present_query_basic_seg))
        return false;
      if (!this.query_basic_seg.equals(that.query_basic_seg))
        return false;
    }

    boolean this_present_query_phrase_seg = true && this.isSetQuery_phrase_seg();
    boolean that_present_query_phrase_seg = true && that.isSetQuery_phrase_seg();
    if (this_present_query_phrase_seg || that_present_query_phrase_seg) {
      if (!(this_present_query_phrase_seg && that_present_query_phrase_seg))
        return false;
      if (!this.query_phrase_seg.equals(that.query_phrase_seg))
        return false;
    }

    boolean this_present_reply_basic_seg = true && this.isSetReply_basic_seg();
    boolean that_present_reply_basic_seg = true && that.isSetReply_basic_seg();
    if (this_present_reply_basic_seg || that_present_reply_basic_seg) {
      if (!(this_present_reply_basic_seg && that_present_reply_basic_seg))
        return false;
      if (!this.reply_basic_seg.equals(that.reply_basic_seg))
        return false;
    }

    boolean this_present_reply_phrase_seg = true && this.isSetReply_phrase_seg();
    boolean that_present_reply_phrase_seg = true && that.isSetReply_phrase_seg();
    if (this_present_reply_phrase_seg || that_present_reply_phrase_seg) {
      if (!(this_present_reply_phrase_seg && that_present_reply_phrase_seg))
        return false;
      if (!this.reply_phrase_seg.equals(that.reply_phrase_seg))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(OneRoundQR other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_basic_seg()).compareTo(other.isSetQuery_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_basic_seg, other.query_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_phrase_seg()).compareTo(other.isSetQuery_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_phrase_seg, other.query_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_basic_seg()).compareTo(other.isSetReply_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_basic_seg, other.reply_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_phrase_seg()).compareTo(other.isSetReply_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_phrase_seg, other.reply_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("OneRoundQR(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetReply()) {
      if (!first) sb.append(", ");
      sb.append("reply:");
      if (this.reply == null) {
        sb.append("null");
      } else {
        sb.append(this.reply);
      }
      first = false;
    }
    if (isSetQuery_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("query_basic_seg:");
      if (this.query_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.query_basic_seg);
      }
      first = false;
    }
    if (isSetQuery_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("query_phrase_seg:");
      if (this.query_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.query_phrase_seg);
      }
      first = false;
    }
    if (isSetReply_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("reply_basic_seg:");
      if (this.reply_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_basic_seg);
      }
      first = false;
    }
    if (isSetReply_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("reply_phrase_seg:");
      if (this.reply_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_phrase_seg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OneRoundQRStandardSchemeFactory implements SchemeFactory {
    public OneRoundQRStandardScheme getScheme() {
      return new OneRoundQRStandardScheme();
    }
  }

  private static class OneRoundQRStandardScheme extends StandardScheme<OneRoundQR> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OneRoundQR struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply = iprot.readString();
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_basic_seg = iprot.readString();
              struct.setQuery_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_phrase_seg = iprot.readString();
              struct.setQuery_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply_basic_seg = iprot.readString();
              struct.setReply_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply_phrase_seg = iprot.readString();
              struct.setReply_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OneRoundQR struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply != null) {
        if (struct.isSetReply()) {
          oprot.writeFieldBegin(REPLY_FIELD_DESC);
          oprot.writeString(struct.reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_basic_seg != null) {
        if (struct.isSetQuery_basic_seg()) {
          oprot.writeFieldBegin(QUERY_BASIC_SEG_FIELD_DESC);
          oprot.writeString(struct.query_basic_seg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_phrase_seg != null) {
        if (struct.isSetQuery_phrase_seg()) {
          oprot.writeFieldBegin(QUERY_PHRASE_SEG_FIELD_DESC);
          oprot.writeString(struct.query_phrase_seg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_basic_seg != null) {
        if (struct.isSetReply_basic_seg()) {
          oprot.writeFieldBegin(REPLY_BASIC_SEG_FIELD_DESC);
          oprot.writeString(struct.reply_basic_seg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_phrase_seg != null) {
        if (struct.isSetReply_phrase_seg()) {
          oprot.writeFieldBegin(REPLY_PHRASE_SEG_FIELD_DESC);
          oprot.writeString(struct.reply_phrase_seg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OneRoundQRTupleSchemeFactory implements SchemeFactory {
    public OneRoundQRTupleScheme getScheme() {
      return new OneRoundQRTupleScheme();
    }
  }

  private static class OneRoundQRTupleScheme extends TupleScheme<OneRoundQR> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, OneRoundQR struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetReply()) {
        optionals.set(1);
      }
      if (struct.isSetQuery_basic_seg()) {
        optionals.set(2);
      }
      if (struct.isSetQuery_phrase_seg()) {
        optionals.set(3);
      }
      if (struct.isSetReply_basic_seg()) {
        optionals.set(4);
      }
      if (struct.isSetReply_phrase_seg()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetReply()) {
        oprot.writeString(struct.reply);
      }
      if (struct.isSetQuery_basic_seg()) {
        oprot.writeString(struct.query_basic_seg);
      }
      if (struct.isSetQuery_phrase_seg()) {
        oprot.writeString(struct.query_phrase_seg);
      }
      if (struct.isSetReply_basic_seg()) {
        oprot.writeString(struct.reply_basic_seg);
      }
      if (struct.isSetReply_phrase_seg()) {
        oprot.writeString(struct.reply_phrase_seg);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, OneRoundQR struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reply = iprot.readString();
        struct.setReplyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.query_basic_seg = iprot.readString();
        struct.setQuery_basic_segIsSet(true);
      }
      if (incoming.get(3)) {
        struct.query_phrase_seg = iprot.readString();
        struct.setQuery_phrase_segIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reply_basic_seg = iprot.readString();
        struct.setReply_basic_segIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reply_phrase_seg = iprot.readString();
        struct.setReply_phrase_segIsSet(true);
      }
    }
  }

}

