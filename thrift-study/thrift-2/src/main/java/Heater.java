/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2017-10-14")
public class Heater implements org.apache.thrift.TBase<Heater, Heater._Fields>, java.io.Serializable, Cloneable, Comparable<Heater> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Heater");

  private static final org.apache.thrift.protocol.TField HEATER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("heater_status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeaterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeaterTupleSchemeFactory());
  }

  /**
   * 
   * @see HeaterStatus
   */
  public HeaterStatus heater_status; // optional
  public double temperature; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HeaterStatus
     */
    HEATER_STATUS((short)1, "heater_status"),
    TEMPERATURE((short)2, "temperature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEATER_STATUS
          return HEATER_STATUS;
        case 2: // TEMPERATURE
          return TEMPERATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPERATURE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HEATER_STATUS,_Fields.TEMPERATURE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEATER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("heater_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HeaterStatus.class)));
    tmpMap.put(_Fields.TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("temperature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Heater.class, metaDataMap);
  }

  public Heater() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Heater(Heater other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHeater_status()) {
      this.heater_status = other.heater_status;
    }
    this.temperature = other.temperature;
  }

  public Heater deepCopy() {
    return new Heater(this);
  }

  
  public void clear() {
    this.heater_status = null;
    setTemperatureIsSet(false);
    this.temperature = 0.0;
  }

  /**
   * 
   * @see HeaterStatus
   */
  public HeaterStatus getHeater_status() {
    return this.heater_status;
  }

  /**
   * 
   * @see HeaterStatus
   */
  public Heater setHeater_status(HeaterStatus heater_status) {
    this.heater_status = heater_status;
    return this;
  }

  public void unsetHeater_status() {
    this.heater_status = null;
  }

  /** Returns true if field heater_status is set (has been assigned a value) and false otherwise */
  public boolean isSetHeater_status() {
    return this.heater_status != null;
  }

  public void setHeater_statusIsSet(boolean value) {
    if (!value) {
      this.heater_status = null;
    }
  }

  public double getTemperature() {
    return this.temperature;
  }

  public Heater setTemperature(double temperature) {
    this.temperature = temperature;
    setTemperatureIsSet(true);
    return this;
  }

  public void unsetTemperature() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  /** Returns true if field temperature is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATURE_ISSET_ID);
  }

  public void setTemperatureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATURE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEATER_STATUS:
      if (value == null) {
        unsetHeater_status();
      } else {
        setHeater_status((HeaterStatus)value);
      }
      break;

    case TEMPERATURE:
      if (value == null) {
        unsetTemperature();
      } else {
        setTemperature((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEATER_STATUS:
      return getHeater_status();

    case TEMPERATURE:
      return Double.valueOf(getTemperature());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEATER_STATUS:
      return isSetHeater_status();
    case TEMPERATURE:
      return isSetTemperature();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Heater)
      return this.equals((Heater)that);
    return false;
  }

  public boolean equals(Heater that) {
    if (that == null)
      return false;

    boolean this_present_heater_status = true && this.isSetHeater_status();
    boolean that_present_heater_status = true && that.isSetHeater_status();
    if (this_present_heater_status || that_present_heater_status) {
      if (!(this_present_heater_status && that_present_heater_status))
        return false;
      if (!this.heater_status.equals(that.heater_status))
        return false;
    }

    boolean this_present_temperature = true && this.isSetTemperature();
    boolean that_present_temperature = true && that.isSetTemperature();
    if (this_present_temperature || that_present_temperature) {
      if (!(this_present_temperature && that_present_temperature))
        return false;
      if (this.temperature != that.temperature)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(Heater other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeater_status()).compareTo(other.isSetHeater_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeater_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heater_status, other.heater_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperature()).compareTo(other.isSetTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature, other.temperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("Heater(");
    boolean first = true;

    if (isSetHeater_status()) {
      sb.append("heater_status:");
      if (this.heater_status == null) {
        sb.append("null");
      } else {
        sb.append(this.heater_status);
      }
      first = false;
    }
    if (isSetTemperature()) {
      if (!first) sb.append(", ");
      sb.append("temperature:");
      sb.append(this.temperature);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeaterStandardSchemeFactory implements SchemeFactory {
    public HeaterStandardScheme getScheme() {
      return new HeaterStandardScheme();
    }
  }

  private static class HeaterStandardScheme extends StandardScheme<Heater> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Heater struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEATER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.heater_status = HeaterStatus.findByValue(iprot.readI32());
              struct.setHeater_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperature = iprot.readDouble();
              struct.setTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Heater struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.heater_status != null) {
        if (struct.isSetHeater_status()) {
          oprot.writeFieldBegin(HEATER_STATUS_FIELD_DESC);
          oprot.writeI32(struct.heater_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTemperature()) {
        oprot.writeFieldBegin(TEMPERATURE_FIELD_DESC);
        oprot.writeDouble(struct.temperature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeaterTupleSchemeFactory implements SchemeFactory {
    public HeaterTupleScheme getScheme() {
      return new HeaterTupleScheme();
    }
  }

  private static class HeaterTupleScheme extends TupleScheme<Heater> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, Heater struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHeater_status()) {
        optionals.set(0);
      }
      if (struct.isSetTemperature()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHeater_status()) {
        oprot.writeI32(struct.heater_status.getValue());
      }
      if (struct.isSetTemperature()) {
        oprot.writeDouble(struct.temperature);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, Heater struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.heater_status = HeaterStatus.findByValue(iprot.readI32());
        struct.setHeater_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.temperature = iprot.readDouble();
        struct.setTemperatureIsSet(true);
      }
    }
  }

}

