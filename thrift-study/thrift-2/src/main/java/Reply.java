/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class Reply implements org.apache.thrift.TBase<Reply, Reply._Fields>, java.io.Serializable, Cloneable, Comparable<Reply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Reply");

  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emotion_id", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField REPLY_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_tags", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REPLY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField REPLY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField EMOJI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emoji_id", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField EMOJI_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("emoji_num", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField UI_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("ui_reply", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField FEATURE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_score", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField FEAT_CONTEXT_SCORES_FIELD_DESC = new org.apache.thrift.protocol.TField("feat_context_scores", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField IS_PORN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_porn", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField PORN_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("porn_score", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReplyTupleSchemeFactory());
  }

  public String reply; // optional
  public short emotion_id; // optional
  public List<String> reply_tags; // optional
  public List<String> reply_basic_seg; // optional
  public List<String> reply_phrase_seg; // optional
  public short emoji_id; // optional
  public short emoji_num; // optional
  public String ui_reply; // optional
  public double score; // optional
  public Map<String,Double> feature_score; // optional
  public Map<String,Map<String,Double>> feat_context_scores; // optional
  public boolean is_porn; // optional
  public List<String> porn_score; // optional
  public String url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLY((short)1, "reply"),
    EMOTION_ID((short)2, "emotion_id"),
    REPLY_TAGS((short)3, "reply_tags"),
    REPLY_BASIC_SEG((short)4, "reply_basic_seg"),
    REPLY_PHRASE_SEG((short)5, "reply_phrase_seg"),
    EMOJI_ID((short)6, "emoji_id"),
    EMOJI_NUM((short)7, "emoji_num"),
    UI_REPLY((short)8, "ui_reply"),
    SCORE((short)10, "score"),
    FEATURE_SCORE((short)11, "feature_score"),
    FEAT_CONTEXT_SCORES((short)12, "feat_context_scores"),
    IS_PORN((short)20, "is_porn"),
    PORN_SCORE((short)21, "porn_score"),
    URL((short)22, "url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLY
          return REPLY;
        case 2: // EMOTION_ID
          return EMOTION_ID;
        case 3: // REPLY_TAGS
          return REPLY_TAGS;
        case 4: // REPLY_BASIC_SEG
          return REPLY_BASIC_SEG;
        case 5: // REPLY_PHRASE_SEG
          return REPLY_PHRASE_SEG;
        case 6: // EMOJI_ID
          return EMOJI_ID;
        case 7: // EMOJI_NUM
          return EMOJI_NUM;
        case 8: // UI_REPLY
          return UI_REPLY;
        case 10: // SCORE
          return SCORE;
        case 11: // FEATURE_SCORE
          return FEATURE_SCORE;
        case 12: // FEAT_CONTEXT_SCORES
          return FEAT_CONTEXT_SCORES;
        case 20: // IS_PORN
          return IS_PORN;
        case 21: // PORN_SCORE
          return PORN_SCORE;
        case 22: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMOTION_ID_ISSET_ID = 0;
  private static final int __EMOJI_ID_ISSET_ID = 1;
  private static final int __EMOJI_NUM_ISSET_ID = 2;
  private static final int __SCORE_ISSET_ID = 3;
  private static final int __IS_PORN_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLY,_Fields.EMOTION_ID,_Fields.REPLY_TAGS,_Fields.REPLY_BASIC_SEG,_Fields.REPLY_PHRASE_SEG,_Fields.EMOJI_ID,_Fields.EMOJI_NUM,_Fields.UI_REPLY,_Fields.SCORE,_Fields.FEATURE_SCORE,_Fields.FEAT_CONTEXT_SCORES,_Fields.IS_PORN,_Fields.PORN_SCORE,_Fields.URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("emotion_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.REPLY_TAGS, new org.apache.thrift.meta_data.FieldMetaData("reply_tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REPLY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("reply_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REPLY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("reply_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EMOJI_ID, new org.apache.thrift.meta_data.FieldMetaData("emoji_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EMOJI_NUM, new org.apache.thrift.meta_data.FieldMetaData("emoji_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.UI_REPLY, new org.apache.thrift.meta_data.FieldMetaData("ui_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEATURE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("feature_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.FEAT_CONTEXT_SCORES, new org.apache.thrift.meta_data.FieldMetaData("feat_context_scores", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.IS_PORN, new org.apache.thrift.meta_data.FieldMetaData("is_porn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PORN_SCORE, new org.apache.thrift.meta_data.FieldMetaData("porn_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Reply.class, metaDataMap);
  }

  public Reply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Reply(Reply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
    this.emotion_id = other.emotion_id;
    if (other.isSetReply_tags()) {
      List<String> __this__reply_tags = new ArrayList<String>(other.reply_tags);
      this.reply_tags = __this__reply_tags;
    }
    if (other.isSetReply_basic_seg()) {
      List<String> __this__reply_basic_seg = new ArrayList<String>(other.reply_basic_seg);
      this.reply_basic_seg = __this__reply_basic_seg;
    }
    if (other.isSetReply_phrase_seg()) {
      List<String> __this__reply_phrase_seg = new ArrayList<String>(other.reply_phrase_seg);
      this.reply_phrase_seg = __this__reply_phrase_seg;
    }
    this.emoji_id = other.emoji_id;
    this.emoji_num = other.emoji_num;
    if (other.isSetUi_reply()) {
      this.ui_reply = other.ui_reply;
    }
    this.score = other.score;
    if (other.isSetFeature_score()) {
      Map<String,Double> __this__feature_score = new HashMap<String,Double>(other.feature_score);
      this.feature_score = __this__feature_score;
    }
    if (other.isSetFeat_context_scores()) {
      Map<String,Map<String,Double>> __this__feat_context_scores = new HashMap<String,Map<String,Double>>(other.feat_context_scores.size());
      for (Map.Entry<String, Map<String,Double>> other_element : other.feat_context_scores.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Double> other_element_value = other_element.getValue();

        String __this__feat_context_scores_copy_key = other_element_key;

        Map<String,Double> __this__feat_context_scores_copy_value = new HashMap<String,Double>(other_element_value);

        __this__feat_context_scores.put(__this__feat_context_scores_copy_key, __this__feat_context_scores_copy_value);
      }
      this.feat_context_scores = __this__feat_context_scores;
    }
    this.is_porn = other.is_porn;
    if (other.isSetPorn_score()) {
      List<String> __this__porn_score = new ArrayList<String>(other.porn_score);
      this.porn_score = __this__porn_score;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public Reply deepCopy() {
    return new Reply(this);
  }

  
  public void clear() {
    this.reply = null;
    setEmotion_idIsSet(false);
    this.emotion_id = 0;
    this.reply_tags = null;
    this.reply_basic_seg = null;
    this.reply_phrase_seg = null;
    setEmoji_idIsSet(false);
    this.emoji_id = 0;
    setEmoji_numIsSet(false);
    this.emoji_num = 0;
    this.ui_reply = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.feature_score = null;
    this.feat_context_scores = null;
    setIs_pornIsSet(false);
    this.is_porn = false;
    this.porn_score = null;
    this.url = null;
  }

  public String getReply() {
    return this.reply;
  }

  public Reply setReply(String reply) {
    this.reply = reply;
    return this;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public short getEmotion_id() {
    return this.emotion_id;
  }

  public Reply setEmotion_id(short emotion_id) {
    this.emotion_id = emotion_id;
    setEmotion_idIsSet(true);
    return this;
  }

  public void unsetEmotion_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMOTION_ID_ISSET_ID);
  }

  /** Returns true if field emotion_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotion_id() {
    return EncodingUtils.testBit(__isset_bitfield, __EMOTION_ID_ISSET_ID);
  }

  public void setEmotion_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMOTION_ID_ISSET_ID, value);
  }

  public int getReply_tagsSize() {
    return (this.reply_tags == null) ? 0 : this.reply_tags.size();
  }

  public java.util.Iterator<String> getReply_tagsIterator() {
    return (this.reply_tags == null) ? null : this.reply_tags.iterator();
  }

  public void addToReply_tags(String elem) {
    if (this.reply_tags == null) {
      this.reply_tags = new ArrayList<String>();
    }
    this.reply_tags.add(elem);
  }

  public List<String> getReply_tags() {
    return this.reply_tags;
  }

  public Reply setReply_tags(List<String> reply_tags) {
    this.reply_tags = reply_tags;
    return this;
  }

  public void unsetReply_tags() {
    this.reply_tags = null;
  }

  /** Returns true if field reply_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_tags() {
    return this.reply_tags != null;
  }

  public void setReply_tagsIsSet(boolean value) {
    if (!value) {
      this.reply_tags = null;
    }
  }

  public int getReply_basic_segSize() {
    return (this.reply_basic_seg == null) ? 0 : this.reply_basic_seg.size();
  }

  public java.util.Iterator<String> getReply_basic_segIterator() {
    return (this.reply_basic_seg == null) ? null : this.reply_basic_seg.iterator();
  }

  public void addToReply_basic_seg(String elem) {
    if (this.reply_basic_seg == null) {
      this.reply_basic_seg = new ArrayList<String>();
    }
    this.reply_basic_seg.add(elem);
  }

  public List<String> getReply_basic_seg() {
    return this.reply_basic_seg;
  }

  public Reply setReply_basic_seg(List<String> reply_basic_seg) {
    this.reply_basic_seg = reply_basic_seg;
    return this;
  }

  public void unsetReply_basic_seg() {
    this.reply_basic_seg = null;
  }

  /** Returns true if field reply_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_basic_seg() {
    return this.reply_basic_seg != null;
  }

  public void setReply_basic_segIsSet(boolean value) {
    if (!value) {
      this.reply_basic_seg = null;
    }
  }

  public int getReply_phrase_segSize() {
    return (this.reply_phrase_seg == null) ? 0 : this.reply_phrase_seg.size();
  }

  public java.util.Iterator<String> getReply_phrase_segIterator() {
    return (this.reply_phrase_seg == null) ? null : this.reply_phrase_seg.iterator();
  }

  public void addToReply_phrase_seg(String elem) {
    if (this.reply_phrase_seg == null) {
      this.reply_phrase_seg = new ArrayList<String>();
    }
    this.reply_phrase_seg.add(elem);
  }

  public List<String> getReply_phrase_seg() {
    return this.reply_phrase_seg;
  }

  public Reply setReply_phrase_seg(List<String> reply_phrase_seg) {
    this.reply_phrase_seg = reply_phrase_seg;
    return this;
  }

  public void unsetReply_phrase_seg() {
    this.reply_phrase_seg = null;
  }

  /** Returns true if field reply_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_phrase_seg() {
    return this.reply_phrase_seg != null;
  }

  public void setReply_phrase_segIsSet(boolean value) {
    if (!value) {
      this.reply_phrase_seg = null;
    }
  }

  public short getEmoji_id() {
    return this.emoji_id;
  }

  public Reply setEmoji_id(short emoji_id) {
    this.emoji_id = emoji_id;
    setEmoji_idIsSet(true);
    return this;
  }

  public void unsetEmoji_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMOJI_ID_ISSET_ID);
  }

  /** Returns true if field emoji_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEmoji_id() {
    return EncodingUtils.testBit(__isset_bitfield, __EMOJI_ID_ISSET_ID);
  }

  public void setEmoji_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMOJI_ID_ISSET_ID, value);
  }

  public short getEmoji_num() {
    return this.emoji_num;
  }

  public Reply setEmoji_num(short emoji_num) {
    this.emoji_num = emoji_num;
    setEmoji_numIsSet(true);
    return this;
  }

  public void unsetEmoji_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMOJI_NUM_ISSET_ID);
  }

  /** Returns true if field emoji_num is set (has been assigned a value) and false otherwise */
  public boolean isSetEmoji_num() {
    return EncodingUtils.testBit(__isset_bitfield, __EMOJI_NUM_ISSET_ID);
  }

  public void setEmoji_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMOJI_NUM_ISSET_ID, value);
  }

  public String getUi_reply() {
    return this.ui_reply;
  }

  public Reply setUi_reply(String ui_reply) {
    this.ui_reply = ui_reply;
    return this;
  }

  public void unsetUi_reply() {
    this.ui_reply = null;
  }

  /** Returns true if field ui_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetUi_reply() {
    return this.ui_reply != null;
  }

  public void setUi_replyIsSet(boolean value) {
    if (!value) {
      this.ui_reply = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public Reply setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public int getFeature_scoreSize() {
    return (this.feature_score == null) ? 0 : this.feature_score.size();
  }

  public void putToFeature_score(String key, double val) {
    if (this.feature_score == null) {
      this.feature_score = new HashMap<String,Double>();
    }
    this.feature_score.put(key, val);
  }

  public Map<String,Double> getFeature_score() {
    return this.feature_score;
  }

  public Reply setFeature_score(Map<String,Double> feature_score) {
    this.feature_score = feature_score;
    return this;
  }

  public void unsetFeature_score() {
    this.feature_score = null;
  }

  /** Returns true if field feature_score is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_score() {
    return this.feature_score != null;
  }

  public void setFeature_scoreIsSet(boolean value) {
    if (!value) {
      this.feature_score = null;
    }
  }

  public int getFeat_context_scoresSize() {
    return (this.feat_context_scores == null) ? 0 : this.feat_context_scores.size();
  }

  public void putToFeat_context_scores(String key, Map<String,Double> val) {
    if (this.feat_context_scores == null) {
      this.feat_context_scores = new HashMap<String,Map<String,Double>>();
    }
    this.feat_context_scores.put(key, val);
  }

  public Map<String,Map<String,Double>> getFeat_context_scores() {
    return this.feat_context_scores;
  }

  public Reply setFeat_context_scores(Map<String,Map<String,Double>> feat_context_scores) {
    this.feat_context_scores = feat_context_scores;
    return this;
  }

  public void unsetFeat_context_scores() {
    this.feat_context_scores = null;
  }

  /** Returns true if field feat_context_scores is set (has been assigned a value) and false otherwise */
  public boolean isSetFeat_context_scores() {
    return this.feat_context_scores != null;
  }

  public void setFeat_context_scoresIsSet(boolean value) {
    if (!value) {
      this.feat_context_scores = null;
    }
  }

  public boolean isIs_porn() {
    return this.is_porn;
  }

  public Reply setIs_porn(boolean is_porn) {
    this.is_porn = is_porn;
    setIs_pornIsSet(true);
    return this;
  }

  public void unsetIs_porn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_PORN_ISSET_ID);
  }

  /** Returns true if field is_porn is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_porn() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_PORN_ISSET_ID);
  }

  public void setIs_pornIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_PORN_ISSET_ID, value);
  }

  public int getPorn_scoreSize() {
    return (this.porn_score == null) ? 0 : this.porn_score.size();
  }

  public java.util.Iterator<String> getPorn_scoreIterator() {
    return (this.porn_score == null) ? null : this.porn_score.iterator();
  }

  public void addToPorn_score(String elem) {
    if (this.porn_score == null) {
      this.porn_score = new ArrayList<String>();
    }
    this.porn_score.add(elem);
  }

  public List<String> getPorn_score() {
    return this.porn_score;
  }

  public Reply setPorn_score(List<String> porn_score) {
    this.porn_score = porn_score;
    return this;
  }

  public void unsetPorn_score() {
    this.porn_score = null;
  }

  /** Returns true if field porn_score is set (has been assigned a value) and false otherwise */
  public boolean isSetPorn_score() {
    return this.porn_score != null;
  }

  public void setPorn_scoreIsSet(boolean value) {
    if (!value) {
      this.porn_score = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Reply setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((String)value);
      }
      break;

    case EMOTION_ID:
      if (value == null) {
        unsetEmotion_id();
      } else {
        setEmotion_id((Short)value);
      }
      break;

    case REPLY_TAGS:
      if (value == null) {
        unsetReply_tags();
      } else {
        setReply_tags((List<String>)value);
      }
      break;

    case REPLY_BASIC_SEG:
      if (value == null) {
        unsetReply_basic_seg();
      } else {
        setReply_basic_seg((List<String>)value);
      }
      break;

    case REPLY_PHRASE_SEG:
      if (value == null) {
        unsetReply_phrase_seg();
      } else {
        setReply_phrase_seg((List<String>)value);
      }
      break;

    case EMOJI_ID:
      if (value == null) {
        unsetEmoji_id();
      } else {
        setEmoji_id((Short)value);
      }
      break;

    case EMOJI_NUM:
      if (value == null) {
        unsetEmoji_num();
      } else {
        setEmoji_num((Short)value);
      }
      break;

    case UI_REPLY:
      if (value == null) {
        unsetUi_reply();
      } else {
        setUi_reply((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case FEATURE_SCORE:
      if (value == null) {
        unsetFeature_score();
      } else {
        setFeature_score((Map<String,Double>)value);
      }
      break;

    case FEAT_CONTEXT_SCORES:
      if (value == null) {
        unsetFeat_context_scores();
      } else {
        setFeat_context_scores((Map<String,Map<String,Double>>)value);
      }
      break;

    case IS_PORN:
      if (value == null) {
        unsetIs_porn();
      } else {
        setIs_porn((Boolean)value);
      }
      break;

    case PORN_SCORE:
      if (value == null) {
        unsetPorn_score();
      } else {
        setPorn_score((List<String>)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLY:
      return getReply();

    case EMOTION_ID:
      return Short.valueOf(getEmotion_id());

    case REPLY_TAGS:
      return getReply_tags();

    case REPLY_BASIC_SEG:
      return getReply_basic_seg();

    case REPLY_PHRASE_SEG:
      return getReply_phrase_seg();

    case EMOJI_ID:
      return Short.valueOf(getEmoji_id());

    case EMOJI_NUM:
      return Short.valueOf(getEmoji_num());

    case UI_REPLY:
      return getUi_reply();

    case SCORE:
      return Double.valueOf(getScore());

    case FEATURE_SCORE:
      return getFeature_score();

    case FEAT_CONTEXT_SCORES:
      return getFeat_context_scores();

    case IS_PORN:
      return Boolean.valueOf(isIs_porn());

    case PORN_SCORE:
      return getPorn_score();

    case URL:
      return getUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLY:
      return isSetReply();
    case EMOTION_ID:
      return isSetEmotion_id();
    case REPLY_TAGS:
      return isSetReply_tags();
    case REPLY_BASIC_SEG:
      return isSetReply_basic_seg();
    case REPLY_PHRASE_SEG:
      return isSetReply_phrase_seg();
    case EMOJI_ID:
      return isSetEmoji_id();
    case EMOJI_NUM:
      return isSetEmoji_num();
    case UI_REPLY:
      return isSetUi_reply();
    case SCORE:
      return isSetScore();
    case FEATURE_SCORE:
      return isSetFeature_score();
    case FEAT_CONTEXT_SCORES:
      return isSetFeat_context_scores();
    case IS_PORN:
      return isSetIs_porn();
    case PORN_SCORE:
      return isSetPorn_score();
    case URL:
      return isSetUrl();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Reply)
      return this.equals((Reply)that);
    return false;
  }

  public boolean equals(Reply that) {
    if (that == null)
      return false;

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_emotion_id = true && this.isSetEmotion_id();
    boolean that_present_emotion_id = true && that.isSetEmotion_id();
    if (this_present_emotion_id || that_present_emotion_id) {
      if (!(this_present_emotion_id && that_present_emotion_id))
        return false;
      if (this.emotion_id != that.emotion_id)
        return false;
    }

    boolean this_present_reply_tags = true && this.isSetReply_tags();
    boolean that_present_reply_tags = true && that.isSetReply_tags();
    if (this_present_reply_tags || that_present_reply_tags) {
      if (!(this_present_reply_tags && that_present_reply_tags))
        return false;
      if (!this.reply_tags.equals(that.reply_tags))
        return false;
    }

    boolean this_present_reply_basic_seg = true && this.isSetReply_basic_seg();
    boolean that_present_reply_basic_seg = true && that.isSetReply_basic_seg();
    if (this_present_reply_basic_seg || that_present_reply_basic_seg) {
      if (!(this_present_reply_basic_seg && that_present_reply_basic_seg))
        return false;
      if (!this.reply_basic_seg.equals(that.reply_basic_seg))
        return false;
    }

    boolean this_present_reply_phrase_seg = true && this.isSetReply_phrase_seg();
    boolean that_present_reply_phrase_seg = true && that.isSetReply_phrase_seg();
    if (this_present_reply_phrase_seg || that_present_reply_phrase_seg) {
      if (!(this_present_reply_phrase_seg && that_present_reply_phrase_seg))
        return false;
      if (!this.reply_phrase_seg.equals(that.reply_phrase_seg))
        return false;
    }

    boolean this_present_emoji_id = true && this.isSetEmoji_id();
    boolean that_present_emoji_id = true && that.isSetEmoji_id();
    if (this_present_emoji_id || that_present_emoji_id) {
      if (!(this_present_emoji_id && that_present_emoji_id))
        return false;
      if (this.emoji_id != that.emoji_id)
        return false;
    }

    boolean this_present_emoji_num = true && this.isSetEmoji_num();
    boolean that_present_emoji_num = true && that.isSetEmoji_num();
    if (this_present_emoji_num || that_present_emoji_num) {
      if (!(this_present_emoji_num && that_present_emoji_num))
        return false;
      if (this.emoji_num != that.emoji_num)
        return false;
    }

    boolean this_present_ui_reply = true && this.isSetUi_reply();
    boolean that_present_ui_reply = true && that.isSetUi_reply();
    if (this_present_ui_reply || that_present_ui_reply) {
      if (!(this_present_ui_reply && that_present_ui_reply))
        return false;
      if (!this.ui_reply.equals(that.ui_reply))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_feature_score = true && this.isSetFeature_score();
    boolean that_present_feature_score = true && that.isSetFeature_score();
    if (this_present_feature_score || that_present_feature_score) {
      if (!(this_present_feature_score && that_present_feature_score))
        return false;
      if (!this.feature_score.equals(that.feature_score))
        return false;
    }

    boolean this_present_feat_context_scores = true && this.isSetFeat_context_scores();
    boolean that_present_feat_context_scores = true && that.isSetFeat_context_scores();
    if (this_present_feat_context_scores || that_present_feat_context_scores) {
      if (!(this_present_feat_context_scores && that_present_feat_context_scores))
        return false;
      if (!this.feat_context_scores.equals(that.feat_context_scores))
        return false;
    }

    boolean this_present_is_porn = true && this.isSetIs_porn();
    boolean that_present_is_porn = true && that.isSetIs_porn();
    if (this_present_is_porn || that_present_is_porn) {
      if (!(this_present_is_porn && that_present_is_porn))
        return false;
      if (this.is_porn != that.is_porn)
        return false;
    }

    boolean this_present_porn_score = true && this.isSetPorn_score();
    boolean that_present_porn_score = true && that.isSetPorn_score();
    if (this_present_porn_score || that_present_porn_score) {
      if (!(this_present_porn_score && that_present_porn_score))
        return false;
      if (!this.porn_score.equals(that.porn_score))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(Reply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmotion_id()).compareTo(other.isSetEmotion_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotion_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotion_id, other.emotion_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_tags()).compareTo(other.isSetReply_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_tags, other.reply_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_basic_seg()).compareTo(other.isSetReply_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_basic_seg, other.reply_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_phrase_seg()).compareTo(other.isSetReply_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_phrase_seg, other.reply_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmoji_id()).compareTo(other.isSetEmoji_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmoji_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emoji_id, other.emoji_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmoji_num()).compareTo(other.isSetEmoji_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmoji_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emoji_num, other.emoji_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUi_reply()).compareTo(other.isSetUi_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUi_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ui_reply, other.ui_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_score()).compareTo(other.isSetFeature_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_score, other.feature_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeat_context_scores()).compareTo(other.isSetFeat_context_scores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeat_context_scores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feat_context_scores, other.feat_context_scores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_porn()).compareTo(other.isSetIs_porn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_porn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_porn, other.is_porn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorn_score()).compareTo(other.isSetPorn_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorn_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.porn_score, other.porn_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("Reply(");
    boolean first = true;

    if (isSetReply()) {
      sb.append("reply:");
      if (this.reply == null) {
        sb.append("null");
      } else {
        sb.append(this.reply);
      }
      first = false;
    }
    if (isSetEmotion_id()) {
      if (!first) sb.append(", ");
      sb.append("emotion_id:");
      sb.append(this.emotion_id);
      first = false;
    }
    if (isSetReply_tags()) {
      if (!first) sb.append(", ");
      sb.append("reply_tags:");
      if (this.reply_tags == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_tags);
      }
      first = false;
    }
    if (isSetReply_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("reply_basic_seg:");
      if (this.reply_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_basic_seg);
      }
      first = false;
    }
    if (isSetReply_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("reply_phrase_seg:");
      if (this.reply_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_phrase_seg);
      }
      first = false;
    }
    if (isSetEmoji_id()) {
      if (!first) sb.append(", ");
      sb.append("emoji_id:");
      sb.append(this.emoji_id);
      first = false;
    }
    if (isSetEmoji_num()) {
      if (!first) sb.append(", ");
      sb.append("emoji_num:");
      sb.append(this.emoji_num);
      first = false;
    }
    if (isSetUi_reply()) {
      if (!first) sb.append(", ");
      sb.append("ui_reply:");
      if (this.ui_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.ui_reply);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetFeature_score()) {
      if (!first) sb.append(", ");
      sb.append("feature_score:");
      if (this.feature_score == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_score);
      }
      first = false;
    }
    if (isSetFeat_context_scores()) {
      if (!first) sb.append(", ");
      sb.append("feat_context_scores:");
      if (this.feat_context_scores == null) {
        sb.append("null");
      } else {
        sb.append(this.feat_context_scores);
      }
      first = false;
    }
    if (isSetIs_porn()) {
      if (!first) sb.append(", ");
      sb.append("is_porn:");
      sb.append(this.is_porn);
      first = false;
    }
    if (isSetPorn_score()) {
      if (!first) sb.append(", ");
      sb.append("porn_score:");
      if (this.porn_score == null) {
        sb.append("null");
      } else {
        sb.append(this.porn_score);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplyStandardSchemeFactory implements SchemeFactory {
    public ReplyStandardScheme getScheme() {
      return new ReplyStandardScheme();
    }
  }

  private static class ReplyStandardScheme extends StandardScheme<Reply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Reply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply = iprot.readString();
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMOTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.emotion_id = iprot.readI16();
              struct.setEmotion_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLY_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.reply_tags = new ArrayList<String>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  String _elem20;
                  _elem20 = iprot.readString();
                  struct.reply_tags.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setReply_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.reply_basic_seg = new ArrayList<String>(_list21.size);
                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
                {
                  String _elem23;
                  _elem23 = iprot.readString();
                  struct.reply_basic_seg.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setReply_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.reply_phrase_seg = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.reply_phrase_seg.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setReply_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EMOJI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.emoji_id = iprot.readI16();
              struct.setEmoji_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMOJI_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.emoji_num = iprot.readI16();
              struct.setEmoji_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UI_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ui_reply = iprot.readString();
              struct.setUi_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FEATURE_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.feature_score = new HashMap<String,Double>(2*_map27.size);
                for (int _i28 = 0; _i28 < _map27.size; ++_i28)
                {
                  String _key29;
                  double _val30;
                  _key29 = iprot.readString();
                  _val30 = iprot.readDouble();
                  struct.feature_score.put(_key29, _val30);
                }
                iprot.readMapEnd();
              }
              struct.setFeature_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FEAT_CONTEXT_SCORES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                struct.feat_context_scores = new HashMap<String,Map<String,Double>>(2*_map31.size);
                for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                {
                  String _key33;
                  Map<String,Double> _val34;
                  _key33 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                    _val34 = new HashMap<String,Double>(2*_map35.size);
                    for (int _i36 = 0; _i36 < _map35.size; ++_i36)
                    {
                      String _key37;
                      double _val38;
                      _key37 = iprot.readString();
                      _val38 = iprot.readDouble();
                      _val34.put(_key37, _val38);
                    }
                    iprot.readMapEnd();
                  }
                  struct.feat_context_scores.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setFeat_context_scoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_PORN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_porn = iprot.readBool();
              struct.setIs_pornIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PORN_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.porn_score = new ArrayList<String>(_list39.size);
                for (int _i40 = 0; _i40 < _list39.size; ++_i40)
                {
                  String _elem41;
                  _elem41 = iprot.readString();
                  struct.porn_score.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setPorn_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Reply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reply != null) {
        if (struct.isSetReply()) {
          oprot.writeFieldBegin(REPLY_FIELD_DESC);
          oprot.writeString(struct.reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmotion_id()) {
        oprot.writeFieldBegin(EMOTION_ID_FIELD_DESC);
        oprot.writeI16(struct.emotion_id);
        oprot.writeFieldEnd();
      }
      if (struct.reply_tags != null) {
        if (struct.isSetReply_tags()) {
          oprot.writeFieldBegin(REPLY_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reply_tags.size()));
            for (String _iter42 : struct.reply_tags)
            {
              oprot.writeString(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_basic_seg != null) {
        if (struct.isSetReply_basic_seg()) {
          oprot.writeFieldBegin(REPLY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reply_basic_seg.size()));
            for (String _iter43 : struct.reply_basic_seg)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_phrase_seg != null) {
        if (struct.isSetReply_phrase_seg()) {
          oprot.writeFieldBegin(REPLY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.reply_phrase_seg.size()));
            for (String _iter44 : struct.reply_phrase_seg)
            {
              oprot.writeString(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEmoji_id()) {
        oprot.writeFieldBegin(EMOJI_ID_FIELD_DESC);
        oprot.writeI16(struct.emoji_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEmoji_num()) {
        oprot.writeFieldBegin(EMOJI_NUM_FIELD_DESC);
        oprot.writeI16(struct.emoji_num);
        oprot.writeFieldEnd();
      }
      if (struct.ui_reply != null) {
        if (struct.isSetUi_reply()) {
          oprot.writeFieldBegin(UI_REPLY_FIELD_DESC);
          oprot.writeString(struct.ui_reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.feature_score != null) {
        if (struct.isSetFeature_score()) {
          oprot.writeFieldBegin(FEATURE_SCORE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.feature_score.size()));
            for (Map.Entry<String, Double> _iter45 : struct.feature_score.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeDouble(_iter45.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.feat_context_scores != null) {
        if (struct.isSetFeat_context_scores()) {
          oprot.writeFieldBegin(FEAT_CONTEXT_SCORES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.feat_context_scores.size()));
            for (Map.Entry<String, Map<String,Double>> _iter46 : struct.feat_context_scores.entrySet())
            {
              oprot.writeString(_iter46.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter46.getValue().size()));
                for (Map.Entry<String, Double> _iter47 : _iter46.getValue().entrySet())
                {
                  oprot.writeString(_iter47.getKey());
                  oprot.writeDouble(_iter47.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_porn()) {
        oprot.writeFieldBegin(IS_PORN_FIELD_DESC);
        oprot.writeBool(struct.is_porn);
        oprot.writeFieldEnd();
      }
      if (struct.porn_score != null) {
        if (struct.isSetPorn_score()) {
          oprot.writeFieldBegin(PORN_SCORE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.porn_score.size()));
            for (String _iter48 : struct.porn_score)
            {
              oprot.writeString(_iter48);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplyTupleSchemeFactory implements SchemeFactory {
    public ReplyTupleScheme getScheme() {
      return new ReplyTupleScheme();
    }
  }

  private static class ReplyTupleScheme extends TupleScheme<Reply> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, Reply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReply()) {
        optionals.set(0);
      }
      if (struct.isSetEmotion_id()) {
        optionals.set(1);
      }
      if (struct.isSetReply_tags()) {
        optionals.set(2);
      }
      if (struct.isSetReply_basic_seg()) {
        optionals.set(3);
      }
      if (struct.isSetReply_phrase_seg()) {
        optionals.set(4);
      }
      if (struct.isSetEmoji_id()) {
        optionals.set(5);
      }
      if (struct.isSetEmoji_num()) {
        optionals.set(6);
      }
      if (struct.isSetUi_reply()) {
        optionals.set(7);
      }
      if (struct.isSetScore()) {
        optionals.set(8);
      }
      if (struct.isSetFeature_score()) {
        optionals.set(9);
      }
      if (struct.isSetFeat_context_scores()) {
        optionals.set(10);
      }
      if (struct.isSetIs_porn()) {
        optionals.set(11);
      }
      if (struct.isSetPorn_score()) {
        optionals.set(12);
      }
      if (struct.isSetUrl()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetReply()) {
        oprot.writeString(struct.reply);
      }
      if (struct.isSetEmotion_id()) {
        oprot.writeI16(struct.emotion_id);
      }
      if (struct.isSetReply_tags()) {
        {
          oprot.writeI32(struct.reply_tags.size());
          for (String _iter49 : struct.reply_tags)
          {
            oprot.writeString(_iter49);
          }
        }
      }
      if (struct.isSetReply_basic_seg()) {
        {
          oprot.writeI32(struct.reply_basic_seg.size());
          for (String _iter50 : struct.reply_basic_seg)
          {
            oprot.writeString(_iter50);
          }
        }
      }
      if (struct.isSetReply_phrase_seg()) {
        {
          oprot.writeI32(struct.reply_phrase_seg.size());
          for (String _iter51 : struct.reply_phrase_seg)
          {
            oprot.writeString(_iter51);
          }
        }
      }
      if (struct.isSetEmoji_id()) {
        oprot.writeI16(struct.emoji_id);
      }
      if (struct.isSetEmoji_num()) {
        oprot.writeI16(struct.emoji_num);
      }
      if (struct.isSetUi_reply()) {
        oprot.writeString(struct.ui_reply);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetFeature_score()) {
        {
          oprot.writeI32(struct.feature_score.size());
          for (Map.Entry<String, Double> _iter52 : struct.feature_score.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeDouble(_iter52.getValue());
          }
        }
      }
      if (struct.isSetFeat_context_scores()) {
        {
          oprot.writeI32(struct.feat_context_scores.size());
          for (Map.Entry<String, Map<String,Double>> _iter53 : struct.feat_context_scores.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            {
              oprot.writeI32(_iter53.getValue().size());
              for (Map.Entry<String, Double> _iter54 : _iter53.getValue().entrySet())
              {
                oprot.writeString(_iter54.getKey());
                oprot.writeDouble(_iter54.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetIs_porn()) {
        oprot.writeBool(struct.is_porn);
      }
      if (struct.isSetPorn_score()) {
        {
          oprot.writeI32(struct.porn_score.size());
          for (String _iter55 : struct.porn_score)
          {
            oprot.writeString(_iter55);
          }
        }
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, Reply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.reply = iprot.readString();
        struct.setReplyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.emotion_id = iprot.readI16();
        struct.setEmotion_idIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list56 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.reply_tags = new ArrayList<String>(_list56.size);
          for (int _i57 = 0; _i57 < _list56.size; ++_i57)
          {
            String _elem58;
            _elem58 = iprot.readString();
            struct.reply_tags.add(_elem58);
          }
        }
        struct.setReply_tagsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.reply_basic_seg = new ArrayList<String>(_list59.size);
          for (int _i60 = 0; _i60 < _list59.size; ++_i60)
          {
            String _elem61;
            _elem61 = iprot.readString();
            struct.reply_basic_seg.add(_elem61);
          }
        }
        struct.setReply_basic_segIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.reply_phrase_seg = new ArrayList<String>(_list62.size);
          for (int _i63 = 0; _i63 < _list62.size; ++_i63)
          {
            String _elem64;
            _elem64 = iprot.readString();
            struct.reply_phrase_seg.add(_elem64);
          }
        }
        struct.setReply_phrase_segIsSet(true);
      }
      if (incoming.get(5)) {
        struct.emoji_id = iprot.readI16();
        struct.setEmoji_idIsSet(true);
      }
      if (incoming.get(6)) {
        struct.emoji_num = iprot.readI16();
        struct.setEmoji_numIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ui_reply = iprot.readString();
        struct.setUi_replyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map65 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.feature_score = new HashMap<String,Double>(2*_map65.size);
          for (int _i66 = 0; _i66 < _map65.size; ++_i66)
          {
            String _key67;
            double _val68;
            _key67 = iprot.readString();
            _val68 = iprot.readDouble();
            struct.feature_score.put(_key67, _val68);
          }
        }
        struct.setFeature_scoreIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map69 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.feat_context_scores = new HashMap<String,Map<String,Double>>(2*_map69.size);
          for (int _i70 = 0; _i70 < _map69.size; ++_i70)
          {
            String _key71;
            Map<String,Double> _val72;
            _key71 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map73 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val72 = new HashMap<String,Double>(2*_map73.size);
              for (int _i74 = 0; _i74 < _map73.size; ++_i74)
              {
                String _key75;
                double _val76;
                _key75 = iprot.readString();
                _val76 = iprot.readDouble();
                _val72.put(_key75, _val76);
              }
            }
            struct.feat_context_scores.put(_key71, _val72);
          }
        }
        struct.setFeat_context_scoresIsSet(true);
      }
      if (incoming.get(11)) {
        struct.is_porn = iprot.readBool();
        struct.setIs_pornIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.porn_score = new ArrayList<String>(_list77.size);
          for (int _i78 = 0; _i78 < _list77.size; ++_i78)
          {
            String _elem79;
            _elem79 = iprot.readString();
            struct.porn_score.add(_elem79);
          }
        }
        struct.setPorn_scoreIsSet(true);
      }
      if (incoming.get(13)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
    }
  }

}

