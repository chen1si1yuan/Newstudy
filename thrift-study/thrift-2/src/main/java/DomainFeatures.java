/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class DomainFeatures implements org.apache.thrift.TBase<DomainFeatures, DomainFeatures._Fields>, java.io.Serializable, Cloneable, Comparable<DomainFeatures> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DomainFeatures");

  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField HIT_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hit_slots", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField HIT_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("hit_score", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField HIT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("hit_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField HIT_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("hit_pattern", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField REPLY_WITH_RSRC_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_with_rsrc", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField EXACT_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("exact_match", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField FUZZY_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("fuzzy_match", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField FUZZY_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("fuzzy_score", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField REC_MATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("rec_match", org.apache.thrift.protocol.TType.BOOL, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DomainFeaturesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DomainFeaturesTupleSchemeFactory());
  }

  public List<String> keywords; // optional
  public short hit_slots; // optional
  public double hit_score; // optional
  public double hit_ratio; // optional
  public boolean hit_pattern; // optional
  public boolean reply_with_rsrc; // optional
  public boolean exact_match; // optional
  public boolean fuzzy_match; // optional
  public double fuzzy_score; // optional
  public boolean rec_match; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEYWORDS((short)1, "keywords"),
    HIT_SLOTS((short)2, "hit_slots"),
    HIT_SCORE((short)3, "hit_score"),
    HIT_RATIO((short)4, "hit_ratio"),
    HIT_PATTERN((short)5, "hit_pattern"),
    REPLY_WITH_RSRC((short)10, "reply_with_rsrc"),
    EXACT_MATCH((short)11, "exact_match"),
    FUZZY_MATCH((short)12, "fuzzy_match"),
    FUZZY_SCORE((short)13, "fuzzy_score"),
    REC_MATCH((short)14, "rec_match");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEYWORDS
          return KEYWORDS;
        case 2: // HIT_SLOTS
          return HIT_SLOTS;
        case 3: // HIT_SCORE
          return HIT_SCORE;
        case 4: // HIT_RATIO
          return HIT_RATIO;
        case 5: // HIT_PATTERN
          return HIT_PATTERN;
        case 10: // REPLY_WITH_RSRC
          return REPLY_WITH_RSRC;
        case 11: // EXACT_MATCH
          return EXACT_MATCH;
        case 12: // FUZZY_MATCH
          return FUZZY_MATCH;
        case 13: // FUZZY_SCORE
          return FUZZY_SCORE;
        case 14: // REC_MATCH
          return REC_MATCH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HIT_SLOTS_ISSET_ID = 0;
  private static final int __HIT_SCORE_ISSET_ID = 1;
  private static final int __HIT_RATIO_ISSET_ID = 2;
  private static final int __HIT_PATTERN_ISSET_ID = 3;
  private static final int __REPLY_WITH_RSRC_ISSET_ID = 4;
  private static final int __EXACT_MATCH_ISSET_ID = 5;
  private static final int __FUZZY_MATCH_ISSET_ID = 6;
  private static final int __FUZZY_SCORE_ISSET_ID = 7;
  private static final int __REC_MATCH_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.KEYWORDS,_Fields.HIT_SLOTS,_Fields.HIT_SCORE,_Fields.HIT_RATIO,_Fields.HIT_PATTERN,_Fields.REPLY_WITH_RSRC,_Fields.EXACT_MATCH,_Fields.FUZZY_MATCH,_Fields.FUZZY_SCORE,_Fields.REC_MATCH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HIT_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("hit_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.HIT_SCORE, new org.apache.thrift.meta_data.FieldMetaData("hit_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("hit_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIT_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("hit_pattern", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLY_WITH_RSRC, new org.apache.thrift.meta_data.FieldMetaData("reply_with_rsrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXACT_MATCH, new org.apache.thrift.meta_data.FieldMetaData("exact_match", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUZZY_MATCH, new org.apache.thrift.meta_data.FieldMetaData("fuzzy_match", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUZZY_SCORE, new org.apache.thrift.meta_data.FieldMetaData("fuzzy_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_MATCH, new org.apache.thrift.meta_data.FieldMetaData("rec_match", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DomainFeatures.class, metaDataMap);
  }

  public DomainFeatures() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DomainFeatures(DomainFeatures other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKeywords()) {
      List<String> __this__keywords = new ArrayList<String>(other.keywords);
      this.keywords = __this__keywords;
    }
    this.hit_slots = other.hit_slots;
    this.hit_score = other.hit_score;
    this.hit_ratio = other.hit_ratio;
    this.hit_pattern = other.hit_pattern;
    this.reply_with_rsrc = other.reply_with_rsrc;
    this.exact_match = other.exact_match;
    this.fuzzy_match = other.fuzzy_match;
    this.fuzzy_score = other.fuzzy_score;
    this.rec_match = other.rec_match;
  }

  public DomainFeatures deepCopy() {
    return new DomainFeatures(this);
  }

  
  public void clear() {
    this.keywords = null;
    setHit_slotsIsSet(false);
    this.hit_slots = 0;
    setHit_scoreIsSet(false);
    this.hit_score = 0.0;
    setHit_ratioIsSet(false);
    this.hit_ratio = 0.0;
    setHit_patternIsSet(false);
    this.hit_pattern = false;
    setReply_with_rsrcIsSet(false);
    this.reply_with_rsrc = false;
    setExact_matchIsSet(false);
    this.exact_match = false;
    setFuzzy_matchIsSet(false);
    this.fuzzy_match = false;
    setFuzzy_scoreIsSet(false);
    this.fuzzy_score = 0.0;
    setRec_matchIsSet(false);
    this.rec_match = false;
  }

  public int getKeywordsSize() {
    return (this.keywords == null) ? 0 : this.keywords.size();
  }

  public java.util.Iterator<String> getKeywordsIterator() {
    return (this.keywords == null) ? null : this.keywords.iterator();
  }

  public void addToKeywords(String elem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(elem);
  }

  public List<String> getKeywords() {
    return this.keywords;
  }

  public DomainFeatures setKeywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public short getHit_slots() {
    return this.hit_slots;
  }

  public DomainFeatures setHit_slots(short hit_slots) {
    this.hit_slots = hit_slots;
    setHit_slotsIsSet(true);
    return this;
  }

  public void unsetHit_slots() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIT_SLOTS_ISSET_ID);
  }

  /** Returns true if field hit_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetHit_slots() {
    return EncodingUtils.testBit(__isset_bitfield, __HIT_SLOTS_ISSET_ID);
  }

  public void setHit_slotsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIT_SLOTS_ISSET_ID, value);
  }

  public double getHit_score() {
    return this.hit_score;
  }

  public DomainFeatures setHit_score(double hit_score) {
    this.hit_score = hit_score;
    setHit_scoreIsSet(true);
    return this;
  }

  public void unsetHit_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIT_SCORE_ISSET_ID);
  }

  /** Returns true if field hit_score is set (has been assigned a value) and false otherwise */
  public boolean isSetHit_score() {
    return EncodingUtils.testBit(__isset_bitfield, __HIT_SCORE_ISSET_ID);
  }

  public void setHit_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIT_SCORE_ISSET_ID, value);
  }

  public double getHit_ratio() {
    return this.hit_ratio;
  }

  public DomainFeatures setHit_ratio(double hit_ratio) {
    this.hit_ratio = hit_ratio;
    setHit_ratioIsSet(true);
    return this;
  }

  public void unsetHit_ratio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIT_RATIO_ISSET_ID);
  }

  /** Returns true if field hit_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetHit_ratio() {
    return EncodingUtils.testBit(__isset_bitfield, __HIT_RATIO_ISSET_ID);
  }

  public void setHit_ratioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIT_RATIO_ISSET_ID, value);
  }

  public boolean isHit_pattern() {
    return this.hit_pattern;
  }

  public DomainFeatures setHit_pattern(boolean hit_pattern) {
    this.hit_pattern = hit_pattern;
    setHit_patternIsSet(true);
    return this;
  }

  public void unsetHit_pattern() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIT_PATTERN_ISSET_ID);
  }

  /** Returns true if field hit_pattern is set (has been assigned a value) and false otherwise */
  public boolean isSetHit_pattern() {
    return EncodingUtils.testBit(__isset_bitfield, __HIT_PATTERN_ISSET_ID);
  }

  public void setHit_patternIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIT_PATTERN_ISSET_ID, value);
  }

  public boolean isReply_with_rsrc() {
    return this.reply_with_rsrc;
  }

  public DomainFeatures setReply_with_rsrc(boolean reply_with_rsrc) {
    this.reply_with_rsrc = reply_with_rsrc;
    setReply_with_rsrcIsSet(true);
    return this;
  }

  public void unsetReply_with_rsrc() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLY_WITH_RSRC_ISSET_ID);
  }

  /** Returns true if field reply_with_rsrc is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_with_rsrc() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLY_WITH_RSRC_ISSET_ID);
  }

  public void setReply_with_rsrcIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLY_WITH_RSRC_ISSET_ID, value);
  }

  public boolean isExact_match() {
    return this.exact_match;
  }

  public DomainFeatures setExact_match(boolean exact_match) {
    this.exact_match = exact_match;
    setExact_matchIsSet(true);
    return this;
  }

  public void unsetExact_match() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXACT_MATCH_ISSET_ID);
  }

  /** Returns true if field exact_match is set (has been assigned a value) and false otherwise */
  public boolean isSetExact_match() {
    return EncodingUtils.testBit(__isset_bitfield, __EXACT_MATCH_ISSET_ID);
  }

  public void setExact_matchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXACT_MATCH_ISSET_ID, value);
  }

  public boolean isFuzzy_match() {
    return this.fuzzy_match;
  }

  public DomainFeatures setFuzzy_match(boolean fuzzy_match) {
    this.fuzzy_match = fuzzy_match;
    setFuzzy_matchIsSet(true);
    return this;
  }

  public void unsetFuzzy_match() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUZZY_MATCH_ISSET_ID);
  }

  /** Returns true if field fuzzy_match is set (has been assigned a value) and false otherwise */
  public boolean isSetFuzzy_match() {
    return EncodingUtils.testBit(__isset_bitfield, __FUZZY_MATCH_ISSET_ID);
  }

  public void setFuzzy_matchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUZZY_MATCH_ISSET_ID, value);
  }

  public double getFuzzy_score() {
    return this.fuzzy_score;
  }

  public DomainFeatures setFuzzy_score(double fuzzy_score) {
    this.fuzzy_score = fuzzy_score;
    setFuzzy_scoreIsSet(true);
    return this;
  }

  public void unsetFuzzy_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUZZY_SCORE_ISSET_ID);
  }

  /** Returns true if field fuzzy_score is set (has been assigned a value) and false otherwise */
  public boolean isSetFuzzy_score() {
    return EncodingUtils.testBit(__isset_bitfield, __FUZZY_SCORE_ISSET_ID);
  }

  public void setFuzzy_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUZZY_SCORE_ISSET_ID, value);
  }

  public boolean isRec_match() {
    return this.rec_match;
  }

  public DomainFeatures setRec_match(boolean rec_match) {
    this.rec_match = rec_match;
    setRec_matchIsSet(true);
    return this;
  }

  public void unsetRec_match() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REC_MATCH_ISSET_ID);
  }

  /** Returns true if field rec_match is set (has been assigned a value) and false otherwise */
  public boolean isSetRec_match() {
    return EncodingUtils.testBit(__isset_bitfield, __REC_MATCH_ISSET_ID);
  }

  public void setRec_matchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REC_MATCH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((List<String>)value);
      }
      break;

    case HIT_SLOTS:
      if (value == null) {
        unsetHit_slots();
      } else {
        setHit_slots((Short)value);
      }
      break;

    case HIT_SCORE:
      if (value == null) {
        unsetHit_score();
      } else {
        setHit_score((Double)value);
      }
      break;

    case HIT_RATIO:
      if (value == null) {
        unsetHit_ratio();
      } else {
        setHit_ratio((Double)value);
      }
      break;

    case HIT_PATTERN:
      if (value == null) {
        unsetHit_pattern();
      } else {
        setHit_pattern((Boolean)value);
      }
      break;

    case REPLY_WITH_RSRC:
      if (value == null) {
        unsetReply_with_rsrc();
      } else {
        setReply_with_rsrc((Boolean)value);
      }
      break;

    case EXACT_MATCH:
      if (value == null) {
        unsetExact_match();
      } else {
        setExact_match((Boolean)value);
      }
      break;

    case FUZZY_MATCH:
      if (value == null) {
        unsetFuzzy_match();
      } else {
        setFuzzy_match((Boolean)value);
      }
      break;

    case FUZZY_SCORE:
      if (value == null) {
        unsetFuzzy_score();
      } else {
        setFuzzy_score((Double)value);
      }
      break;

    case REC_MATCH:
      if (value == null) {
        unsetRec_match();
      } else {
        setRec_match((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEYWORDS:
      return getKeywords();

    case HIT_SLOTS:
      return Short.valueOf(getHit_slots());

    case HIT_SCORE:
      return Double.valueOf(getHit_score());

    case HIT_RATIO:
      return Double.valueOf(getHit_ratio());

    case HIT_PATTERN:
      return Boolean.valueOf(isHit_pattern());

    case REPLY_WITH_RSRC:
      return Boolean.valueOf(isReply_with_rsrc());

    case EXACT_MATCH:
      return Boolean.valueOf(isExact_match());

    case FUZZY_MATCH:
      return Boolean.valueOf(isFuzzy_match());

    case FUZZY_SCORE:
      return Double.valueOf(getFuzzy_score());

    case REC_MATCH:
      return Boolean.valueOf(isRec_match());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEYWORDS:
      return isSetKeywords();
    case HIT_SLOTS:
      return isSetHit_slots();
    case HIT_SCORE:
      return isSetHit_score();
    case HIT_RATIO:
      return isSetHit_ratio();
    case HIT_PATTERN:
      return isSetHit_pattern();
    case REPLY_WITH_RSRC:
      return isSetReply_with_rsrc();
    case EXACT_MATCH:
      return isSetExact_match();
    case FUZZY_MATCH:
      return isSetFuzzy_match();
    case FUZZY_SCORE:
      return isSetFuzzy_score();
    case REC_MATCH:
      return isSetRec_match();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DomainFeatures)
      return this.equals((DomainFeatures)that);
    return false;
  }

  public boolean equals(DomainFeatures that) {
    if (that == null)
      return false;

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_hit_slots = true && this.isSetHit_slots();
    boolean that_present_hit_slots = true && that.isSetHit_slots();
    if (this_present_hit_slots || that_present_hit_slots) {
      if (!(this_present_hit_slots && that_present_hit_slots))
        return false;
      if (this.hit_slots != that.hit_slots)
        return false;
    }

    boolean this_present_hit_score = true && this.isSetHit_score();
    boolean that_present_hit_score = true && that.isSetHit_score();
    if (this_present_hit_score || that_present_hit_score) {
      if (!(this_present_hit_score && that_present_hit_score))
        return false;
      if (this.hit_score != that.hit_score)
        return false;
    }

    boolean this_present_hit_ratio = true && this.isSetHit_ratio();
    boolean that_present_hit_ratio = true && that.isSetHit_ratio();
    if (this_present_hit_ratio || that_present_hit_ratio) {
      if (!(this_present_hit_ratio && that_present_hit_ratio))
        return false;
      if (this.hit_ratio != that.hit_ratio)
        return false;
    }

    boolean this_present_hit_pattern = true && this.isSetHit_pattern();
    boolean that_present_hit_pattern = true && that.isSetHit_pattern();
    if (this_present_hit_pattern || that_present_hit_pattern) {
      if (!(this_present_hit_pattern && that_present_hit_pattern))
        return false;
      if (this.hit_pattern != that.hit_pattern)
        return false;
    }

    boolean this_present_reply_with_rsrc = true && this.isSetReply_with_rsrc();
    boolean that_present_reply_with_rsrc = true && that.isSetReply_with_rsrc();
    if (this_present_reply_with_rsrc || that_present_reply_with_rsrc) {
      if (!(this_present_reply_with_rsrc && that_present_reply_with_rsrc))
        return false;
      if (this.reply_with_rsrc != that.reply_with_rsrc)
        return false;
    }

    boolean this_present_exact_match = true && this.isSetExact_match();
    boolean that_present_exact_match = true && that.isSetExact_match();
    if (this_present_exact_match || that_present_exact_match) {
      if (!(this_present_exact_match && that_present_exact_match))
        return false;
      if (this.exact_match != that.exact_match)
        return false;
    }

    boolean this_present_fuzzy_match = true && this.isSetFuzzy_match();
    boolean that_present_fuzzy_match = true && that.isSetFuzzy_match();
    if (this_present_fuzzy_match || that_present_fuzzy_match) {
      if (!(this_present_fuzzy_match && that_present_fuzzy_match))
        return false;
      if (this.fuzzy_match != that.fuzzy_match)
        return false;
    }

    boolean this_present_fuzzy_score = true && this.isSetFuzzy_score();
    boolean that_present_fuzzy_score = true && that.isSetFuzzy_score();
    if (this_present_fuzzy_score || that_present_fuzzy_score) {
      if (!(this_present_fuzzy_score && that_present_fuzzy_score))
        return false;
      if (this.fuzzy_score != that.fuzzy_score)
        return false;
    }

    boolean this_present_rec_match = true && this.isSetRec_match();
    boolean that_present_rec_match = true && that.isSetRec_match();
    if (this_present_rec_match || that_present_rec_match) {
      if (!(this_present_rec_match && that_present_rec_match))
        return false;
      if (this.rec_match != that.rec_match)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(DomainFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHit_slots()).compareTo(other.isSetHit_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHit_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hit_slots, other.hit_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHit_score()).compareTo(other.isSetHit_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHit_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hit_score, other.hit_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHit_ratio()).compareTo(other.isSetHit_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHit_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hit_ratio, other.hit_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHit_pattern()).compareTo(other.isSetHit_pattern());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHit_pattern()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hit_pattern, other.hit_pattern);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_with_rsrc()).compareTo(other.isSetReply_with_rsrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_with_rsrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_with_rsrc, other.reply_with_rsrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExact_match()).compareTo(other.isSetExact_match());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExact_match()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exact_match, other.exact_match);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuzzy_match()).compareTo(other.isSetFuzzy_match());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuzzy_match()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuzzy_match, other.fuzzy_match);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFuzzy_score()).compareTo(other.isSetFuzzy_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuzzy_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuzzy_score, other.fuzzy_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRec_match()).compareTo(other.isSetRec_match());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRec_match()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rec_match, other.rec_match);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DomainFeatures(");
    boolean first = true;

    if (isSetKeywords()) {
      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
    }
    if (isSetHit_slots()) {
      if (!first) sb.append(", ");
      sb.append("hit_slots:");
      sb.append(this.hit_slots);
      first = false;
    }
    if (isSetHit_score()) {
      if (!first) sb.append(", ");
      sb.append("hit_score:");
      sb.append(this.hit_score);
      first = false;
    }
    if (isSetHit_ratio()) {
      if (!first) sb.append(", ");
      sb.append("hit_ratio:");
      sb.append(this.hit_ratio);
      first = false;
    }
    if (isSetHit_pattern()) {
      if (!first) sb.append(", ");
      sb.append("hit_pattern:");
      sb.append(this.hit_pattern);
      first = false;
    }
    if (isSetReply_with_rsrc()) {
      if (!first) sb.append(", ");
      sb.append("reply_with_rsrc:");
      sb.append(this.reply_with_rsrc);
      first = false;
    }
    if (isSetExact_match()) {
      if (!first) sb.append(", ");
      sb.append("exact_match:");
      sb.append(this.exact_match);
      first = false;
    }
    if (isSetFuzzy_match()) {
      if (!first) sb.append(", ");
      sb.append("fuzzy_match:");
      sb.append(this.fuzzy_match);
      first = false;
    }
    if (isSetFuzzy_score()) {
      if (!first) sb.append(", ");
      sb.append("fuzzy_score:");
      sb.append(this.fuzzy_score);
      first = false;
    }
    if (isSetRec_match()) {
      if (!first) sb.append(", ");
      sb.append("rec_match:");
      sb.append(this.rec_match);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DomainFeaturesStandardSchemeFactory implements SchemeFactory {
    public DomainFeaturesStandardScheme getScheme() {
      return new DomainFeaturesStandardScheme();
    }
  }

  private static class DomainFeaturesStandardScheme extends StandardScheme<DomainFeatures> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DomainFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list408 = iprot.readListBegin();
                struct.keywords = new ArrayList<String>(_list408.size);
                for (int _i409 = 0; _i409 < _list408.size; ++_i409)
                {
                  String _elem410;
                  _elem410 = iprot.readString();
                  struct.keywords.add(_elem410);
                }
                iprot.readListEnd();
              }
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIT_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.hit_slots = iprot.readI16();
              struct.setHit_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HIT_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hit_score = iprot.readDouble();
              struct.setHit_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.hit_ratio = iprot.readDouble();
              struct.setHit_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HIT_PATTERN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hit_pattern = iprot.readBool();
              struct.setHit_patternIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPLY_WITH_RSRC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reply_with_rsrc = iprot.readBool();
              struct.setReply_with_rsrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXACT_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.exact_match = iprot.readBool();
              struct.setExact_matchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FUZZY_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fuzzy_match = iprot.readBool();
              struct.setFuzzy_matchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FUZZY_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fuzzy_score = iprot.readDouble();
              struct.setFuzzy_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REC_MATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.rec_match = iprot.readBool();
              struct.setRec_matchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DomainFeatures struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.keywords != null) {
        if (struct.isSetKeywords()) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keywords.size()));
            for (String _iter411 : struct.keywords)
            {
              oprot.writeString(_iter411);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHit_slots()) {
        oprot.writeFieldBegin(HIT_SLOTS_FIELD_DESC);
        oprot.writeI16(struct.hit_slots);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHit_score()) {
        oprot.writeFieldBegin(HIT_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.hit_score);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHit_ratio()) {
        oprot.writeFieldBegin(HIT_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.hit_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHit_pattern()) {
        oprot.writeFieldBegin(HIT_PATTERN_FIELD_DESC);
        oprot.writeBool(struct.hit_pattern);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReply_with_rsrc()) {
        oprot.writeFieldBegin(REPLY_WITH_RSRC_FIELD_DESC);
        oprot.writeBool(struct.reply_with_rsrc);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExact_match()) {
        oprot.writeFieldBegin(EXACT_MATCH_FIELD_DESC);
        oprot.writeBool(struct.exact_match);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFuzzy_match()) {
        oprot.writeFieldBegin(FUZZY_MATCH_FIELD_DESC);
        oprot.writeBool(struct.fuzzy_match);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFuzzy_score()) {
        oprot.writeFieldBegin(FUZZY_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.fuzzy_score);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRec_match()) {
        oprot.writeFieldBegin(REC_MATCH_FIELD_DESC);
        oprot.writeBool(struct.rec_match);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DomainFeaturesTupleSchemeFactory implements SchemeFactory {
    public DomainFeaturesTupleScheme getScheme() {
      return new DomainFeaturesTupleScheme();
    }
  }

  private static class DomainFeaturesTupleScheme extends TupleScheme<DomainFeatures> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DomainFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKeywords()) {
        optionals.set(0);
      }
      if (struct.isSetHit_slots()) {
        optionals.set(1);
      }
      if (struct.isSetHit_score()) {
        optionals.set(2);
      }
      if (struct.isSetHit_ratio()) {
        optionals.set(3);
      }
      if (struct.isSetHit_pattern()) {
        optionals.set(4);
      }
      if (struct.isSetReply_with_rsrc()) {
        optionals.set(5);
      }
      if (struct.isSetExact_match()) {
        optionals.set(6);
      }
      if (struct.isSetFuzzy_match()) {
        optionals.set(7);
      }
      if (struct.isSetFuzzy_score()) {
        optionals.set(8);
      }
      if (struct.isSetRec_match()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetKeywords()) {
        {
          oprot.writeI32(struct.keywords.size());
          for (String _iter412 : struct.keywords)
          {
            oprot.writeString(_iter412);
          }
        }
      }
      if (struct.isSetHit_slots()) {
        oprot.writeI16(struct.hit_slots);
      }
      if (struct.isSetHit_score()) {
        oprot.writeDouble(struct.hit_score);
      }
      if (struct.isSetHit_ratio()) {
        oprot.writeDouble(struct.hit_ratio);
      }
      if (struct.isSetHit_pattern()) {
        oprot.writeBool(struct.hit_pattern);
      }
      if (struct.isSetReply_with_rsrc()) {
        oprot.writeBool(struct.reply_with_rsrc);
      }
      if (struct.isSetExact_match()) {
        oprot.writeBool(struct.exact_match);
      }
      if (struct.isSetFuzzy_match()) {
        oprot.writeBool(struct.fuzzy_match);
      }
      if (struct.isSetFuzzy_score()) {
        oprot.writeDouble(struct.fuzzy_score);
      }
      if (struct.isSetRec_match()) {
        oprot.writeBool(struct.rec_match);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DomainFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list413 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keywords = new ArrayList<String>(_list413.size);
          for (int _i414 = 0; _i414 < _list413.size; ++_i414)
          {
            String _elem415;
            _elem415 = iprot.readString();
            struct.keywords.add(_elem415);
          }
        }
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hit_slots = iprot.readI16();
        struct.setHit_slotsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hit_score = iprot.readDouble();
        struct.setHit_scoreIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hit_ratio = iprot.readDouble();
        struct.setHit_ratioIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hit_pattern = iprot.readBool();
        struct.setHit_patternIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reply_with_rsrc = iprot.readBool();
        struct.setReply_with_rsrcIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exact_match = iprot.readBool();
        struct.setExact_matchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fuzzy_match = iprot.readBool();
        struct.setFuzzy_matchIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fuzzy_score = iprot.readDouble();
        struct.setFuzzy_scoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rec_match = iprot.readBool();
        struct.setRec_matchIsSet(true);
      }
    }
  }

}

