/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class DataBundle implements org.apache.thrift.TBase<DataBundle, DataBundle._Fields>, java.io.Serializable, Cloneable, Comparable<DataBundle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataBundle");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_terminal", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("last_query", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("last_reply", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("query_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField QUERY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("query_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("user_info", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField RETURN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("return_status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField QUERY_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_tags", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField PREPROCESSED_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("preprocessed_query", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PREPROCESSED_QUERY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("preprocessed_query_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField PREPROCESSED_QUERY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("preprocessed_query_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField QUERY_PINYIN_FIELD_DESC = new org.apache.thrift.protocol.TField("query_pinyin", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField POST_REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("post_replys", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField SELECT_POST_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("select_post_size", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SELECT_MAX_REPLY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("select_max_reply_size", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField POST_THRESHOLD_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("post_threshold_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CONTEXT_POST_REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("context_post_replys", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField SELECT_REPLY_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("select_reply_size", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField REPLY_THRESHOLD_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_threshold_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField REPLY_RESORT_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_resort_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField REPLY_FROM_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_from_service", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField INTENTION_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("intention_score", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField ANTI_VULGAR_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("anti_vulgar_reply", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField STRICT_PORN_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_porn_reply", org.apache.thrift.protocol.TType.BOOL, (short)52);
  private static final org.apache.thrift.protocol.TField QUERY_IS_PORN_FIELD_DESC = new org.apache.thrift.protocol.TField("query_is_porn", org.apache.thrift.protocol.TType.BOOL, (short)60);
  private static final org.apache.thrift.protocol.TField PORN_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("porn_score", org.apache.thrift.protocol.TType.LIST, (short)61);
  private static final org.apache.thrift.protocol.TField QUERY_PORN_CON_FIELD_DESC = new org.apache.thrift.protocol.TField("query_porn_con", org.apache.thrift.protocol.TType.STRUCT, (short)62);
  private static final org.apache.thrift.protocol.TField REPLY_PORN_CON_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_porn_con", org.apache.thrift.protocol.TType.STRUCT, (short)63);
  private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_profile", org.apache.thrift.protocol.TType.STRUCT, (short)64);
  private static final org.apache.thrift.protocol.TField QUERY_COMPLETE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("query_complete_type", org.apache.thrift.protocol.TType.I32, (short)65);
  private static final org.apache.thrift.protocol.TField PROACTIVE_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("proactive_reply", org.apache.thrift.protocol.TType.STRUCT, (short)70);
  private static final org.apache.thrift.protocol.TField IS_SAY_HELLO_FIELD_DESC = new org.apache.thrift.protocol.TField("is_say_hello", org.apache.thrift.protocol.TType.BOOL, (short)71);
  private static final org.apache.thrift.protocol.TField SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("session", org.apache.thrift.protocol.TType.STRUCT, (short)80);
  private static final org.apache.thrift.protocol.TField DEBUG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_info", org.apache.thrift.protocol.TType.STRUCT, (short)90);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("workflow_terminal", org.apache.thrift.protocol.TType.BOOL, (short)91);
  private static final org.apache.thrift.protocol.TField PORN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("porn_type", org.apache.thrift.protocol.TType.I32, (short)92);
  private static final org.apache.thrift.protocol.TField GENE_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_reply", org.apache.thrift.protocol.TType.BOOL, (short)93);
  private static final org.apache.thrift.protocol.TField RANDOM_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("random_reply", org.apache.thrift.protocol.TType.BOOL, (short)94);
  private static final org.apache.thrift.protocol.TField LAST_QUERY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_query_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)101);
  private static final org.apache.thrift.protocol.TField LAST_QUERY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_query_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)102);
  private static final org.apache.thrift.protocol.TField LAST_REPLY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_reply_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)103);
  private static final org.apache.thrift.protocol.TField LAST_REPLY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_reply_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)104);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataBundleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataBundleTupleSchemeFactory());
  }

  public String query; // optional
  public Reply reply; // optional
  public boolean is_terminal; // optional
  public String last_query; // optional
  public String last_reply; // optional
  public String user_id; // optional
  public List<String> query_basic_seg; // optional
  public List<String> query_phrase_seg; // optional
  public UserInfo user_info; // optional
  /**
   * 
   * @see ReturnStatus
   */
  public ReturnStatus return_status; // optional
  public Map<Short,Short> query_tags; // optional
  public String preprocessed_query; // optional
  public List<String> preprocessed_query_basic_seg; // optional
  public List<String> preprocessed_query_phrase_seg; // optional
  public String query_pinyin; // optional
  public List<PostReply> post_replys; // optional
  public int select_post_size; // optional
  public int select_max_reply_size; // optional
  public double post_threshold_ratio; // optional
  public List<ContextPostReply> context_post_replys; // optional
  public List<Reply> replys; // optional
  public int select_reply_size; // optional
  public double reply_threshold_ratio; // optional
  public double reply_resort_threshold; // optional
  /**
   * 
   * @see ServiceName
   */
  public ServiceName reply_from_service; // optional
  public double intention_score; // optional
  public boolean anti_vulgar_reply; // optional
  public boolean strict_porn_reply; // optional
  public boolean query_is_porn; // optional
  public List<String> porn_score; // optional
  public QueryPornCondition query_porn_con; // optional
  public ReplyPornCondition reply_porn_con; // optional
  public UserProfile user_profile; // optional
  public int query_complete_type; // optional
  public ProactiveReply proactive_reply; // optional
  public boolean is_say_hello; // optional
  public Session session; // optional
  public DebugInfo debug_info; // optional
  public boolean workflow_terminal; // optional
  /**
   * 
   * @see PornType
   */
  public PornType porn_type; // optional
  public boolean gene_reply; // optional
  public boolean random_reply; // optional
  public List<String> last_query_basic_seg; // optional
  public List<String> last_query_phrase_seg; // optional
  public List<String> last_reply_basic_seg; // optional
  public List<String> last_reply_phrase_seg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    REPLY((short)2, "reply"),
    IS_TERMINAL((short)3, "is_terminal"),
    LAST_QUERY((short)4, "last_query"),
    LAST_REPLY((short)5, "last_reply"),
    USER_ID((short)6, "user_id"),
    QUERY_BASIC_SEG((short)11, "query_basic_seg"),
    QUERY_PHRASE_SEG((short)12, "query_phrase_seg"),
    USER_INFO((short)13, "user_info"),
    /**
     * 
     * @see ReturnStatus
     */
    RETURN_STATUS((short)14, "return_status"),
    QUERY_TAGS((short)15, "query_tags"),
    PREPROCESSED_QUERY((short)16, "preprocessed_query"),
    PREPROCESSED_QUERY_BASIC_SEG((short)17, "preprocessed_query_basic_seg"),
    PREPROCESSED_QUERY_PHRASE_SEG((short)18, "preprocessed_query_phrase_seg"),
    QUERY_PINYIN((short)19, "query_pinyin"),
    POST_REPLYS((short)21, "post_replys"),
    SELECT_POST_SIZE((short)22, "select_post_size"),
    SELECT_MAX_REPLY_SIZE((short)23, "select_max_reply_size"),
    POST_THRESHOLD_RATIO((short)24, "post_threshold_ratio"),
    CONTEXT_POST_REPLYS((short)25, "context_post_replys"),
    REPLYS((short)31, "replys"),
    SELECT_REPLY_SIZE((short)32, "select_reply_size"),
    REPLY_THRESHOLD_RATIO((short)33, "reply_threshold_ratio"),
    REPLY_RESORT_THRESHOLD((short)34, "reply_resort_threshold"),
    /**
     * 
     * @see ServiceName
     */
    REPLY_FROM_SERVICE((short)41, "reply_from_service"),
    INTENTION_SCORE((short)42, "intention_score"),
    ANTI_VULGAR_REPLY((short)51, "anti_vulgar_reply"),
    STRICT_PORN_REPLY((short)52, "strict_porn_reply"),
    QUERY_IS_PORN((short)60, "query_is_porn"),
    PORN_SCORE((short)61, "porn_score"),
    QUERY_PORN_CON((short)62, "query_porn_con"),
    REPLY_PORN_CON((short)63, "reply_porn_con"),
    USER_PROFILE((short)64, "user_profile"),
    QUERY_COMPLETE_TYPE((short)65, "query_complete_type"),
    PROACTIVE_REPLY((short)70, "proactive_reply"),
    IS_SAY_HELLO((short)71, "is_say_hello"),
    SESSION((short)80, "session"),
    DEBUG_INFO((short)90, "debug_info"),
    WORKFLOW_TERMINAL((short)91, "workflow_terminal"),
    /**
     * 
     * @see PornType
     */
    PORN_TYPE((short)92, "porn_type"),
    GENE_REPLY((short)93, "gene_reply"),
    RANDOM_REPLY((short)94, "random_reply"),
    LAST_QUERY_BASIC_SEG((short)101, "last_query_basic_seg"),
    LAST_QUERY_PHRASE_SEG((short)102, "last_query_phrase_seg"),
    LAST_REPLY_BASIC_SEG((short)103, "last_reply_basic_seg"),
    LAST_REPLY_PHRASE_SEG((short)104, "last_reply_phrase_seg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // REPLY
          return REPLY;
        case 3: // IS_TERMINAL
          return IS_TERMINAL;
        case 4: // LAST_QUERY
          return LAST_QUERY;
        case 5: // LAST_REPLY
          return LAST_REPLY;
        case 6: // USER_ID
          return USER_ID;
        case 11: // QUERY_BASIC_SEG
          return QUERY_BASIC_SEG;
        case 12: // QUERY_PHRASE_SEG
          return QUERY_PHRASE_SEG;
        case 13: // USER_INFO
          return USER_INFO;
        case 14: // RETURN_STATUS
          return RETURN_STATUS;
        case 15: // QUERY_TAGS
          return QUERY_TAGS;
        case 16: // PREPROCESSED_QUERY
          return PREPROCESSED_QUERY;
        case 17: // PREPROCESSED_QUERY_BASIC_SEG
          return PREPROCESSED_QUERY_BASIC_SEG;
        case 18: // PREPROCESSED_QUERY_PHRASE_SEG
          return PREPROCESSED_QUERY_PHRASE_SEG;
        case 19: // QUERY_PINYIN
          return QUERY_PINYIN;
        case 21: // POST_REPLYS
          return POST_REPLYS;
        case 22: // SELECT_POST_SIZE
          return SELECT_POST_SIZE;
        case 23: // SELECT_MAX_REPLY_SIZE
          return SELECT_MAX_REPLY_SIZE;
        case 24: // POST_THRESHOLD_RATIO
          return POST_THRESHOLD_RATIO;
        case 25: // CONTEXT_POST_REPLYS
          return CONTEXT_POST_REPLYS;
        case 31: // REPLYS
          return REPLYS;
        case 32: // SELECT_REPLY_SIZE
          return SELECT_REPLY_SIZE;
        case 33: // REPLY_THRESHOLD_RATIO
          return REPLY_THRESHOLD_RATIO;
        case 34: // REPLY_RESORT_THRESHOLD
          return REPLY_RESORT_THRESHOLD;
        case 41: // REPLY_FROM_SERVICE
          return REPLY_FROM_SERVICE;
        case 42: // INTENTION_SCORE
          return INTENTION_SCORE;
        case 51: // ANTI_VULGAR_REPLY
          return ANTI_VULGAR_REPLY;
        case 52: // STRICT_PORN_REPLY
          return STRICT_PORN_REPLY;
        case 60: // QUERY_IS_PORN
          return QUERY_IS_PORN;
        case 61: // PORN_SCORE
          return PORN_SCORE;
        case 62: // QUERY_PORN_CON
          return QUERY_PORN_CON;
        case 63: // REPLY_PORN_CON
          return REPLY_PORN_CON;
        case 64: // USER_PROFILE
          return USER_PROFILE;
        case 65: // QUERY_COMPLETE_TYPE
          return QUERY_COMPLETE_TYPE;
        case 70: // PROACTIVE_REPLY
          return PROACTIVE_REPLY;
        case 71: // IS_SAY_HELLO
          return IS_SAY_HELLO;
        case 80: // SESSION
          return SESSION;
        case 90: // DEBUG_INFO
          return DEBUG_INFO;
        case 91: // WORKFLOW_TERMINAL
          return WORKFLOW_TERMINAL;
        case 92: // PORN_TYPE
          return PORN_TYPE;
        case 93: // GENE_REPLY
          return GENE_REPLY;
        case 94: // RANDOM_REPLY
          return RANDOM_REPLY;
        case 101: // LAST_QUERY_BASIC_SEG
          return LAST_QUERY_BASIC_SEG;
        case 102: // LAST_QUERY_PHRASE_SEG
          return LAST_QUERY_PHRASE_SEG;
        case 103: // LAST_REPLY_BASIC_SEG
          return LAST_REPLY_BASIC_SEG;
        case 104: // LAST_REPLY_PHRASE_SEG
          return LAST_REPLY_PHRASE_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_TERMINAL_ISSET_ID = 0;
  private static final int __SELECT_POST_SIZE_ISSET_ID = 1;
  private static final int __SELECT_MAX_REPLY_SIZE_ISSET_ID = 2;
  private static final int __POST_THRESHOLD_RATIO_ISSET_ID = 3;
  private static final int __SELECT_REPLY_SIZE_ISSET_ID = 4;
  private static final int __REPLY_THRESHOLD_RATIO_ISSET_ID = 5;
  private static final int __REPLY_RESORT_THRESHOLD_ISSET_ID = 6;
  private static final int __INTENTION_SCORE_ISSET_ID = 7;
  private static final int __ANTI_VULGAR_REPLY_ISSET_ID = 8;
  private static final int __STRICT_PORN_REPLY_ISSET_ID = 9;
  private static final int __QUERY_IS_PORN_ISSET_ID = 10;
  private static final int __QUERY_COMPLETE_TYPE_ISSET_ID = 11;
  private static final int __IS_SAY_HELLO_ISSET_ID = 12;
  private static final int __WORKFLOW_TERMINAL_ISSET_ID = 13;
  private static final int __GENE_REPLY_ISSET_ID = 14;
  private static final int __RANDOM_REPLY_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY,_Fields.REPLY,_Fields.IS_TERMINAL,_Fields.LAST_QUERY,_Fields.LAST_REPLY,_Fields.USER_ID,_Fields.QUERY_BASIC_SEG,_Fields.QUERY_PHRASE_SEG,_Fields.USER_INFO,_Fields.RETURN_STATUS,_Fields.QUERY_TAGS,_Fields.PREPROCESSED_QUERY,_Fields.PREPROCESSED_QUERY_BASIC_SEG,_Fields.PREPROCESSED_QUERY_PHRASE_SEG,_Fields.QUERY_PINYIN,_Fields.POST_REPLYS,_Fields.SELECT_POST_SIZE,_Fields.SELECT_MAX_REPLY_SIZE,_Fields.POST_THRESHOLD_RATIO,_Fields.CONTEXT_POST_REPLYS,_Fields.REPLYS,_Fields.SELECT_REPLY_SIZE,_Fields.REPLY_THRESHOLD_RATIO,_Fields.REPLY_RESORT_THRESHOLD,_Fields.REPLY_FROM_SERVICE,_Fields.INTENTION_SCORE,_Fields.ANTI_VULGAR_REPLY,_Fields.STRICT_PORN_REPLY,_Fields.QUERY_IS_PORN,_Fields.PORN_SCORE,_Fields.QUERY_PORN_CON,_Fields.REPLY_PORN_CON,_Fields.USER_PROFILE,_Fields.QUERY_COMPLETE_TYPE,_Fields.PROACTIVE_REPLY,_Fields.IS_SAY_HELLO,_Fields.SESSION,_Fields.DEBUG_INFO,_Fields.WORKFLOW_TERMINAL,_Fields.PORN_TYPE,_Fields.GENE_REPLY,_Fields.RANDOM_REPLY,_Fields.LAST_QUERY_BASIC_SEG,_Fields.LAST_QUERY_PHRASE_SEG,_Fields.LAST_REPLY_BASIC_SEG,_Fields.LAST_REPLY_PHRASE_SEG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class)));
    tmpMap.put(_Fields.IS_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("is_terminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_QUERY, new org.apache.thrift.meta_data.FieldMetaData("last_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_REPLY, new org.apache.thrift.meta_data.FieldMetaData("last_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("query_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("query_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("user_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.RETURN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("return_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnStatus.class)));
    tmpMap.put(_Fields.QUERY_TAGS, new org.apache.thrift.meta_data.FieldMetaData("query_tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.PREPROCESSED_QUERY, new org.apache.thrift.meta_data.FieldMetaData("preprocessed_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREPROCESSED_QUERY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("preprocessed_query_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PREPROCESSED_QUERY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("preprocessed_query_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_PINYIN, new org.apache.thrift.meta_data.FieldMetaData("query_pinyin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POST_REPLYS, new org.apache.thrift.meta_data.FieldMetaData("post_replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostReply.class))));
    tmpMap.put(_Fields.SELECT_POST_SIZE, new org.apache.thrift.meta_data.FieldMetaData("select_post_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELECT_MAX_REPLY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("select_max_reply_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POST_THRESHOLD_RATIO, new org.apache.thrift.meta_data.FieldMetaData("post_threshold_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONTEXT_POST_REPLYS, new org.apache.thrift.meta_data.FieldMetaData("context_post_replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextPostReply.class))));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class))));
    tmpMap.put(_Fields.SELECT_REPLY_SIZE, new org.apache.thrift.meta_data.FieldMetaData("select_reply_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY_THRESHOLD_RATIO, new org.apache.thrift.meta_data.FieldMetaData("reply_threshold_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPLY_RESORT_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("reply_resort_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPLY_FROM_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("reply_from_service", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceName.class)));
    tmpMap.put(_Fields.INTENTION_SCORE, new org.apache.thrift.meta_data.FieldMetaData("intention_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANTI_VULGAR_REPLY, new org.apache.thrift.meta_data.FieldMetaData("anti_vulgar_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRICT_PORN_REPLY, new org.apache.thrift.meta_data.FieldMetaData("strict_porn_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_IS_PORN, new org.apache.thrift.meta_data.FieldMetaData("query_is_porn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PORN_SCORE, new org.apache.thrift.meta_data.FieldMetaData("porn_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_PORN_CON, new org.apache.thrift.meta_data.FieldMetaData("query_porn_con", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryPornCondition.class)));
    tmpMap.put(_Fields.REPLY_PORN_CON, new org.apache.thrift.meta_data.FieldMetaData("reply_porn_con", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReplyPornCondition.class)));
    tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("user_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
    tmpMap.put(_Fields.QUERY_COMPLETE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("query_complete_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROACTIVE_REPLY, new org.apache.thrift.meta_data.FieldMetaData("proactive_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProactiveReply.class)));
    tmpMap.put(_Fields.IS_SAY_HELLO, new org.apache.thrift.meta_data.FieldMetaData("is_say_hello", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SESSION, new org.apache.thrift.meta_data.FieldMetaData("session", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Session.class)));
    tmpMap.put(_Fields.DEBUG_INFO, new org.apache.thrift.meta_data.FieldMetaData("debug_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugInfo.class)));
    tmpMap.put(_Fields.WORKFLOW_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("workflow_terminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PORN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("porn_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PornType.class)));
    tmpMap.put(_Fields.GENE_REPLY, new org.apache.thrift.meta_data.FieldMetaData("gene_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANDOM_REPLY, new org.apache.thrift.meta_data.FieldMetaData("random_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_QUERY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_query_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_QUERY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_query_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_REPLY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_reply_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_REPLY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_reply_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataBundle.class, metaDataMap);
  }

  public DataBundle() {
    this.is_terminal = false;

    this.anti_vulgar_reply = true;

    this.strict_porn_reply = false;

    this.query_complete_type = 0;

    this.gene_reply = false;

    this.random_reply = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataBundle(DataBundle other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetReply()) {
      this.reply = new Reply(other.reply);
    }
    this.is_terminal = other.is_terminal;
    if (other.isSetLast_query()) {
      this.last_query = other.last_query;
    }
    if (other.isSetLast_reply()) {
      this.last_reply = other.last_reply;
    }
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    if (other.isSetQuery_basic_seg()) {
      List<String> __this__query_basic_seg = new ArrayList<String>(other.query_basic_seg);
      this.query_basic_seg = __this__query_basic_seg;
    }
    if (other.isSetQuery_phrase_seg()) {
      List<String> __this__query_phrase_seg = new ArrayList<String>(other.query_phrase_seg);
      this.query_phrase_seg = __this__query_phrase_seg;
    }
    if (other.isSetUser_info()) {
      this.user_info = new UserInfo(other.user_info);
    }
    if (other.isSetReturn_status()) {
      this.return_status = other.return_status;
    }
    if (other.isSetQuery_tags()) {
      Map<Short,Short> __this__query_tags = new HashMap<Short,Short>(other.query_tags);
      this.query_tags = __this__query_tags;
    }
    if (other.isSetPreprocessed_query()) {
      this.preprocessed_query = other.preprocessed_query;
    }
    if (other.isSetPreprocessed_query_basic_seg()) {
      List<String> __this__preprocessed_query_basic_seg = new ArrayList<String>(other.preprocessed_query_basic_seg);
      this.preprocessed_query_basic_seg = __this__preprocessed_query_basic_seg;
    }
    if (other.isSetPreprocessed_query_phrase_seg()) {
      List<String> __this__preprocessed_query_phrase_seg = new ArrayList<String>(other.preprocessed_query_phrase_seg);
      this.preprocessed_query_phrase_seg = __this__preprocessed_query_phrase_seg;
    }
    if (other.isSetQuery_pinyin()) {
      this.query_pinyin = other.query_pinyin;
    }
    if (other.isSetPost_replys()) {
      List<PostReply> __this__post_replys = new ArrayList<PostReply>(other.post_replys.size());
      for (PostReply other_element : other.post_replys) {
        __this__post_replys.add(new PostReply(other_element));
      }
      this.post_replys = __this__post_replys;
    }
    this.select_post_size = other.select_post_size;
    this.select_max_reply_size = other.select_max_reply_size;
    this.post_threshold_ratio = other.post_threshold_ratio;
    if (other.isSetContext_post_replys()) {
      List<ContextPostReply> __this__context_post_replys = new ArrayList<ContextPostReply>(other.context_post_replys.size());
      for (ContextPostReply other_element : other.context_post_replys) {
        __this__context_post_replys.add(new ContextPostReply(other_element));
      }
      this.context_post_replys = __this__context_post_replys;
    }
    if (other.isSetReplys()) {
      List<Reply> __this__replys = new ArrayList<Reply>(other.replys.size());
      for (Reply other_element : other.replys) {
        __this__replys.add(new Reply(other_element));
      }
      this.replys = __this__replys;
    }
    this.select_reply_size = other.select_reply_size;
    this.reply_threshold_ratio = other.reply_threshold_ratio;
    this.reply_resort_threshold = other.reply_resort_threshold;
    if (other.isSetReply_from_service()) {
      this.reply_from_service = other.reply_from_service;
    }
    this.intention_score = other.intention_score;
    this.anti_vulgar_reply = other.anti_vulgar_reply;
    this.strict_porn_reply = other.strict_porn_reply;
    this.query_is_porn = other.query_is_porn;
    if (other.isSetPorn_score()) {
      List<String> __this__porn_score = new ArrayList<String>(other.porn_score);
      this.porn_score = __this__porn_score;
    }
    if (other.isSetQuery_porn_con()) {
      this.query_porn_con = new QueryPornCondition(other.query_porn_con);
    }
    if (other.isSetReply_porn_con()) {
      this.reply_porn_con = new ReplyPornCondition(other.reply_porn_con);
    }
    if (other.isSetUser_profile()) {
      this.user_profile = new UserProfile(other.user_profile);
    }
    this.query_complete_type = other.query_complete_type;
    if (other.isSetProactive_reply()) {
      this.proactive_reply = new ProactiveReply(other.proactive_reply);
    }
    this.is_say_hello = other.is_say_hello;
    if (other.isSetSession()) {
      this.session = new Session(other.session);
    }
    if (other.isSetDebug_info()) {
      this.debug_info = new DebugInfo(other.debug_info);
    }
    this.workflow_terminal = other.workflow_terminal;
    if (other.isSetPorn_type()) {
      this.porn_type = other.porn_type;
    }
    this.gene_reply = other.gene_reply;
    this.random_reply = other.random_reply;
    if (other.isSetLast_query_basic_seg()) {
      List<String> __this__last_query_basic_seg = new ArrayList<String>(other.last_query_basic_seg);
      this.last_query_basic_seg = __this__last_query_basic_seg;
    }
    if (other.isSetLast_query_phrase_seg()) {
      List<String> __this__last_query_phrase_seg = new ArrayList<String>(other.last_query_phrase_seg);
      this.last_query_phrase_seg = __this__last_query_phrase_seg;
    }
    if (other.isSetLast_reply_basic_seg()) {
      List<String> __this__last_reply_basic_seg = new ArrayList<String>(other.last_reply_basic_seg);
      this.last_reply_basic_seg = __this__last_reply_basic_seg;
    }
    if (other.isSetLast_reply_phrase_seg()) {
      List<String> __this__last_reply_phrase_seg = new ArrayList<String>(other.last_reply_phrase_seg);
      this.last_reply_phrase_seg = __this__last_reply_phrase_seg;
    }
  }

  public DataBundle deepCopy() {
    return new DataBundle(this);
  }

  
  public void clear() {
    this.query = null;
    this.reply = null;
    this.is_terminal = false;

    this.last_query = null;
    this.last_reply = null;
    this.user_id = null;
    this.query_basic_seg = null;
    this.query_phrase_seg = null;
    this.user_info = null;
    this.return_status = null;
    this.query_tags = null;
    this.preprocessed_query = null;
    this.preprocessed_query_basic_seg = null;
    this.preprocessed_query_phrase_seg = null;
    this.query_pinyin = null;
    this.post_replys = null;
    setSelect_post_sizeIsSet(false);
    this.select_post_size = 0;
    setSelect_max_reply_sizeIsSet(false);
    this.select_max_reply_size = 0;
    setPost_threshold_ratioIsSet(false);
    this.post_threshold_ratio = 0.0;
    this.context_post_replys = null;
    this.replys = null;
    setSelect_reply_sizeIsSet(false);
    this.select_reply_size = 0;
    setReply_threshold_ratioIsSet(false);
    this.reply_threshold_ratio = 0.0;
    setReply_resort_thresholdIsSet(false);
    this.reply_resort_threshold = 0.0;
    this.reply_from_service = null;
    setIntention_scoreIsSet(false);
    this.intention_score = 0.0;
    this.anti_vulgar_reply = true;

    this.strict_porn_reply = false;

    setQuery_is_pornIsSet(false);
    this.query_is_porn = false;
    this.porn_score = null;
    this.query_porn_con = null;
    this.reply_porn_con = null;
    this.user_profile = null;
    this.query_complete_type = 0;

    this.proactive_reply = null;
    setIs_say_helloIsSet(false);
    this.is_say_hello = false;
    this.session = null;
    this.debug_info = null;
    setWorkflow_terminalIsSet(false);
    this.workflow_terminal = false;
    this.porn_type = null;
    this.gene_reply = false;

    this.random_reply = false;

    this.last_query_basic_seg = null;
    this.last_query_phrase_seg = null;
    this.last_reply_basic_seg = null;
    this.last_reply_phrase_seg = null;
  }

  public String getQuery() {
    return this.query;
  }

  public DataBundle setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public Reply getReply() {
    return this.reply;
  }

  public DataBundle setReply(Reply reply) {
    this.reply = reply;
    return this;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  public boolean isIs_terminal() {
    return this.is_terminal;
  }

  public DataBundle setIs_terminal(boolean is_terminal) {
    this.is_terminal = is_terminal;
    setIs_terminalIsSet(true);
    return this;
  }

  public void unsetIs_terminal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID);
  }

  /** Returns true if field is_terminal is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_terminal() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID);
  }

  public void setIs_terminalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID, value);
  }

  public String getLast_query() {
    return this.last_query;
  }

  public DataBundle setLast_query(String last_query) {
    this.last_query = last_query;
    return this;
  }

  public void unsetLast_query() {
    this.last_query = null;
  }

  /** Returns true if field last_query is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_query() {
    return this.last_query != null;
  }

  public void setLast_queryIsSet(boolean value) {
    if (!value) {
      this.last_query = null;
    }
  }

  public String getLast_reply() {
    return this.last_reply;
  }

  public DataBundle setLast_reply(String last_reply) {
    this.last_reply = last_reply;
    return this;
  }

  public void unsetLast_reply() {
    this.last_reply = null;
  }

  /** Returns true if field last_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_reply() {
    return this.last_reply != null;
  }

  public void setLast_replyIsSet(boolean value) {
    if (!value) {
      this.last_reply = null;
    }
  }

  public String getUser_id() {
    return this.user_id;
  }

  public DataBundle setUser_id(String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  public int getQuery_basic_segSize() {
    return (this.query_basic_seg == null) ? 0 : this.query_basic_seg.size();
  }

  public java.util.Iterator<String> getQuery_basic_segIterator() {
    return (this.query_basic_seg == null) ? null : this.query_basic_seg.iterator();
  }

  public void addToQuery_basic_seg(String elem) {
    if (this.query_basic_seg == null) {
      this.query_basic_seg = new ArrayList<String>();
    }
    this.query_basic_seg.add(elem);
  }

  public List<String> getQuery_basic_seg() {
    return this.query_basic_seg;
  }

  public DataBundle setQuery_basic_seg(List<String> query_basic_seg) {
    this.query_basic_seg = query_basic_seg;
    return this;
  }

  public void unsetQuery_basic_seg() {
    this.query_basic_seg = null;
  }

  /** Returns true if field query_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_basic_seg() {
    return this.query_basic_seg != null;
  }

  public void setQuery_basic_segIsSet(boolean value) {
    if (!value) {
      this.query_basic_seg = null;
    }
  }

  public int getQuery_phrase_segSize() {
    return (this.query_phrase_seg == null) ? 0 : this.query_phrase_seg.size();
  }

  public java.util.Iterator<String> getQuery_phrase_segIterator() {
    return (this.query_phrase_seg == null) ? null : this.query_phrase_seg.iterator();
  }

  public void addToQuery_phrase_seg(String elem) {
    if (this.query_phrase_seg == null) {
      this.query_phrase_seg = new ArrayList<String>();
    }
    this.query_phrase_seg.add(elem);
  }

  public List<String> getQuery_phrase_seg() {
    return this.query_phrase_seg;
  }

  public DataBundle setQuery_phrase_seg(List<String> query_phrase_seg) {
    this.query_phrase_seg = query_phrase_seg;
    return this;
  }

  public void unsetQuery_phrase_seg() {
    this.query_phrase_seg = null;
  }

  /** Returns true if field query_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_phrase_seg() {
    return this.query_phrase_seg != null;
  }

  public void setQuery_phrase_segIsSet(boolean value) {
    if (!value) {
      this.query_phrase_seg = null;
    }
  }

  public UserInfo getUser_info() {
    return this.user_info;
  }

  public DataBundle setUser_info(UserInfo user_info) {
    this.user_info = user_info;
    return this;
  }

  public void unsetUser_info() {
    this.user_info = null;
  }

  /** Returns true if field user_info is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_info() {
    return this.user_info != null;
  }

  public void setUser_infoIsSet(boolean value) {
    if (!value) {
      this.user_info = null;
    }
  }

  /**
   * 
   * @see ReturnStatus
   */
  public ReturnStatus getReturn_status() {
    return this.return_status;
  }

  /**
   * 
   * @see ReturnStatus
   */
  public DataBundle setReturn_status(ReturnStatus return_status) {
    this.return_status = return_status;
    return this;
  }

  public void unsetReturn_status() {
    this.return_status = null;
  }

  /** Returns true if field return_status is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_status() {
    return this.return_status != null;
  }

  public void setReturn_statusIsSet(boolean value) {
    if (!value) {
      this.return_status = null;
    }
  }

  public int getQuery_tagsSize() {
    return (this.query_tags == null) ? 0 : this.query_tags.size();
  }

  public void putToQuery_tags(short key, short val) {
    if (this.query_tags == null) {
      this.query_tags = new HashMap<Short,Short>();
    }
    this.query_tags.put(key, val);
  }

  public Map<Short,Short> getQuery_tags() {
    return this.query_tags;
  }

  public DataBundle setQuery_tags(Map<Short,Short> query_tags) {
    this.query_tags = query_tags;
    return this;
  }

  public void unsetQuery_tags() {
    this.query_tags = null;
  }

  /** Returns true if field query_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_tags() {
    return this.query_tags != null;
  }

  public void setQuery_tagsIsSet(boolean value) {
    if (!value) {
      this.query_tags = null;
    }
  }

  public String getPreprocessed_query() {
    return this.preprocessed_query;
  }

  public DataBundle setPreprocessed_query(String preprocessed_query) {
    this.preprocessed_query = preprocessed_query;
    return this;
  }

  public void unsetPreprocessed_query() {
    this.preprocessed_query = null;
  }

  /** Returns true if field preprocessed_query is set (has been assigned a value) and false otherwise */
  public boolean isSetPreprocessed_query() {
    return this.preprocessed_query != null;
  }

  public void setPreprocessed_queryIsSet(boolean value) {
    if (!value) {
      this.preprocessed_query = null;
    }
  }

  public int getPreprocessed_query_basic_segSize() {
    return (this.preprocessed_query_basic_seg == null) ? 0 : this.preprocessed_query_basic_seg.size();
  }

  public java.util.Iterator<String> getPreprocessed_query_basic_segIterator() {
    return (this.preprocessed_query_basic_seg == null) ? null : this.preprocessed_query_basic_seg.iterator();
  }

  public void addToPreprocessed_query_basic_seg(String elem) {
    if (this.preprocessed_query_basic_seg == null) {
      this.preprocessed_query_basic_seg = new ArrayList<String>();
    }
    this.preprocessed_query_basic_seg.add(elem);
  }

  public List<String> getPreprocessed_query_basic_seg() {
    return this.preprocessed_query_basic_seg;
  }

  public DataBundle setPreprocessed_query_basic_seg(List<String> preprocessed_query_basic_seg) {
    this.preprocessed_query_basic_seg = preprocessed_query_basic_seg;
    return this;
  }

  public void unsetPreprocessed_query_basic_seg() {
    this.preprocessed_query_basic_seg = null;
  }

  /** Returns true if field preprocessed_query_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetPreprocessed_query_basic_seg() {
    return this.preprocessed_query_basic_seg != null;
  }

  public void setPreprocessed_query_basic_segIsSet(boolean value) {
    if (!value) {
      this.preprocessed_query_basic_seg = null;
    }
  }

  public int getPreprocessed_query_phrase_segSize() {
    return (this.preprocessed_query_phrase_seg == null) ? 0 : this.preprocessed_query_phrase_seg.size();
  }

  public java.util.Iterator<String> getPreprocessed_query_phrase_segIterator() {
    return (this.preprocessed_query_phrase_seg == null) ? null : this.preprocessed_query_phrase_seg.iterator();
  }

  public void addToPreprocessed_query_phrase_seg(String elem) {
    if (this.preprocessed_query_phrase_seg == null) {
      this.preprocessed_query_phrase_seg = new ArrayList<String>();
    }
    this.preprocessed_query_phrase_seg.add(elem);
  }

  public List<String> getPreprocessed_query_phrase_seg() {
    return this.preprocessed_query_phrase_seg;
  }

  public DataBundle setPreprocessed_query_phrase_seg(List<String> preprocessed_query_phrase_seg) {
    this.preprocessed_query_phrase_seg = preprocessed_query_phrase_seg;
    return this;
  }

  public void unsetPreprocessed_query_phrase_seg() {
    this.preprocessed_query_phrase_seg = null;
  }

  /** Returns true if field preprocessed_query_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetPreprocessed_query_phrase_seg() {
    return this.preprocessed_query_phrase_seg != null;
  }

  public void setPreprocessed_query_phrase_segIsSet(boolean value) {
    if (!value) {
      this.preprocessed_query_phrase_seg = null;
    }
  }

  public String getQuery_pinyin() {
    return this.query_pinyin;
  }

  public DataBundle setQuery_pinyin(String query_pinyin) {
    this.query_pinyin = query_pinyin;
    return this;
  }

  public void unsetQuery_pinyin() {
    this.query_pinyin = null;
  }

  /** Returns true if field query_pinyin is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_pinyin() {
    return this.query_pinyin != null;
  }

  public void setQuery_pinyinIsSet(boolean value) {
    if (!value) {
      this.query_pinyin = null;
    }
  }

  public int getPost_replysSize() {
    return (this.post_replys == null) ? 0 : this.post_replys.size();
  }

  public java.util.Iterator<PostReply> getPost_replysIterator() {
    return (this.post_replys == null) ? null : this.post_replys.iterator();
  }

  public void addToPost_replys(PostReply elem) {
    if (this.post_replys == null) {
      this.post_replys = new ArrayList<PostReply>();
    }
    this.post_replys.add(elem);
  }

  public List<PostReply> getPost_replys() {
    return this.post_replys;
  }

  public DataBundle setPost_replys(List<PostReply> post_replys) {
    this.post_replys = post_replys;
    return this;
  }

  public void unsetPost_replys() {
    this.post_replys = null;
  }

  /** Returns true if field post_replys is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_replys() {
    return this.post_replys != null;
  }

  public void setPost_replysIsSet(boolean value) {
    if (!value) {
      this.post_replys = null;
    }
  }

  public int getSelect_post_size() {
    return this.select_post_size;
  }

  public DataBundle setSelect_post_size(int select_post_size) {
    this.select_post_size = select_post_size;
    setSelect_post_sizeIsSet(true);
    return this;
  }

  public void unsetSelect_post_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELECT_POST_SIZE_ISSET_ID);
  }

  /** Returns true if field select_post_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect_post_size() {
    return EncodingUtils.testBit(__isset_bitfield, __SELECT_POST_SIZE_ISSET_ID);
  }

  public void setSelect_post_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELECT_POST_SIZE_ISSET_ID, value);
  }

  public int getSelect_max_reply_size() {
    return this.select_max_reply_size;
  }

  public DataBundle setSelect_max_reply_size(int select_max_reply_size) {
    this.select_max_reply_size = select_max_reply_size;
    setSelect_max_reply_sizeIsSet(true);
    return this;
  }

  public void unsetSelect_max_reply_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELECT_MAX_REPLY_SIZE_ISSET_ID);
  }

  /** Returns true if field select_max_reply_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect_max_reply_size() {
    return EncodingUtils.testBit(__isset_bitfield, __SELECT_MAX_REPLY_SIZE_ISSET_ID);
  }

  public void setSelect_max_reply_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELECT_MAX_REPLY_SIZE_ISSET_ID, value);
  }

  public double getPost_threshold_ratio() {
    return this.post_threshold_ratio;
  }

  public DataBundle setPost_threshold_ratio(double post_threshold_ratio) {
    this.post_threshold_ratio = post_threshold_ratio;
    setPost_threshold_ratioIsSet(true);
    return this;
  }

  public void unsetPost_threshold_ratio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POST_THRESHOLD_RATIO_ISSET_ID);
  }

  /** Returns true if field post_threshold_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_threshold_ratio() {
    return EncodingUtils.testBit(__isset_bitfield, __POST_THRESHOLD_RATIO_ISSET_ID);
  }

  public void setPost_threshold_ratioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POST_THRESHOLD_RATIO_ISSET_ID, value);
  }

  public int getContext_post_replysSize() {
    return (this.context_post_replys == null) ? 0 : this.context_post_replys.size();
  }

  public java.util.Iterator<ContextPostReply> getContext_post_replysIterator() {
    return (this.context_post_replys == null) ? null : this.context_post_replys.iterator();
  }

  public void addToContext_post_replys(ContextPostReply elem) {
    if (this.context_post_replys == null) {
      this.context_post_replys = new ArrayList<ContextPostReply>();
    }
    this.context_post_replys.add(elem);
  }

  public List<ContextPostReply> getContext_post_replys() {
    return this.context_post_replys;
  }

  public DataBundle setContext_post_replys(List<ContextPostReply> context_post_replys) {
    this.context_post_replys = context_post_replys;
    return this;
  }

  public void unsetContext_post_replys() {
    this.context_post_replys = null;
  }

  /** Returns true if field context_post_replys is set (has been assigned a value) and false otherwise */
  public boolean isSetContext_post_replys() {
    return this.context_post_replys != null;
  }

  public void setContext_post_replysIsSet(boolean value) {
    if (!value) {
      this.context_post_replys = null;
    }
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public java.util.Iterator<Reply> getReplysIterator() {
    return (this.replys == null) ? null : this.replys.iterator();
  }

  public void addToReplys(Reply elem) {
    if (this.replys == null) {
      this.replys = new ArrayList<Reply>();
    }
    this.replys.add(elem);
  }

  public List<Reply> getReplys() {
    return this.replys;
  }

  public DataBundle setReplys(List<Reply> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public int getSelect_reply_size() {
    return this.select_reply_size;
  }

  public DataBundle setSelect_reply_size(int select_reply_size) {
    this.select_reply_size = select_reply_size;
    setSelect_reply_sizeIsSet(true);
    return this;
  }

  public void unsetSelect_reply_size() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELECT_REPLY_SIZE_ISSET_ID);
  }

  /** Returns true if field select_reply_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect_reply_size() {
    return EncodingUtils.testBit(__isset_bitfield, __SELECT_REPLY_SIZE_ISSET_ID);
  }

  public void setSelect_reply_sizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELECT_REPLY_SIZE_ISSET_ID, value);
  }

  public double getReply_threshold_ratio() {
    return this.reply_threshold_ratio;
  }

  public DataBundle setReply_threshold_ratio(double reply_threshold_ratio) {
    this.reply_threshold_ratio = reply_threshold_ratio;
    setReply_threshold_ratioIsSet(true);
    return this;
  }

  public void unsetReply_threshold_ratio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLY_THRESHOLD_RATIO_ISSET_ID);
  }

  /** Returns true if field reply_threshold_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_threshold_ratio() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLY_THRESHOLD_RATIO_ISSET_ID);
  }

  public void setReply_threshold_ratioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLY_THRESHOLD_RATIO_ISSET_ID, value);
  }

  public double getReply_resort_threshold() {
    return this.reply_resort_threshold;
  }

  public DataBundle setReply_resort_threshold(double reply_resort_threshold) {
    this.reply_resort_threshold = reply_resort_threshold;
    setReply_resort_thresholdIsSet(true);
    return this;
  }

  public void unsetReply_resort_threshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLY_RESORT_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field reply_resort_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_resort_threshold() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLY_RESORT_THRESHOLD_ISSET_ID);
  }

  public void setReply_resort_thresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLY_RESORT_THRESHOLD_ISSET_ID, value);
  }

  /**
   * 
   * @see ServiceName
   */
  public ServiceName getReply_from_service() {
    return this.reply_from_service;
  }

  /**
   * 
   * @see ServiceName
   */
  public DataBundle setReply_from_service(ServiceName reply_from_service) {
    this.reply_from_service = reply_from_service;
    return this;
  }

  public void unsetReply_from_service() {
    this.reply_from_service = null;
  }

  /** Returns true if field reply_from_service is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_from_service() {
    return this.reply_from_service != null;
  }

  public void setReply_from_serviceIsSet(boolean value) {
    if (!value) {
      this.reply_from_service = null;
    }
  }

  public double getIntention_score() {
    return this.intention_score;
  }

  public DataBundle setIntention_score(double intention_score) {
    this.intention_score = intention_score;
    setIntention_scoreIsSet(true);
    return this;
  }

  public void unsetIntention_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTENTION_SCORE_ISSET_ID);
  }

  /** Returns true if field intention_score is set (has been assigned a value) and false otherwise */
  public boolean isSetIntention_score() {
    return EncodingUtils.testBit(__isset_bitfield, __INTENTION_SCORE_ISSET_ID);
  }

  public void setIntention_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTENTION_SCORE_ISSET_ID, value);
  }

  public boolean isAnti_vulgar_reply() {
    return this.anti_vulgar_reply;
  }

  public DataBundle setAnti_vulgar_reply(boolean anti_vulgar_reply) {
    this.anti_vulgar_reply = anti_vulgar_reply;
    setAnti_vulgar_replyIsSet(true);
    return this;
  }

  public void unsetAnti_vulgar_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID);
  }

  /** Returns true if field anti_vulgar_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetAnti_vulgar_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID);
  }

  public void setAnti_vulgar_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID, value);
  }

  public boolean isStrict_porn_reply() {
    return this.strict_porn_reply;
  }

  public DataBundle setStrict_porn_reply(boolean strict_porn_reply) {
    this.strict_porn_reply = strict_porn_reply;
    setStrict_porn_replyIsSet(true);
    return this;
  }

  public void unsetStrict_porn_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID);
  }

  /** Returns true if field strict_porn_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_porn_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID);
  }

  public void setStrict_porn_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID, value);
  }

  public boolean isQuery_is_porn() {
    return this.query_is_porn;
  }

  public DataBundle setQuery_is_porn(boolean query_is_porn) {
    this.query_is_porn = query_is_porn;
    setQuery_is_pornIsSet(true);
    return this;
  }

  public void unsetQuery_is_porn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERY_IS_PORN_ISSET_ID);
  }

  /** Returns true if field query_is_porn is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_is_porn() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERY_IS_PORN_ISSET_ID);
  }

  public void setQuery_is_pornIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERY_IS_PORN_ISSET_ID, value);
  }

  public int getPorn_scoreSize() {
    return (this.porn_score == null) ? 0 : this.porn_score.size();
  }

  public java.util.Iterator<String> getPorn_scoreIterator() {
    return (this.porn_score == null) ? null : this.porn_score.iterator();
  }

  public void addToPorn_score(String elem) {
    if (this.porn_score == null) {
      this.porn_score = new ArrayList<String>();
    }
    this.porn_score.add(elem);
  }

  public List<String> getPorn_score() {
    return this.porn_score;
  }

  public DataBundle setPorn_score(List<String> porn_score) {
    this.porn_score = porn_score;
    return this;
  }

  public void unsetPorn_score() {
    this.porn_score = null;
  }

  /** Returns true if field porn_score is set (has been assigned a value) and false otherwise */
  public boolean isSetPorn_score() {
    return this.porn_score != null;
  }

  public void setPorn_scoreIsSet(boolean value) {
    if (!value) {
      this.porn_score = null;
    }
  }

  public QueryPornCondition getQuery_porn_con() {
    return this.query_porn_con;
  }

  public DataBundle setQuery_porn_con(QueryPornCondition query_porn_con) {
    this.query_porn_con = query_porn_con;
    return this;
  }

  public void unsetQuery_porn_con() {
    this.query_porn_con = null;
  }

  /** Returns true if field query_porn_con is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_porn_con() {
    return this.query_porn_con != null;
  }

  public void setQuery_porn_conIsSet(boolean value) {
    if (!value) {
      this.query_porn_con = null;
    }
  }

  public ReplyPornCondition getReply_porn_con() {
    return this.reply_porn_con;
  }

  public DataBundle setReply_porn_con(ReplyPornCondition reply_porn_con) {
    this.reply_porn_con = reply_porn_con;
    return this;
  }

  public void unsetReply_porn_con() {
    this.reply_porn_con = null;
  }

  /** Returns true if field reply_porn_con is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_porn_con() {
    return this.reply_porn_con != null;
  }

  public void setReply_porn_conIsSet(boolean value) {
    if (!value) {
      this.reply_porn_con = null;
    }
  }

  public UserProfile getUser_profile() {
    return this.user_profile;
  }

  public DataBundle setUser_profile(UserProfile user_profile) {
    this.user_profile = user_profile;
    return this;
  }

  public void unsetUser_profile() {
    this.user_profile = null;
  }

  /** Returns true if field user_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_profile() {
    return this.user_profile != null;
  }

  public void setUser_profileIsSet(boolean value) {
    if (!value) {
      this.user_profile = null;
    }
  }

  public int getQuery_complete_type() {
    return this.query_complete_type;
  }

  public DataBundle setQuery_complete_type(int query_complete_type) {
    this.query_complete_type = query_complete_type;
    setQuery_complete_typeIsSet(true);
    return this;
  }

  public void unsetQuery_complete_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERY_COMPLETE_TYPE_ISSET_ID);
  }

  /** Returns true if field query_complete_type is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_complete_type() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERY_COMPLETE_TYPE_ISSET_ID);
  }

  public void setQuery_complete_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERY_COMPLETE_TYPE_ISSET_ID, value);
  }

  public ProactiveReply getProactive_reply() {
    return this.proactive_reply;
  }

  public DataBundle setProactive_reply(ProactiveReply proactive_reply) {
    this.proactive_reply = proactive_reply;
    return this;
  }

  public void unsetProactive_reply() {
    this.proactive_reply = null;
  }

  /** Returns true if field proactive_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetProactive_reply() {
    return this.proactive_reply != null;
  }

  public void setProactive_replyIsSet(boolean value) {
    if (!value) {
      this.proactive_reply = null;
    }
  }

  public boolean isIs_say_hello() {
    return this.is_say_hello;
  }

  public DataBundle setIs_say_hello(boolean is_say_hello) {
    this.is_say_hello = is_say_hello;
    setIs_say_helloIsSet(true);
    return this;
  }

  public void unsetIs_say_hello() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID);
  }

  /** Returns true if field is_say_hello is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_say_hello() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID);
  }

  public void setIs_say_helloIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID, value);
  }

  public Session getSession() {
    return this.session;
  }

  public DataBundle setSession(Session session) {
    this.session = session;
    return this;
  }

  public void unsetSession() {
    this.session = null;
  }

  /** Returns true if field session is set (has been assigned a value) and false otherwise */
  public boolean isSetSession() {
    return this.session != null;
  }

  public void setSessionIsSet(boolean value) {
    if (!value) {
      this.session = null;
    }
  }

  public DebugInfo getDebug_info() {
    return this.debug_info;
  }

  public DataBundle setDebug_info(DebugInfo debug_info) {
    this.debug_info = debug_info;
    return this;
  }

  public void unsetDebug_info() {
    this.debug_info = null;
  }

  /** Returns true if field debug_info is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_info() {
    return this.debug_info != null;
  }

  public void setDebug_infoIsSet(boolean value) {
    if (!value) {
      this.debug_info = null;
    }
  }

  public boolean isWorkflow_terminal() {
    return this.workflow_terminal;
  }

  public DataBundle setWorkflow_terminal(boolean workflow_terminal) {
    this.workflow_terminal = workflow_terminal;
    setWorkflow_terminalIsSet(true);
    return this;
  }

  public void unsetWorkflow_terminal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKFLOW_TERMINAL_ISSET_ID);
  }

  /** Returns true if field workflow_terminal is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflow_terminal() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKFLOW_TERMINAL_ISSET_ID);
  }

  public void setWorkflow_terminalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKFLOW_TERMINAL_ISSET_ID, value);
  }

  /**
   * 
   * @see PornType
   */
  public PornType getPorn_type() {
    return this.porn_type;
  }

  /**
   * 
   * @see PornType
   */
  public DataBundle setPorn_type(PornType porn_type) {
    this.porn_type = porn_type;
    return this;
  }

  public void unsetPorn_type() {
    this.porn_type = null;
  }

  /** Returns true if field porn_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPorn_type() {
    return this.porn_type != null;
  }

  public void setPorn_typeIsSet(boolean value) {
    if (!value) {
      this.porn_type = null;
    }
  }

  public boolean isGene_reply() {
    return this.gene_reply;
  }

  public DataBundle setGene_reply(boolean gene_reply) {
    this.gene_reply = gene_reply;
    setGene_replyIsSet(true);
    return this;
  }

  public void unsetGene_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENE_REPLY_ISSET_ID);
  }

  /** Returns true if field gene_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetGene_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __GENE_REPLY_ISSET_ID);
  }

  public void setGene_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENE_REPLY_ISSET_ID, value);
  }

  public boolean isRandom_reply() {
    return this.random_reply;
  }

  public DataBundle setRandom_reply(boolean random_reply) {
    this.random_reply = random_reply;
    setRandom_replyIsSet(true);
    return this;
  }

  public void unsetRandom_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDOM_REPLY_ISSET_ID);
  }

  /** Returns true if field random_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetRandom_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDOM_REPLY_ISSET_ID);
  }

  public void setRandom_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDOM_REPLY_ISSET_ID, value);
  }

  public int getLast_query_basic_segSize() {
    return (this.last_query_basic_seg == null) ? 0 : this.last_query_basic_seg.size();
  }

  public java.util.Iterator<String> getLast_query_basic_segIterator() {
    return (this.last_query_basic_seg == null) ? null : this.last_query_basic_seg.iterator();
  }

  public void addToLast_query_basic_seg(String elem) {
    if (this.last_query_basic_seg == null) {
      this.last_query_basic_seg = new ArrayList<String>();
    }
    this.last_query_basic_seg.add(elem);
  }

  public List<String> getLast_query_basic_seg() {
    return this.last_query_basic_seg;
  }

  public DataBundle setLast_query_basic_seg(List<String> last_query_basic_seg) {
    this.last_query_basic_seg = last_query_basic_seg;
    return this;
  }

  public void unsetLast_query_basic_seg() {
    this.last_query_basic_seg = null;
  }

  /** Returns true if field last_query_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_query_basic_seg() {
    return this.last_query_basic_seg != null;
  }

  public void setLast_query_basic_segIsSet(boolean value) {
    if (!value) {
      this.last_query_basic_seg = null;
    }
  }

  public int getLast_query_phrase_segSize() {
    return (this.last_query_phrase_seg == null) ? 0 : this.last_query_phrase_seg.size();
  }

  public java.util.Iterator<String> getLast_query_phrase_segIterator() {
    return (this.last_query_phrase_seg == null) ? null : this.last_query_phrase_seg.iterator();
  }

  public void addToLast_query_phrase_seg(String elem) {
    if (this.last_query_phrase_seg == null) {
      this.last_query_phrase_seg = new ArrayList<String>();
    }
    this.last_query_phrase_seg.add(elem);
  }

  public List<String> getLast_query_phrase_seg() {
    return this.last_query_phrase_seg;
  }

  public DataBundle setLast_query_phrase_seg(List<String> last_query_phrase_seg) {
    this.last_query_phrase_seg = last_query_phrase_seg;
    return this;
  }

  public void unsetLast_query_phrase_seg() {
    this.last_query_phrase_seg = null;
  }

  /** Returns true if field last_query_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_query_phrase_seg() {
    return this.last_query_phrase_seg != null;
  }

  public void setLast_query_phrase_segIsSet(boolean value) {
    if (!value) {
      this.last_query_phrase_seg = null;
    }
  }

  public int getLast_reply_basic_segSize() {
    return (this.last_reply_basic_seg == null) ? 0 : this.last_reply_basic_seg.size();
  }

  public java.util.Iterator<String> getLast_reply_basic_segIterator() {
    return (this.last_reply_basic_seg == null) ? null : this.last_reply_basic_seg.iterator();
  }

  public void addToLast_reply_basic_seg(String elem) {
    if (this.last_reply_basic_seg == null) {
      this.last_reply_basic_seg = new ArrayList<String>();
    }
    this.last_reply_basic_seg.add(elem);
  }

  public List<String> getLast_reply_basic_seg() {
    return this.last_reply_basic_seg;
  }

  public DataBundle setLast_reply_basic_seg(List<String> last_reply_basic_seg) {
    this.last_reply_basic_seg = last_reply_basic_seg;
    return this;
  }

  public void unsetLast_reply_basic_seg() {
    this.last_reply_basic_seg = null;
  }

  /** Returns true if field last_reply_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_reply_basic_seg() {
    return this.last_reply_basic_seg != null;
  }

  public void setLast_reply_basic_segIsSet(boolean value) {
    if (!value) {
      this.last_reply_basic_seg = null;
    }
  }

  public int getLast_reply_phrase_segSize() {
    return (this.last_reply_phrase_seg == null) ? 0 : this.last_reply_phrase_seg.size();
  }

  public java.util.Iterator<String> getLast_reply_phrase_segIterator() {
    return (this.last_reply_phrase_seg == null) ? null : this.last_reply_phrase_seg.iterator();
  }

  public void addToLast_reply_phrase_seg(String elem) {
    if (this.last_reply_phrase_seg == null) {
      this.last_reply_phrase_seg = new ArrayList<String>();
    }
    this.last_reply_phrase_seg.add(elem);
  }

  public List<String> getLast_reply_phrase_seg() {
    return this.last_reply_phrase_seg;
  }

  public DataBundle setLast_reply_phrase_seg(List<String> last_reply_phrase_seg) {
    this.last_reply_phrase_seg = last_reply_phrase_seg;
    return this;
  }

  public void unsetLast_reply_phrase_seg() {
    this.last_reply_phrase_seg = null;
  }

  /** Returns true if field last_reply_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_reply_phrase_seg() {
    return this.last_reply_phrase_seg != null;
  }

  public void setLast_reply_phrase_segIsSet(boolean value) {
    if (!value) {
      this.last_reply_phrase_seg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((Reply)value);
      }
      break;

    case IS_TERMINAL:
      if (value == null) {
        unsetIs_terminal();
      } else {
        setIs_terminal((Boolean)value);
      }
      break;

    case LAST_QUERY:
      if (value == null) {
        unsetLast_query();
      } else {
        setLast_query((String)value);
      }
      break;

    case LAST_REPLY:
      if (value == null) {
        unsetLast_reply();
      } else {
        setLast_reply((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((String)value);
      }
      break;

    case QUERY_BASIC_SEG:
      if (value == null) {
        unsetQuery_basic_seg();
      } else {
        setQuery_basic_seg((List<String>)value);
      }
      break;

    case QUERY_PHRASE_SEG:
      if (value == null) {
        unsetQuery_phrase_seg();
      } else {
        setQuery_phrase_seg((List<String>)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUser_info();
      } else {
        setUser_info((UserInfo)value);
      }
      break;

    case RETURN_STATUS:
      if (value == null) {
        unsetReturn_status();
      } else {
        setReturn_status((ReturnStatus)value);
      }
      break;

    case QUERY_TAGS:
      if (value == null) {
        unsetQuery_tags();
      } else {
        setQuery_tags((Map<Short,Short>)value);
      }
      break;

    case PREPROCESSED_QUERY:
      if (value == null) {
        unsetPreprocessed_query();
      } else {
        setPreprocessed_query((String)value);
      }
      break;

    case PREPROCESSED_QUERY_BASIC_SEG:
      if (value == null) {
        unsetPreprocessed_query_basic_seg();
      } else {
        setPreprocessed_query_basic_seg((List<String>)value);
      }
      break;

    case PREPROCESSED_QUERY_PHRASE_SEG:
      if (value == null) {
        unsetPreprocessed_query_phrase_seg();
      } else {
        setPreprocessed_query_phrase_seg((List<String>)value);
      }
      break;

    case QUERY_PINYIN:
      if (value == null) {
        unsetQuery_pinyin();
      } else {
        setQuery_pinyin((String)value);
      }
      break;

    case POST_REPLYS:
      if (value == null) {
        unsetPost_replys();
      } else {
        setPost_replys((List<PostReply>)value);
      }
      break;

    case SELECT_POST_SIZE:
      if (value == null) {
        unsetSelect_post_size();
      } else {
        setSelect_post_size((Integer)value);
      }
      break;

    case SELECT_MAX_REPLY_SIZE:
      if (value == null) {
        unsetSelect_max_reply_size();
      } else {
        setSelect_max_reply_size((Integer)value);
      }
      break;

    case POST_THRESHOLD_RATIO:
      if (value == null) {
        unsetPost_threshold_ratio();
      } else {
        setPost_threshold_ratio((Double)value);
      }
      break;

    case CONTEXT_POST_REPLYS:
      if (value == null) {
        unsetContext_post_replys();
      } else {
        setContext_post_replys((List<ContextPostReply>)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((List<Reply>)value);
      }
      break;

    case SELECT_REPLY_SIZE:
      if (value == null) {
        unsetSelect_reply_size();
      } else {
        setSelect_reply_size((Integer)value);
      }
      break;

    case REPLY_THRESHOLD_RATIO:
      if (value == null) {
        unsetReply_threshold_ratio();
      } else {
        setReply_threshold_ratio((Double)value);
      }
      break;

    case REPLY_RESORT_THRESHOLD:
      if (value == null) {
        unsetReply_resort_threshold();
      } else {
        setReply_resort_threshold((Double)value);
      }
      break;

    case REPLY_FROM_SERVICE:
      if (value == null) {
        unsetReply_from_service();
      } else {
        setReply_from_service((ServiceName)value);
      }
      break;

    case INTENTION_SCORE:
      if (value == null) {
        unsetIntention_score();
      } else {
        setIntention_score((Double)value);
      }
      break;

    case ANTI_VULGAR_REPLY:
      if (value == null) {
        unsetAnti_vulgar_reply();
      } else {
        setAnti_vulgar_reply((Boolean)value);
      }
      break;

    case STRICT_PORN_REPLY:
      if (value == null) {
        unsetStrict_porn_reply();
      } else {
        setStrict_porn_reply((Boolean)value);
      }
      break;

    case QUERY_IS_PORN:
      if (value == null) {
        unsetQuery_is_porn();
      } else {
        setQuery_is_porn((Boolean)value);
      }
      break;

    case PORN_SCORE:
      if (value == null) {
        unsetPorn_score();
      } else {
        setPorn_score((List<String>)value);
      }
      break;

    case QUERY_PORN_CON:
      if (value == null) {
        unsetQuery_porn_con();
      } else {
        setQuery_porn_con((QueryPornCondition)value);
      }
      break;

    case REPLY_PORN_CON:
      if (value == null) {
        unsetReply_porn_con();
      } else {
        setReply_porn_con((ReplyPornCondition)value);
      }
      break;

    case USER_PROFILE:
      if (value == null) {
        unsetUser_profile();
      } else {
        setUser_profile((UserProfile)value);
      }
      break;

    case QUERY_COMPLETE_TYPE:
      if (value == null) {
        unsetQuery_complete_type();
      } else {
        setQuery_complete_type((Integer)value);
      }
      break;

    case PROACTIVE_REPLY:
      if (value == null) {
        unsetProactive_reply();
      } else {
        setProactive_reply((ProactiveReply)value);
      }
      break;

    case IS_SAY_HELLO:
      if (value == null) {
        unsetIs_say_hello();
      } else {
        setIs_say_hello((Boolean)value);
      }
      break;

    case SESSION:
      if (value == null) {
        unsetSession();
      } else {
        setSession((Session)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebug_info();
      } else {
        setDebug_info((DebugInfo)value);
      }
      break;

    case WORKFLOW_TERMINAL:
      if (value == null) {
        unsetWorkflow_terminal();
      } else {
        setWorkflow_terminal((Boolean)value);
      }
      break;

    case PORN_TYPE:
      if (value == null) {
        unsetPorn_type();
      } else {
        setPorn_type((PornType)value);
      }
      break;

    case GENE_REPLY:
      if (value == null) {
        unsetGene_reply();
      } else {
        setGene_reply((Boolean)value);
      }
      break;

    case RANDOM_REPLY:
      if (value == null) {
        unsetRandom_reply();
      } else {
        setRandom_reply((Boolean)value);
      }
      break;

    case LAST_QUERY_BASIC_SEG:
      if (value == null) {
        unsetLast_query_basic_seg();
      } else {
        setLast_query_basic_seg((List<String>)value);
      }
      break;

    case LAST_QUERY_PHRASE_SEG:
      if (value == null) {
        unsetLast_query_phrase_seg();
      } else {
        setLast_query_phrase_seg((List<String>)value);
      }
      break;

    case LAST_REPLY_BASIC_SEG:
      if (value == null) {
        unsetLast_reply_basic_seg();
      } else {
        setLast_reply_basic_seg((List<String>)value);
      }
      break;

    case LAST_REPLY_PHRASE_SEG:
      if (value == null) {
        unsetLast_reply_phrase_seg();
      } else {
        setLast_reply_phrase_seg((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case REPLY:
      return getReply();

    case IS_TERMINAL:
      return Boolean.valueOf(isIs_terminal());

    case LAST_QUERY:
      return getLast_query();

    case LAST_REPLY:
      return getLast_reply();

    case USER_ID:
      return getUser_id();

    case QUERY_BASIC_SEG:
      return getQuery_basic_seg();

    case QUERY_PHRASE_SEG:
      return getQuery_phrase_seg();

    case USER_INFO:
      return getUser_info();

    case RETURN_STATUS:
      return getReturn_status();

    case QUERY_TAGS:
      return getQuery_tags();

    case PREPROCESSED_QUERY:
      return getPreprocessed_query();

    case PREPROCESSED_QUERY_BASIC_SEG:
      return getPreprocessed_query_basic_seg();

    case PREPROCESSED_QUERY_PHRASE_SEG:
      return getPreprocessed_query_phrase_seg();

    case QUERY_PINYIN:
      return getQuery_pinyin();

    case POST_REPLYS:
      return getPost_replys();

    case SELECT_POST_SIZE:
      return Integer.valueOf(getSelect_post_size());

    case SELECT_MAX_REPLY_SIZE:
      return Integer.valueOf(getSelect_max_reply_size());

    case POST_THRESHOLD_RATIO:
      return Double.valueOf(getPost_threshold_ratio());

    case CONTEXT_POST_REPLYS:
      return getContext_post_replys();

    case REPLYS:
      return getReplys();

    case SELECT_REPLY_SIZE:
      return Integer.valueOf(getSelect_reply_size());

    case REPLY_THRESHOLD_RATIO:
      return Double.valueOf(getReply_threshold_ratio());

    case REPLY_RESORT_THRESHOLD:
      return Double.valueOf(getReply_resort_threshold());

    case REPLY_FROM_SERVICE:
      return getReply_from_service();

    case INTENTION_SCORE:
      return Double.valueOf(getIntention_score());

    case ANTI_VULGAR_REPLY:
      return Boolean.valueOf(isAnti_vulgar_reply());

    case STRICT_PORN_REPLY:
      return Boolean.valueOf(isStrict_porn_reply());

    case QUERY_IS_PORN:
      return Boolean.valueOf(isQuery_is_porn());

    case PORN_SCORE:
      return getPorn_score();

    case QUERY_PORN_CON:
      return getQuery_porn_con();

    case REPLY_PORN_CON:
      return getReply_porn_con();

    case USER_PROFILE:
      return getUser_profile();

    case QUERY_COMPLETE_TYPE:
      return Integer.valueOf(getQuery_complete_type());

    case PROACTIVE_REPLY:
      return getProactive_reply();

    case IS_SAY_HELLO:
      return Boolean.valueOf(isIs_say_hello());

    case SESSION:
      return getSession();

    case DEBUG_INFO:
      return getDebug_info();

    case WORKFLOW_TERMINAL:
      return Boolean.valueOf(isWorkflow_terminal());

    case PORN_TYPE:
      return getPorn_type();

    case GENE_REPLY:
      return Boolean.valueOf(isGene_reply());

    case RANDOM_REPLY:
      return Boolean.valueOf(isRandom_reply());

    case LAST_QUERY_BASIC_SEG:
      return getLast_query_basic_seg();

    case LAST_QUERY_PHRASE_SEG:
      return getLast_query_phrase_seg();

    case LAST_REPLY_BASIC_SEG:
      return getLast_reply_basic_seg();

    case LAST_REPLY_PHRASE_SEG:
      return getLast_reply_phrase_seg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case REPLY:
      return isSetReply();
    case IS_TERMINAL:
      return isSetIs_terminal();
    case LAST_QUERY:
      return isSetLast_query();
    case LAST_REPLY:
      return isSetLast_reply();
    case USER_ID:
      return isSetUser_id();
    case QUERY_BASIC_SEG:
      return isSetQuery_basic_seg();
    case QUERY_PHRASE_SEG:
      return isSetQuery_phrase_seg();
    case USER_INFO:
      return isSetUser_info();
    case RETURN_STATUS:
      return isSetReturn_status();
    case QUERY_TAGS:
      return isSetQuery_tags();
    case PREPROCESSED_QUERY:
      return isSetPreprocessed_query();
    case PREPROCESSED_QUERY_BASIC_SEG:
      return isSetPreprocessed_query_basic_seg();
    case PREPROCESSED_QUERY_PHRASE_SEG:
      return isSetPreprocessed_query_phrase_seg();
    case QUERY_PINYIN:
      return isSetQuery_pinyin();
    case POST_REPLYS:
      return isSetPost_replys();
    case SELECT_POST_SIZE:
      return isSetSelect_post_size();
    case SELECT_MAX_REPLY_SIZE:
      return isSetSelect_max_reply_size();
    case POST_THRESHOLD_RATIO:
      return isSetPost_threshold_ratio();
    case CONTEXT_POST_REPLYS:
      return isSetContext_post_replys();
    case REPLYS:
      return isSetReplys();
    case SELECT_REPLY_SIZE:
      return isSetSelect_reply_size();
    case REPLY_THRESHOLD_RATIO:
      return isSetReply_threshold_ratio();
    case REPLY_RESORT_THRESHOLD:
      return isSetReply_resort_threshold();
    case REPLY_FROM_SERVICE:
      return isSetReply_from_service();
    case INTENTION_SCORE:
      return isSetIntention_score();
    case ANTI_VULGAR_REPLY:
      return isSetAnti_vulgar_reply();
    case STRICT_PORN_REPLY:
      return isSetStrict_porn_reply();
    case QUERY_IS_PORN:
      return isSetQuery_is_porn();
    case PORN_SCORE:
      return isSetPorn_score();
    case QUERY_PORN_CON:
      return isSetQuery_porn_con();
    case REPLY_PORN_CON:
      return isSetReply_porn_con();
    case USER_PROFILE:
      return isSetUser_profile();
    case QUERY_COMPLETE_TYPE:
      return isSetQuery_complete_type();
    case PROACTIVE_REPLY:
      return isSetProactive_reply();
    case IS_SAY_HELLO:
      return isSetIs_say_hello();
    case SESSION:
      return isSetSession();
    case DEBUG_INFO:
      return isSetDebug_info();
    case WORKFLOW_TERMINAL:
      return isSetWorkflow_terminal();
    case PORN_TYPE:
      return isSetPorn_type();
    case GENE_REPLY:
      return isSetGene_reply();
    case RANDOM_REPLY:
      return isSetRandom_reply();
    case LAST_QUERY_BASIC_SEG:
      return isSetLast_query_basic_seg();
    case LAST_QUERY_PHRASE_SEG:
      return isSetLast_query_phrase_seg();
    case LAST_REPLY_BASIC_SEG:
      return isSetLast_reply_basic_seg();
    case LAST_REPLY_PHRASE_SEG:
      return isSetLast_reply_phrase_seg();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataBundle)
      return this.equals((DataBundle)that);
    return false;
  }

  public boolean equals(DataBundle that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_is_terminal = true && this.isSetIs_terminal();
    boolean that_present_is_terminal = true && that.isSetIs_terminal();
    if (this_present_is_terminal || that_present_is_terminal) {
      if (!(this_present_is_terminal && that_present_is_terminal))
        return false;
      if (this.is_terminal != that.is_terminal)
        return false;
    }

    boolean this_present_last_query = true && this.isSetLast_query();
    boolean that_present_last_query = true && that.isSetLast_query();
    if (this_present_last_query || that_present_last_query) {
      if (!(this_present_last_query && that_present_last_query))
        return false;
      if (!this.last_query.equals(that.last_query))
        return false;
    }

    boolean this_present_last_reply = true && this.isSetLast_reply();
    boolean that_present_last_reply = true && that.isSetLast_reply();
    if (this_present_last_reply || that_present_last_reply) {
      if (!(this_present_last_reply && that_present_last_reply))
        return false;
      if (!this.last_reply.equals(that.last_reply))
        return false;
    }

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_query_basic_seg = true && this.isSetQuery_basic_seg();
    boolean that_present_query_basic_seg = true && that.isSetQuery_basic_seg();
    if (this_present_query_basic_seg || that_present_query_basic_seg) {
      if (!(this_present_query_basic_seg && that_present_query_basic_seg))
        return false;
      if (!this.query_basic_seg.equals(that.query_basic_seg))
        return false;
    }

    boolean this_present_query_phrase_seg = true && this.isSetQuery_phrase_seg();
    boolean that_present_query_phrase_seg = true && that.isSetQuery_phrase_seg();
    if (this_present_query_phrase_seg || that_present_query_phrase_seg) {
      if (!(this_present_query_phrase_seg && that_present_query_phrase_seg))
        return false;
      if (!this.query_phrase_seg.equals(that.query_phrase_seg))
        return false;
    }

    boolean this_present_user_info = true && this.isSetUser_info();
    boolean that_present_user_info = true && that.isSetUser_info();
    if (this_present_user_info || that_present_user_info) {
      if (!(this_present_user_info && that_present_user_info))
        return false;
      if (!this.user_info.equals(that.user_info))
        return false;
    }

    boolean this_present_return_status = true && this.isSetReturn_status();
    boolean that_present_return_status = true && that.isSetReturn_status();
    if (this_present_return_status || that_present_return_status) {
      if (!(this_present_return_status && that_present_return_status))
        return false;
      if (!this.return_status.equals(that.return_status))
        return false;
    }

    boolean this_present_query_tags = true && this.isSetQuery_tags();
    boolean that_present_query_tags = true && that.isSetQuery_tags();
    if (this_present_query_tags || that_present_query_tags) {
      if (!(this_present_query_tags && that_present_query_tags))
        return false;
      if (!this.query_tags.equals(that.query_tags))
        return false;
    }

    boolean this_present_preprocessed_query = true && this.isSetPreprocessed_query();
    boolean that_present_preprocessed_query = true && that.isSetPreprocessed_query();
    if (this_present_preprocessed_query || that_present_preprocessed_query) {
      if (!(this_present_preprocessed_query && that_present_preprocessed_query))
        return false;
      if (!this.preprocessed_query.equals(that.preprocessed_query))
        return false;
    }

    boolean this_present_preprocessed_query_basic_seg = true && this.isSetPreprocessed_query_basic_seg();
    boolean that_present_preprocessed_query_basic_seg = true && that.isSetPreprocessed_query_basic_seg();
    if (this_present_preprocessed_query_basic_seg || that_present_preprocessed_query_basic_seg) {
      if (!(this_present_preprocessed_query_basic_seg && that_present_preprocessed_query_basic_seg))
        return false;
      if (!this.preprocessed_query_basic_seg.equals(that.preprocessed_query_basic_seg))
        return false;
    }

    boolean this_present_preprocessed_query_phrase_seg = true && this.isSetPreprocessed_query_phrase_seg();
    boolean that_present_preprocessed_query_phrase_seg = true && that.isSetPreprocessed_query_phrase_seg();
    if (this_present_preprocessed_query_phrase_seg || that_present_preprocessed_query_phrase_seg) {
      if (!(this_present_preprocessed_query_phrase_seg && that_present_preprocessed_query_phrase_seg))
        return false;
      if (!this.preprocessed_query_phrase_seg.equals(that.preprocessed_query_phrase_seg))
        return false;
    }

    boolean this_present_query_pinyin = true && this.isSetQuery_pinyin();
    boolean that_present_query_pinyin = true && that.isSetQuery_pinyin();
    if (this_present_query_pinyin || that_present_query_pinyin) {
      if (!(this_present_query_pinyin && that_present_query_pinyin))
        return false;
      if (!this.query_pinyin.equals(that.query_pinyin))
        return false;
    }

    boolean this_present_post_replys = true && this.isSetPost_replys();
    boolean that_present_post_replys = true && that.isSetPost_replys();
    if (this_present_post_replys || that_present_post_replys) {
      if (!(this_present_post_replys && that_present_post_replys))
        return false;
      if (!this.post_replys.equals(that.post_replys))
        return false;
    }

    boolean this_present_select_post_size = true && this.isSetSelect_post_size();
    boolean that_present_select_post_size = true && that.isSetSelect_post_size();
    if (this_present_select_post_size || that_present_select_post_size) {
      if (!(this_present_select_post_size && that_present_select_post_size))
        return false;
      if (this.select_post_size != that.select_post_size)
        return false;
    }

    boolean this_present_select_max_reply_size = true && this.isSetSelect_max_reply_size();
    boolean that_present_select_max_reply_size = true && that.isSetSelect_max_reply_size();
    if (this_present_select_max_reply_size || that_present_select_max_reply_size) {
      if (!(this_present_select_max_reply_size && that_present_select_max_reply_size))
        return false;
      if (this.select_max_reply_size != that.select_max_reply_size)
        return false;
    }

    boolean this_present_post_threshold_ratio = true && this.isSetPost_threshold_ratio();
    boolean that_present_post_threshold_ratio = true && that.isSetPost_threshold_ratio();
    if (this_present_post_threshold_ratio || that_present_post_threshold_ratio) {
      if (!(this_present_post_threshold_ratio && that_present_post_threshold_ratio))
        return false;
      if (this.post_threshold_ratio != that.post_threshold_ratio)
        return false;
    }

    boolean this_present_context_post_replys = true && this.isSetContext_post_replys();
    boolean that_present_context_post_replys = true && that.isSetContext_post_replys();
    if (this_present_context_post_replys || that_present_context_post_replys) {
      if (!(this_present_context_post_replys && that_present_context_post_replys))
        return false;
      if (!this.context_post_replys.equals(that.context_post_replys))
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_select_reply_size = true && this.isSetSelect_reply_size();
    boolean that_present_select_reply_size = true && that.isSetSelect_reply_size();
    if (this_present_select_reply_size || that_present_select_reply_size) {
      if (!(this_present_select_reply_size && that_present_select_reply_size))
        return false;
      if (this.select_reply_size != that.select_reply_size)
        return false;
    }

    boolean this_present_reply_threshold_ratio = true && this.isSetReply_threshold_ratio();
    boolean that_present_reply_threshold_ratio = true && that.isSetReply_threshold_ratio();
    if (this_present_reply_threshold_ratio || that_present_reply_threshold_ratio) {
      if (!(this_present_reply_threshold_ratio && that_present_reply_threshold_ratio))
        return false;
      if (this.reply_threshold_ratio != that.reply_threshold_ratio)
        return false;
    }

    boolean this_present_reply_resort_threshold = true && this.isSetReply_resort_threshold();
    boolean that_present_reply_resort_threshold = true && that.isSetReply_resort_threshold();
    if (this_present_reply_resort_threshold || that_present_reply_resort_threshold) {
      if (!(this_present_reply_resort_threshold && that_present_reply_resort_threshold))
        return false;
      if (this.reply_resort_threshold != that.reply_resort_threshold)
        return false;
    }

    boolean this_present_reply_from_service = true && this.isSetReply_from_service();
    boolean that_present_reply_from_service = true && that.isSetReply_from_service();
    if (this_present_reply_from_service || that_present_reply_from_service) {
      if (!(this_present_reply_from_service && that_present_reply_from_service))
        return false;
      if (!this.reply_from_service.equals(that.reply_from_service))
        return false;
    }

    boolean this_present_intention_score = true && this.isSetIntention_score();
    boolean that_present_intention_score = true && that.isSetIntention_score();
    if (this_present_intention_score || that_present_intention_score) {
      if (!(this_present_intention_score && that_present_intention_score))
        return false;
      if (this.intention_score != that.intention_score)
        return false;
    }

    boolean this_present_anti_vulgar_reply = true && this.isSetAnti_vulgar_reply();
    boolean that_present_anti_vulgar_reply = true && that.isSetAnti_vulgar_reply();
    if (this_present_anti_vulgar_reply || that_present_anti_vulgar_reply) {
      if (!(this_present_anti_vulgar_reply && that_present_anti_vulgar_reply))
        return false;
      if (this.anti_vulgar_reply != that.anti_vulgar_reply)
        return false;
    }

    boolean this_present_strict_porn_reply = true && this.isSetStrict_porn_reply();
    boolean that_present_strict_porn_reply = true && that.isSetStrict_porn_reply();
    if (this_present_strict_porn_reply || that_present_strict_porn_reply) {
      if (!(this_present_strict_porn_reply && that_present_strict_porn_reply))
        return false;
      if (this.strict_porn_reply != that.strict_porn_reply)
        return false;
    }

    boolean this_present_query_is_porn = true && this.isSetQuery_is_porn();
    boolean that_present_query_is_porn = true && that.isSetQuery_is_porn();
    if (this_present_query_is_porn || that_present_query_is_porn) {
      if (!(this_present_query_is_porn && that_present_query_is_porn))
        return false;
      if (this.query_is_porn != that.query_is_porn)
        return false;
    }

    boolean this_present_porn_score = true && this.isSetPorn_score();
    boolean that_present_porn_score = true && that.isSetPorn_score();
    if (this_present_porn_score || that_present_porn_score) {
      if (!(this_present_porn_score && that_present_porn_score))
        return false;
      if (!this.porn_score.equals(that.porn_score))
        return false;
    }

    boolean this_present_query_porn_con = true && this.isSetQuery_porn_con();
    boolean that_present_query_porn_con = true && that.isSetQuery_porn_con();
    if (this_present_query_porn_con || that_present_query_porn_con) {
      if (!(this_present_query_porn_con && that_present_query_porn_con))
        return false;
      if (!this.query_porn_con.equals(that.query_porn_con))
        return false;
    }

    boolean this_present_reply_porn_con = true && this.isSetReply_porn_con();
    boolean that_present_reply_porn_con = true && that.isSetReply_porn_con();
    if (this_present_reply_porn_con || that_present_reply_porn_con) {
      if (!(this_present_reply_porn_con && that_present_reply_porn_con))
        return false;
      if (!this.reply_porn_con.equals(that.reply_porn_con))
        return false;
    }

    boolean this_present_user_profile = true && this.isSetUser_profile();
    boolean that_present_user_profile = true && that.isSetUser_profile();
    if (this_present_user_profile || that_present_user_profile) {
      if (!(this_present_user_profile && that_present_user_profile))
        return false;
      if (!this.user_profile.equals(that.user_profile))
        return false;
    }

    boolean this_present_query_complete_type = true && this.isSetQuery_complete_type();
    boolean that_present_query_complete_type = true && that.isSetQuery_complete_type();
    if (this_present_query_complete_type || that_present_query_complete_type) {
      if (!(this_present_query_complete_type && that_present_query_complete_type))
        return false;
      if (this.query_complete_type != that.query_complete_type)
        return false;
    }

    boolean this_present_proactive_reply = true && this.isSetProactive_reply();
    boolean that_present_proactive_reply = true && that.isSetProactive_reply();
    if (this_present_proactive_reply || that_present_proactive_reply) {
      if (!(this_present_proactive_reply && that_present_proactive_reply))
        return false;
      if (!this.proactive_reply.equals(that.proactive_reply))
        return false;
    }

    boolean this_present_is_say_hello = true && this.isSetIs_say_hello();
    boolean that_present_is_say_hello = true && that.isSetIs_say_hello();
    if (this_present_is_say_hello || that_present_is_say_hello) {
      if (!(this_present_is_say_hello && that_present_is_say_hello))
        return false;
      if (this.is_say_hello != that.is_say_hello)
        return false;
    }

    boolean this_present_session = true && this.isSetSession();
    boolean that_present_session = true && that.isSetSession();
    if (this_present_session || that_present_session) {
      if (!(this_present_session && that_present_session))
        return false;
      if (!this.session.equals(that.session))
        return false;
    }

    boolean this_present_debug_info = true && this.isSetDebug_info();
    boolean that_present_debug_info = true && that.isSetDebug_info();
    if (this_present_debug_info || that_present_debug_info) {
      if (!(this_present_debug_info && that_present_debug_info))
        return false;
      if (!this.debug_info.equals(that.debug_info))
        return false;
    }

    boolean this_present_workflow_terminal = true && this.isSetWorkflow_terminal();
    boolean that_present_workflow_terminal = true && that.isSetWorkflow_terminal();
    if (this_present_workflow_terminal || that_present_workflow_terminal) {
      if (!(this_present_workflow_terminal && that_present_workflow_terminal))
        return false;
      if (this.workflow_terminal != that.workflow_terminal)
        return false;
    }

    boolean this_present_porn_type = true && this.isSetPorn_type();
    boolean that_present_porn_type = true && that.isSetPorn_type();
    if (this_present_porn_type || that_present_porn_type) {
      if (!(this_present_porn_type && that_present_porn_type))
        return false;
      if (!this.porn_type.equals(that.porn_type))
        return false;
    }

    boolean this_present_gene_reply = true && this.isSetGene_reply();
    boolean that_present_gene_reply = true && that.isSetGene_reply();
    if (this_present_gene_reply || that_present_gene_reply) {
      if (!(this_present_gene_reply && that_present_gene_reply))
        return false;
      if (this.gene_reply != that.gene_reply)
        return false;
    }

    boolean this_present_random_reply = true && this.isSetRandom_reply();
    boolean that_present_random_reply = true && that.isSetRandom_reply();
    if (this_present_random_reply || that_present_random_reply) {
      if (!(this_present_random_reply && that_present_random_reply))
        return false;
      if (this.random_reply != that.random_reply)
        return false;
    }

    boolean this_present_last_query_basic_seg = true && this.isSetLast_query_basic_seg();
    boolean that_present_last_query_basic_seg = true && that.isSetLast_query_basic_seg();
    if (this_present_last_query_basic_seg || that_present_last_query_basic_seg) {
      if (!(this_present_last_query_basic_seg && that_present_last_query_basic_seg))
        return false;
      if (!this.last_query_basic_seg.equals(that.last_query_basic_seg))
        return false;
    }

    boolean this_present_last_query_phrase_seg = true && this.isSetLast_query_phrase_seg();
    boolean that_present_last_query_phrase_seg = true && that.isSetLast_query_phrase_seg();
    if (this_present_last_query_phrase_seg || that_present_last_query_phrase_seg) {
      if (!(this_present_last_query_phrase_seg && that_present_last_query_phrase_seg))
        return false;
      if (!this.last_query_phrase_seg.equals(that.last_query_phrase_seg))
        return false;
    }

    boolean this_present_last_reply_basic_seg = true && this.isSetLast_reply_basic_seg();
    boolean that_present_last_reply_basic_seg = true && that.isSetLast_reply_basic_seg();
    if (this_present_last_reply_basic_seg || that_present_last_reply_basic_seg) {
      if (!(this_present_last_reply_basic_seg && that_present_last_reply_basic_seg))
        return false;
      if (!this.last_reply_basic_seg.equals(that.last_reply_basic_seg))
        return false;
    }

    boolean this_present_last_reply_phrase_seg = true && this.isSetLast_reply_phrase_seg();
    boolean that_present_last_reply_phrase_seg = true && that.isSetLast_reply_phrase_seg();
    if (this_present_last_reply_phrase_seg || that_present_last_reply_phrase_seg) {
      if (!(this_present_last_reply_phrase_seg && that_present_last_reply_phrase_seg))
        return false;
      if (!this.last_reply_phrase_seg.equals(that.last_reply_phrase_seg))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(DataBundle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_terminal()).compareTo(other.isSetIs_terminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_terminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_terminal, other.is_terminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_query()).compareTo(other.isSetLast_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_query, other.last_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_reply()).compareTo(other.isSetLast_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_reply, other.last_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_basic_seg()).compareTo(other.isSetQuery_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_basic_seg, other.query_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_phrase_seg()).compareTo(other.isSetQuery_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_phrase_seg, other.query_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_info()).compareTo(other.isSetUser_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_info, other.user_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturn_status()).compareTo(other.isSetReturn_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_status, other.return_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_tags()).compareTo(other.isSetQuery_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_tags, other.query_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreprocessed_query()).compareTo(other.isSetPreprocessed_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreprocessed_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preprocessed_query, other.preprocessed_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreprocessed_query_basic_seg()).compareTo(other.isSetPreprocessed_query_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreprocessed_query_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preprocessed_query_basic_seg, other.preprocessed_query_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreprocessed_query_phrase_seg()).compareTo(other.isSetPreprocessed_query_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreprocessed_query_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preprocessed_query_phrase_seg, other.preprocessed_query_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_pinyin()).compareTo(other.isSetQuery_pinyin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_pinyin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_pinyin, other.query_pinyin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_replys()).compareTo(other.isSetPost_replys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_replys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_replys, other.post_replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelect_post_size()).compareTo(other.isSetSelect_post_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect_post_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select_post_size, other.select_post_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelect_max_reply_size()).compareTo(other.isSetSelect_max_reply_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect_max_reply_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select_max_reply_size, other.select_max_reply_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_threshold_ratio()).compareTo(other.isSetPost_threshold_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_threshold_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_threshold_ratio, other.post_threshold_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContext_post_replys()).compareTo(other.isSetContext_post_replys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext_post_replys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context_post_replys, other.context_post_replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelect_reply_size()).compareTo(other.isSetSelect_reply_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect_reply_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select_reply_size, other.select_reply_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_threshold_ratio()).compareTo(other.isSetReply_threshold_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_threshold_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_threshold_ratio, other.reply_threshold_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_resort_threshold()).compareTo(other.isSetReply_resort_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_resort_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_resort_threshold, other.reply_resort_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_from_service()).compareTo(other.isSetReply_from_service());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_from_service()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_from_service, other.reply_from_service);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntention_score()).compareTo(other.isSetIntention_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntention_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intention_score, other.intention_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnti_vulgar_reply()).compareTo(other.isSetAnti_vulgar_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnti_vulgar_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anti_vulgar_reply, other.anti_vulgar_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrict_porn_reply()).compareTo(other.isSetStrict_porn_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_porn_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_porn_reply, other.strict_porn_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_is_porn()).compareTo(other.isSetQuery_is_porn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_is_porn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_is_porn, other.query_is_porn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorn_score()).compareTo(other.isSetPorn_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorn_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.porn_score, other.porn_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_porn_con()).compareTo(other.isSetQuery_porn_con());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_porn_con()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_porn_con, other.query_porn_con);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_porn_con()).compareTo(other.isSetReply_porn_con());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_porn_con()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_porn_con, other.reply_porn_con);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_profile()).compareTo(other.isSetUser_profile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_profile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_profile, other.user_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_complete_type()).compareTo(other.isSetQuery_complete_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_complete_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_complete_type, other.query_complete_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProactive_reply()).compareTo(other.isSetProactive_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProactive_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proactive_reply, other.proactive_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_say_hello()).compareTo(other.isSetIs_say_hello());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_say_hello()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_say_hello, other.is_say_hello);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSession()).compareTo(other.isSetSession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session, other.session);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_info()).compareTo(other.isSetDebug_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_info, other.debug_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflow_terminal()).compareTo(other.isSetWorkflow_terminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflow_terminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflow_terminal, other.workflow_terminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorn_type()).compareTo(other.isSetPorn_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorn_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.porn_type, other.porn_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGene_reply()).compareTo(other.isSetGene_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGene_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_reply, other.gene_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandom_reply()).compareTo(other.isSetRandom_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandom_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.random_reply, other.random_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_query_basic_seg()).compareTo(other.isSetLast_query_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_query_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_query_basic_seg, other.last_query_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_query_phrase_seg()).compareTo(other.isSetLast_query_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_query_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_query_phrase_seg, other.last_query_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_reply_basic_seg()).compareTo(other.isSetLast_reply_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_reply_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_reply_basic_seg, other.last_reply_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_reply_phrase_seg()).compareTo(other.isSetLast_reply_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_reply_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_reply_phrase_seg, other.last_reply_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("DataBundle(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetReply()) {
      if (!first) sb.append(", ");
      sb.append("reply:");
      if (this.reply == null) {
        sb.append("null");
      } else {
        sb.append(this.reply);
      }
      first = false;
    }
    if (isSetIs_terminal()) {
      if (!first) sb.append(", ");
      sb.append("is_terminal:");
      sb.append(this.is_terminal);
      first = false;
    }
    if (isSetLast_query()) {
      if (!first) sb.append(", ");
      sb.append("last_query:");
      if (this.last_query == null) {
        sb.append("null");
      } else {
        sb.append(this.last_query);
      }
      first = false;
    }
    if (isSetLast_reply()) {
      if (!first) sb.append(", ");
      sb.append("last_reply:");
      if (this.last_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.last_reply);
      }
      first = false;
    }
    if (isSetUser_id()) {
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
    }
    if (isSetQuery_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("query_basic_seg:");
      if (this.query_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.query_basic_seg);
      }
      first = false;
    }
    if (isSetQuery_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("query_phrase_seg:");
      if (this.query_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.query_phrase_seg);
      }
      first = false;
    }
    if (isSetUser_info()) {
      if (!first) sb.append(", ");
      sb.append("user_info:");
      if (this.user_info == null) {
        sb.append("null");
      } else {
        sb.append(this.user_info);
      }
      first = false;
    }
    if (isSetReturn_status()) {
      if (!first) sb.append(", ");
      sb.append("return_status:");
      if (this.return_status == null) {
        sb.append("null");
      } else {
        sb.append(this.return_status);
      }
      first = false;
    }
    if (isSetQuery_tags()) {
      if (!first) sb.append(", ");
      sb.append("query_tags:");
      if (this.query_tags == null) {
        sb.append("null");
      } else {
        sb.append(this.query_tags);
      }
      first = false;
    }
    if (isSetPreprocessed_query()) {
      if (!first) sb.append(", ");
      sb.append("preprocessed_query:");
      if (this.preprocessed_query == null) {
        sb.append("null");
      } else {
        sb.append(this.preprocessed_query);
      }
      first = false;
    }
    if (isSetPreprocessed_query_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("preprocessed_query_basic_seg:");
      if (this.preprocessed_query_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.preprocessed_query_basic_seg);
      }
      first = false;
    }
    if (isSetPreprocessed_query_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("preprocessed_query_phrase_seg:");
      if (this.preprocessed_query_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.preprocessed_query_phrase_seg);
      }
      first = false;
    }
    if (isSetQuery_pinyin()) {
      if (!first) sb.append(", ");
      sb.append("query_pinyin:");
      if (this.query_pinyin == null) {
        sb.append("null");
      } else {
        sb.append(this.query_pinyin);
      }
      first = false;
    }
    if (isSetPost_replys()) {
      if (!first) sb.append(", ");
      sb.append("post_replys:");
      if (this.post_replys == null) {
        sb.append("null");
      } else {
        sb.append(this.post_replys);
      }
      first = false;
    }
    if (isSetSelect_post_size()) {
      if (!first) sb.append(", ");
      sb.append("select_post_size:");
      sb.append(this.select_post_size);
      first = false;
    }
    if (isSetSelect_max_reply_size()) {
      if (!first) sb.append(", ");
      sb.append("select_max_reply_size:");
      sb.append(this.select_max_reply_size);
      first = false;
    }
    if (isSetPost_threshold_ratio()) {
      if (!first) sb.append(", ");
      sb.append("post_threshold_ratio:");
      sb.append(this.post_threshold_ratio);
      first = false;
    }
    if (isSetContext_post_replys()) {
      if (!first) sb.append(", ");
      sb.append("context_post_replys:");
      if (this.context_post_replys == null) {
        sb.append("null");
      } else {
        sb.append(this.context_post_replys);
      }
      first = false;
    }
    if (isSetReplys()) {
      if (!first) sb.append(", ");
      sb.append("replys:");
      if (this.replys == null) {
        sb.append("null");
      } else {
        sb.append(this.replys);
      }
      first = false;
    }
    if (isSetSelect_reply_size()) {
      if (!first) sb.append(", ");
      sb.append("select_reply_size:");
      sb.append(this.select_reply_size);
      first = false;
    }
    if (isSetReply_threshold_ratio()) {
      if (!first) sb.append(", ");
      sb.append("reply_threshold_ratio:");
      sb.append(this.reply_threshold_ratio);
      first = false;
    }
    if (isSetReply_resort_threshold()) {
      if (!first) sb.append(", ");
      sb.append("reply_resort_threshold:");
      sb.append(this.reply_resort_threshold);
      first = false;
    }
    if (isSetReply_from_service()) {
      if (!first) sb.append(", ");
      sb.append("reply_from_service:");
      if (this.reply_from_service == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_from_service);
      }
      first = false;
    }
    if (isSetIntention_score()) {
      if (!first) sb.append(", ");
      sb.append("intention_score:");
      sb.append(this.intention_score);
      first = false;
    }
    if (isSetAnti_vulgar_reply()) {
      if (!first) sb.append(", ");
      sb.append("anti_vulgar_reply:");
      sb.append(this.anti_vulgar_reply);
      first = false;
    }
    if (isSetStrict_porn_reply()) {
      if (!first) sb.append(", ");
      sb.append("strict_porn_reply:");
      sb.append(this.strict_porn_reply);
      first = false;
    }
    if (isSetQuery_is_porn()) {
      if (!first) sb.append(", ");
      sb.append("query_is_porn:");
      sb.append(this.query_is_porn);
      first = false;
    }
    if (isSetPorn_score()) {
      if (!first) sb.append(", ");
      sb.append("porn_score:");
      if (this.porn_score == null) {
        sb.append("null");
      } else {
        sb.append(this.porn_score);
      }
      first = false;
    }
    if (isSetQuery_porn_con()) {
      if (!first) sb.append(", ");
      sb.append("query_porn_con:");
      if (this.query_porn_con == null) {
        sb.append("null");
      } else {
        sb.append(this.query_porn_con);
      }
      first = false;
    }
    if (isSetReply_porn_con()) {
      if (!first) sb.append(", ");
      sb.append("reply_porn_con:");
      if (this.reply_porn_con == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_porn_con);
      }
      first = false;
    }
    if (isSetUser_profile()) {
      if (!first) sb.append(", ");
      sb.append("user_profile:");
      if (this.user_profile == null) {
        sb.append("null");
      } else {
        sb.append(this.user_profile);
      }
      first = false;
    }
    if (isSetQuery_complete_type()) {
      if (!first) sb.append(", ");
      sb.append("query_complete_type:");
      sb.append(this.query_complete_type);
      first = false;
    }
    if (isSetProactive_reply()) {
      if (!first) sb.append(", ");
      sb.append("proactive_reply:");
      if (this.proactive_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.proactive_reply);
      }
      first = false;
    }
    if (isSetIs_say_hello()) {
      if (!first) sb.append(", ");
      sb.append("is_say_hello:");
      sb.append(this.is_say_hello);
      first = false;
    }
    if (isSetSession()) {
      if (!first) sb.append(", ");
      sb.append("session:");
      if (this.session == null) {
        sb.append("null");
      } else {
        sb.append(this.session);
      }
      first = false;
    }
    if (isSetDebug_info()) {
      if (!first) sb.append(", ");
      sb.append("debug_info:");
      if (this.debug_info == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_info);
      }
      first = false;
    }
    if (isSetWorkflow_terminal()) {
      if (!first) sb.append(", ");
      sb.append("workflow_terminal:");
      sb.append(this.workflow_terminal);
      first = false;
    }
    if (isSetPorn_type()) {
      if (!first) sb.append(", ");
      sb.append("porn_type:");
      if (this.porn_type == null) {
        sb.append("null");
      } else {
        sb.append(this.porn_type);
      }
      first = false;
    }
    if (isSetGene_reply()) {
      if (!first) sb.append(", ");
      sb.append("gene_reply:");
      sb.append(this.gene_reply);
      first = false;
    }
    if (isSetRandom_reply()) {
      if (!first) sb.append(", ");
      sb.append("random_reply:");
      sb.append(this.random_reply);
      first = false;
    }
    if (isSetLast_query_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_query_basic_seg:");
      if (this.last_query_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_query_basic_seg);
      }
      first = false;
    }
    if (isSetLast_query_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_query_phrase_seg:");
      if (this.last_query_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_query_phrase_seg);
      }
      first = false;
    }
    if (isSetLast_reply_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_reply_basic_seg:");
      if (this.last_reply_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_reply_basic_seg);
      }
      first = false;
    }
    if (isSetLast_reply_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_reply_phrase_seg:");
      if (this.last_reply_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_reply_phrase_seg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (reply != null) {
      reply.validate();
    }
    if (user_info != null) {
      user_info.validate();
    }
    if (query_porn_con != null) {
      query_porn_con.validate();
    }
    if (reply_porn_con != null) {
      reply_porn_con.validate();
    }
    if (user_profile != null) {
      user_profile.validate();
    }
    if (proactive_reply != null) {
      proactive_reply.validate();
    }
    if (session != null) {
      session.validate();
    }
    if (debug_info != null) {
      debug_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataBundleStandardSchemeFactory implements SchemeFactory {
    public DataBundleStandardScheme getScheme() {
      return new DataBundleStandardScheme();
    }
  }

  private static class DataBundleStandardScheme extends StandardScheme<DataBundle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataBundle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reply = new Reply();
              struct.reply.read(iprot);
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_terminal = iprot.readBool();
              struct.setIs_terminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_query = iprot.readString();
              struct.setLast_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_reply = iprot.readString();
              struct.setLast_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QUERY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                struct.query_basic_seg = new ArrayList<String>(_list232.size);
                for (int _i233 = 0; _i233 < _list232.size; ++_i233)
                {
                  String _elem234;
                  _elem234 = iprot.readString();
                  struct.query_basic_seg.add(_elem234);
                }
                iprot.readListEnd();
              }
              struct.setQuery_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUERY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list235 = iprot.readListBegin();
                struct.query_phrase_seg = new ArrayList<String>(_list235.size);
                for (int _i236 = 0; _i236 < _list235.size; ++_i236)
                {
                  String _elem237;
                  _elem237 = iprot.readString();
                  struct.query_phrase_seg.add(_elem237);
                }
                iprot.readListEnd();
              }
              struct.setQuery_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_info = new UserInfo();
              struct.user_info.read(iprot);
              struct.setUser_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RETURN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.return_status = ReturnStatus.findByValue(iprot.readI32());
              struct.setReturn_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // QUERY_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map238 = iprot.readMapBegin();
                struct.query_tags = new HashMap<Short,Short>(2*_map238.size);
                for (int _i239 = 0; _i239 < _map238.size; ++_i239)
                {
                  short _key240;
                  short _val241;
                  _key240 = iprot.readI16();
                  _val241 = iprot.readI16();
                  struct.query_tags.put(_key240, _val241);
                }
                iprot.readMapEnd();
              }
              struct.setQuery_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PREPROCESSED_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preprocessed_query = iprot.readString();
              struct.setPreprocessed_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PREPROCESSED_QUERY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                struct.preprocessed_query_basic_seg = new ArrayList<String>(_list242.size);
                for (int _i243 = 0; _i243 < _list242.size; ++_i243)
                {
                  String _elem244;
                  _elem244 = iprot.readString();
                  struct.preprocessed_query_basic_seg.add(_elem244);
                }
                iprot.readListEnd();
              }
              struct.setPreprocessed_query_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PREPROCESSED_QUERY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list245 = iprot.readListBegin();
                struct.preprocessed_query_phrase_seg = new ArrayList<String>(_list245.size);
                for (int _i246 = 0; _i246 < _list245.size; ++_i246)
                {
                  String _elem247;
                  _elem247 = iprot.readString();
                  struct.preprocessed_query_phrase_seg.add(_elem247);
                }
                iprot.readListEnd();
              }
              struct.setPreprocessed_query_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // QUERY_PINYIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_pinyin = iprot.readString();
              struct.setQuery_pinyinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // POST_REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                struct.post_replys = new ArrayList<PostReply>(_list248.size);
                for (int _i249 = 0; _i249 < _list248.size; ++_i249)
                {
                  PostReply _elem250;
                  _elem250 = new PostReply();
                  _elem250.read(iprot);
                  struct.post_replys.add(_elem250);
                }
                iprot.readListEnd();
              }
              struct.setPost_replysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SELECT_POST_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.select_post_size = iprot.readI32();
              struct.setSelect_post_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SELECT_MAX_REPLY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.select_max_reply_size = iprot.readI32();
              struct.setSelect_max_reply_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // POST_THRESHOLD_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.post_threshold_ratio = iprot.readDouble();
              struct.setPost_threshold_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CONTEXT_POST_REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list251 = iprot.readListBegin();
                struct.context_post_replys = new ArrayList<ContextPostReply>(_list251.size);
                for (int _i252 = 0; _i252 < _list251.size; ++_i252)
                {
                  ContextPostReply _elem253;
                  _elem253 = new ContextPostReply();
                  _elem253.read(iprot);
                  struct.context_post_replys.add(_elem253);
                }
                iprot.readListEnd();
              }
              struct.setContext_post_replysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list254 = iprot.readListBegin();
                struct.replys = new ArrayList<Reply>(_list254.size);
                for (int _i255 = 0; _i255 < _list254.size; ++_i255)
                {
                  Reply _elem256;
                  _elem256 = new Reply();
                  _elem256.read(iprot);
                  struct.replys.add(_elem256);
                }
                iprot.readListEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // SELECT_REPLY_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.select_reply_size = iprot.readI32();
              struct.setSelect_reply_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // REPLY_THRESHOLD_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reply_threshold_ratio = iprot.readDouble();
              struct.setReply_threshold_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // REPLY_RESORT_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reply_resort_threshold = iprot.readDouble();
              struct.setReply_resort_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // REPLY_FROM_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
              struct.setReply_from_serviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // INTENTION_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.intention_score = iprot.readDouble();
              struct.setIntention_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // ANTI_VULGAR_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.anti_vulgar_reply = iprot.readBool();
              struct.setAnti_vulgar_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // STRICT_PORN_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_porn_reply = iprot.readBool();
              struct.setStrict_porn_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // QUERY_IS_PORN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.query_is_porn = iprot.readBool();
              struct.setQuery_is_pornIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // PORN_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list257 = iprot.readListBegin();
                struct.porn_score = new ArrayList<String>(_list257.size);
                for (int _i258 = 0; _i258 < _list257.size; ++_i258)
                {
                  String _elem259;
                  _elem259 = iprot.readString();
                  struct.porn_score.add(_elem259);
                }
                iprot.readListEnd();
              }
              struct.setPorn_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // QUERY_PORN_CON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_porn_con = new QueryPornCondition();
              struct.query_porn_con.read(iprot);
              struct.setQuery_porn_conIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // REPLY_PORN_CON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reply_porn_con = new ReplyPornCondition();
              struct.reply_porn_con.read(iprot);
              struct.setReply_porn_conIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // USER_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_profile = new UserProfile();
              struct.user_profile.read(iprot);
              struct.setUser_profileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // QUERY_COMPLETE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_complete_type = iprot.readI32();
              struct.setQuery_complete_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // PROACTIVE_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.proactive_reply = new ProactiveReply();
              struct.proactive_reply.read(iprot);
              struct.setProactive_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // IS_SAY_HELLO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_say_hello = iprot.readBool();
              struct.setIs_say_helloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.session = new Session();
              struct.session.read(iprot);
              struct.setSessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // DEBUG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_info = new DebugInfo();
              struct.debug_info.read(iprot);
              struct.setDebug_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // WORKFLOW_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.workflow_terminal = iprot.readBool();
              struct.setWorkflow_terminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // PORN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.porn_type = PornType.findByValue(iprot.readI32());
              struct.setPorn_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // GENE_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gene_reply = iprot.readBool();
              struct.setGene_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // RANDOM_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.random_reply = iprot.readBool();
              struct.setRandom_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // LAST_QUERY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list260 = iprot.readListBegin();
                struct.last_query_basic_seg = new ArrayList<String>(_list260.size);
                for (int _i261 = 0; _i261 < _list260.size; ++_i261)
                {
                  String _elem262;
                  _elem262 = iprot.readString();
                  struct.last_query_basic_seg.add(_elem262);
                }
                iprot.readListEnd();
              }
              struct.setLast_query_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // LAST_QUERY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list263 = iprot.readListBegin();
                struct.last_query_phrase_seg = new ArrayList<String>(_list263.size);
                for (int _i264 = 0; _i264 < _list263.size; ++_i264)
                {
                  String _elem265;
                  _elem265 = iprot.readString();
                  struct.last_query_phrase_seg.add(_elem265);
                }
                iprot.readListEnd();
              }
              struct.setLast_query_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // LAST_REPLY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                struct.last_reply_basic_seg = new ArrayList<String>(_list266.size);
                for (int _i267 = 0; _i267 < _list266.size; ++_i267)
                {
                  String _elem268;
                  _elem268 = iprot.readString();
                  struct.last_reply_basic_seg.add(_elem268);
                }
                iprot.readListEnd();
              }
              struct.setLast_reply_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // LAST_REPLY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list269 = iprot.readListBegin();
                struct.last_reply_phrase_seg = new ArrayList<String>(_list269.size);
                for (int _i270 = 0; _i270 < _list269.size; ++_i270)
                {
                  String _elem271;
                  _elem271 = iprot.readString();
                  struct.last_reply_phrase_seg.add(_elem271);
                }
                iprot.readListEnd();
              }
              struct.setLast_reply_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataBundle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply != null) {
        if (struct.isSetReply()) {
          oprot.writeFieldBegin(REPLY_FIELD_DESC);
          struct.reply.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_terminal()) {
        oprot.writeFieldBegin(IS_TERMINAL_FIELD_DESC);
        oprot.writeBool(struct.is_terminal);
        oprot.writeFieldEnd();
      }
      if (struct.last_query != null) {
        if (struct.isSetLast_query()) {
          oprot.writeFieldBegin(LAST_QUERY_FIELD_DESC);
          oprot.writeString(struct.last_query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_reply != null) {
        if (struct.isSetLast_reply()) {
          oprot.writeFieldBegin(LAST_REPLY_FIELD_DESC);
          oprot.writeString(struct.last_reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_id != null) {
        if (struct.isSetUser_id()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_basic_seg != null) {
        if (struct.isSetQuery_basic_seg()) {
          oprot.writeFieldBegin(QUERY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.query_basic_seg.size()));
            for (String _iter272 : struct.query_basic_seg)
            {
              oprot.writeString(_iter272);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_phrase_seg != null) {
        if (struct.isSetQuery_phrase_seg()) {
          oprot.writeFieldBegin(QUERY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.query_phrase_seg.size()));
            for (String _iter273 : struct.query_phrase_seg)
            {
              oprot.writeString(_iter273);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_info != null) {
        if (struct.isSetUser_info()) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.user_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.return_status != null) {
        if (struct.isSetReturn_status()) {
          oprot.writeFieldBegin(RETURN_STATUS_FIELD_DESC);
          oprot.writeI32(struct.return_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_tags != null) {
        if (struct.isSetQuery_tags()) {
          oprot.writeFieldBegin(QUERY_TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.query_tags.size()));
            for (Map.Entry<Short, Short> _iter274 : struct.query_tags.entrySet())
            {
              oprot.writeI16(_iter274.getKey());
              oprot.writeI16(_iter274.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preprocessed_query != null) {
        if (struct.isSetPreprocessed_query()) {
          oprot.writeFieldBegin(PREPROCESSED_QUERY_FIELD_DESC);
          oprot.writeString(struct.preprocessed_query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.preprocessed_query_basic_seg != null) {
        if (struct.isSetPreprocessed_query_basic_seg()) {
          oprot.writeFieldBegin(PREPROCESSED_QUERY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.preprocessed_query_basic_seg.size()));
            for (String _iter275 : struct.preprocessed_query_basic_seg)
            {
              oprot.writeString(_iter275);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.preprocessed_query_phrase_seg != null) {
        if (struct.isSetPreprocessed_query_phrase_seg()) {
          oprot.writeFieldBegin(PREPROCESSED_QUERY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.preprocessed_query_phrase_seg.size()));
            for (String _iter276 : struct.preprocessed_query_phrase_seg)
            {
              oprot.writeString(_iter276);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_pinyin != null) {
        if (struct.isSetQuery_pinyin()) {
          oprot.writeFieldBegin(QUERY_PINYIN_FIELD_DESC);
          oprot.writeString(struct.query_pinyin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.post_replys != null) {
        if (struct.isSetPost_replys()) {
          oprot.writeFieldBegin(POST_REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.post_replys.size()));
            for (PostReply _iter277 : struct.post_replys)
            {
              _iter277.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSelect_post_size()) {
        oprot.writeFieldBegin(SELECT_POST_SIZE_FIELD_DESC);
        oprot.writeI32(struct.select_post_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSelect_max_reply_size()) {
        oprot.writeFieldBegin(SELECT_MAX_REPLY_SIZE_FIELD_DESC);
        oprot.writeI32(struct.select_max_reply_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPost_threshold_ratio()) {
        oprot.writeFieldBegin(POST_THRESHOLD_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.post_threshold_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.context_post_replys != null) {
        if (struct.isSetContext_post_replys()) {
          oprot.writeFieldBegin(CONTEXT_POST_REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.context_post_replys.size()));
            for (ContextPostReply _iter278 : struct.context_post_replys)
            {
              _iter278.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.replys != null) {
        if (struct.isSetReplys()) {
          oprot.writeFieldBegin(REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replys.size()));
            for (Reply _iter279 : struct.replys)
            {
              _iter279.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSelect_reply_size()) {
        oprot.writeFieldBegin(SELECT_REPLY_SIZE_FIELD_DESC);
        oprot.writeI32(struct.select_reply_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReply_threshold_ratio()) {
        oprot.writeFieldBegin(REPLY_THRESHOLD_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.reply_threshold_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReply_resort_threshold()) {
        oprot.writeFieldBegin(REPLY_RESORT_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.reply_resort_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.reply_from_service != null) {
        if (struct.isSetReply_from_service()) {
          oprot.writeFieldBegin(REPLY_FROM_SERVICE_FIELD_DESC);
          oprot.writeI32(struct.reply_from_service.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntention_score()) {
        oprot.writeFieldBegin(INTENTION_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.intention_score);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnti_vulgar_reply()) {
        oprot.writeFieldBegin(ANTI_VULGAR_REPLY_FIELD_DESC);
        oprot.writeBool(struct.anti_vulgar_reply);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrict_porn_reply()) {
        oprot.writeFieldBegin(STRICT_PORN_REPLY_FIELD_DESC);
        oprot.writeBool(struct.strict_porn_reply);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuery_is_porn()) {
        oprot.writeFieldBegin(QUERY_IS_PORN_FIELD_DESC);
        oprot.writeBool(struct.query_is_porn);
        oprot.writeFieldEnd();
      }
      if (struct.porn_score != null) {
        if (struct.isSetPorn_score()) {
          oprot.writeFieldBegin(PORN_SCORE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.porn_score.size()));
            for (String _iter280 : struct.porn_score)
            {
              oprot.writeString(_iter280);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_porn_con != null) {
        if (struct.isSetQuery_porn_con()) {
          oprot.writeFieldBegin(QUERY_PORN_CON_FIELD_DESC);
          struct.query_porn_con.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_porn_con != null) {
        if (struct.isSetReply_porn_con()) {
          oprot.writeFieldBegin(REPLY_PORN_CON_FIELD_DESC);
          struct.reply_porn_con.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_profile != null) {
        if (struct.isSetUser_profile()) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.user_profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQuery_complete_type()) {
        oprot.writeFieldBegin(QUERY_COMPLETE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.query_complete_type);
        oprot.writeFieldEnd();
      }
      if (struct.proactive_reply != null) {
        if (struct.isSetProactive_reply()) {
          oprot.writeFieldBegin(PROACTIVE_REPLY_FIELD_DESC);
          struct.proactive_reply.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_say_hello()) {
        oprot.writeFieldBegin(IS_SAY_HELLO_FIELD_DESC);
        oprot.writeBool(struct.is_say_hello);
        oprot.writeFieldEnd();
      }
      if (struct.session != null) {
        if (struct.isSetSession()) {
          oprot.writeFieldBegin(SESSION_FIELD_DESC);
          struct.session.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_info != null) {
        if (struct.isSetDebug_info()) {
          oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
          struct.debug_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWorkflow_terminal()) {
        oprot.writeFieldBegin(WORKFLOW_TERMINAL_FIELD_DESC);
        oprot.writeBool(struct.workflow_terminal);
        oprot.writeFieldEnd();
      }
      if (struct.porn_type != null) {
        if (struct.isSetPorn_type()) {
          oprot.writeFieldBegin(PORN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.porn_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGene_reply()) {
        oprot.writeFieldBegin(GENE_REPLY_FIELD_DESC);
        oprot.writeBool(struct.gene_reply);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRandom_reply()) {
        oprot.writeFieldBegin(RANDOM_REPLY_FIELD_DESC);
        oprot.writeBool(struct.random_reply);
        oprot.writeFieldEnd();
      }
      if (struct.last_query_basic_seg != null) {
        if (struct.isSetLast_query_basic_seg()) {
          oprot.writeFieldBegin(LAST_QUERY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_query_basic_seg.size()));
            for (String _iter281 : struct.last_query_basic_seg)
            {
              oprot.writeString(_iter281);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_query_phrase_seg != null) {
        if (struct.isSetLast_query_phrase_seg()) {
          oprot.writeFieldBegin(LAST_QUERY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_query_phrase_seg.size()));
            for (String _iter282 : struct.last_query_phrase_seg)
            {
              oprot.writeString(_iter282);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_reply_basic_seg != null) {
        if (struct.isSetLast_reply_basic_seg()) {
          oprot.writeFieldBegin(LAST_REPLY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_reply_basic_seg.size()));
            for (String _iter283 : struct.last_reply_basic_seg)
            {
              oprot.writeString(_iter283);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_reply_phrase_seg != null) {
        if (struct.isSetLast_reply_phrase_seg()) {
          oprot.writeFieldBegin(LAST_REPLY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_reply_phrase_seg.size()));
            for (String _iter284 : struct.last_reply_phrase_seg)
            {
              oprot.writeString(_iter284);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataBundleTupleSchemeFactory implements SchemeFactory {
    public DataBundleTupleScheme getScheme() {
      return new DataBundleTupleScheme();
    }
  }

  private static class DataBundleTupleScheme extends TupleScheme<DataBundle> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, DataBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetReply()) {
        optionals.set(1);
      }
      if (struct.isSetIs_terminal()) {
        optionals.set(2);
      }
      if (struct.isSetLast_query()) {
        optionals.set(3);
      }
      if (struct.isSetLast_reply()) {
        optionals.set(4);
      }
      if (struct.isSetUser_id()) {
        optionals.set(5);
      }
      if (struct.isSetQuery_basic_seg()) {
        optionals.set(6);
      }
      if (struct.isSetQuery_phrase_seg()) {
        optionals.set(7);
      }
      if (struct.isSetUser_info()) {
        optionals.set(8);
      }
      if (struct.isSetReturn_status()) {
        optionals.set(9);
      }
      if (struct.isSetQuery_tags()) {
        optionals.set(10);
      }
      if (struct.isSetPreprocessed_query()) {
        optionals.set(11);
      }
      if (struct.isSetPreprocessed_query_basic_seg()) {
        optionals.set(12);
      }
      if (struct.isSetPreprocessed_query_phrase_seg()) {
        optionals.set(13);
      }
      if (struct.isSetQuery_pinyin()) {
        optionals.set(14);
      }
      if (struct.isSetPost_replys()) {
        optionals.set(15);
      }
      if (struct.isSetSelect_post_size()) {
        optionals.set(16);
      }
      if (struct.isSetSelect_max_reply_size()) {
        optionals.set(17);
      }
      if (struct.isSetPost_threshold_ratio()) {
        optionals.set(18);
      }
      if (struct.isSetContext_post_replys()) {
        optionals.set(19);
      }
      if (struct.isSetReplys()) {
        optionals.set(20);
      }
      if (struct.isSetSelect_reply_size()) {
        optionals.set(21);
      }
      if (struct.isSetReply_threshold_ratio()) {
        optionals.set(22);
      }
      if (struct.isSetReply_resort_threshold()) {
        optionals.set(23);
      }
      if (struct.isSetReply_from_service()) {
        optionals.set(24);
      }
      if (struct.isSetIntention_score()) {
        optionals.set(25);
      }
      if (struct.isSetAnti_vulgar_reply()) {
        optionals.set(26);
      }
      if (struct.isSetStrict_porn_reply()) {
        optionals.set(27);
      }
      if (struct.isSetQuery_is_porn()) {
        optionals.set(28);
      }
      if (struct.isSetPorn_score()) {
        optionals.set(29);
      }
      if (struct.isSetQuery_porn_con()) {
        optionals.set(30);
      }
      if (struct.isSetReply_porn_con()) {
        optionals.set(31);
      }
      if (struct.isSetUser_profile()) {
        optionals.set(32);
      }
      if (struct.isSetQuery_complete_type()) {
        optionals.set(33);
      }
      if (struct.isSetProactive_reply()) {
        optionals.set(34);
      }
      if (struct.isSetIs_say_hello()) {
        optionals.set(35);
      }
      if (struct.isSetSession()) {
        optionals.set(36);
      }
      if (struct.isSetDebug_info()) {
        optionals.set(37);
      }
      if (struct.isSetWorkflow_terminal()) {
        optionals.set(38);
      }
      if (struct.isSetPorn_type()) {
        optionals.set(39);
      }
      if (struct.isSetGene_reply()) {
        optionals.set(40);
      }
      if (struct.isSetRandom_reply()) {
        optionals.set(41);
      }
      if (struct.isSetLast_query_basic_seg()) {
        optionals.set(42);
      }
      if (struct.isSetLast_query_phrase_seg()) {
        optionals.set(43);
      }
      if (struct.isSetLast_reply_basic_seg()) {
        optionals.set(44);
      }
      if (struct.isSetLast_reply_phrase_seg()) {
        optionals.set(45);
      }
      oprot.writeBitSet(optionals, 46);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetReply()) {
        struct.reply.write(oprot);
      }
      if (struct.isSetIs_terminal()) {
        oprot.writeBool(struct.is_terminal);
      }
      if (struct.isSetLast_query()) {
        oprot.writeString(struct.last_query);
      }
      if (struct.isSetLast_reply()) {
        oprot.writeString(struct.last_reply);
      }
      if (struct.isSetUser_id()) {
        oprot.writeString(struct.user_id);
      }
      if (struct.isSetQuery_basic_seg()) {
        {
          oprot.writeI32(struct.query_basic_seg.size());
          for (String _iter285 : struct.query_basic_seg)
          {
            oprot.writeString(_iter285);
          }
        }
      }
      if (struct.isSetQuery_phrase_seg()) {
        {
          oprot.writeI32(struct.query_phrase_seg.size());
          for (String _iter286 : struct.query_phrase_seg)
          {
            oprot.writeString(_iter286);
          }
        }
      }
      if (struct.isSetUser_info()) {
        struct.user_info.write(oprot);
      }
      if (struct.isSetReturn_status()) {
        oprot.writeI32(struct.return_status.getValue());
      }
      if (struct.isSetQuery_tags()) {
        {
          oprot.writeI32(struct.query_tags.size());
          for (Map.Entry<Short, Short> _iter287 : struct.query_tags.entrySet())
          {
            oprot.writeI16(_iter287.getKey());
            oprot.writeI16(_iter287.getValue());
          }
        }
      }
      if (struct.isSetPreprocessed_query()) {
        oprot.writeString(struct.preprocessed_query);
      }
      if (struct.isSetPreprocessed_query_basic_seg()) {
        {
          oprot.writeI32(struct.preprocessed_query_basic_seg.size());
          for (String _iter288 : struct.preprocessed_query_basic_seg)
          {
            oprot.writeString(_iter288);
          }
        }
      }
      if (struct.isSetPreprocessed_query_phrase_seg()) {
        {
          oprot.writeI32(struct.preprocessed_query_phrase_seg.size());
          for (String _iter289 : struct.preprocessed_query_phrase_seg)
          {
            oprot.writeString(_iter289);
          }
        }
      }
      if (struct.isSetQuery_pinyin()) {
        oprot.writeString(struct.query_pinyin);
      }
      if (struct.isSetPost_replys()) {
        {
          oprot.writeI32(struct.post_replys.size());
          for (PostReply _iter290 : struct.post_replys)
          {
            _iter290.write(oprot);
          }
        }
      }
      if (struct.isSetSelect_post_size()) {
        oprot.writeI32(struct.select_post_size);
      }
      if (struct.isSetSelect_max_reply_size()) {
        oprot.writeI32(struct.select_max_reply_size);
      }
      if (struct.isSetPost_threshold_ratio()) {
        oprot.writeDouble(struct.post_threshold_ratio);
      }
      if (struct.isSetContext_post_replys()) {
        {
          oprot.writeI32(struct.context_post_replys.size());
          for (ContextPostReply _iter291 : struct.context_post_replys)
          {
            _iter291.write(oprot);
          }
        }
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Reply _iter292 : struct.replys)
          {
            _iter292.write(oprot);
          }
        }
      }
      if (struct.isSetSelect_reply_size()) {
        oprot.writeI32(struct.select_reply_size);
      }
      if (struct.isSetReply_threshold_ratio()) {
        oprot.writeDouble(struct.reply_threshold_ratio);
      }
      if (struct.isSetReply_resort_threshold()) {
        oprot.writeDouble(struct.reply_resort_threshold);
      }
      if (struct.isSetReply_from_service()) {
        oprot.writeI32(struct.reply_from_service.getValue());
      }
      if (struct.isSetIntention_score()) {
        oprot.writeDouble(struct.intention_score);
      }
      if (struct.isSetAnti_vulgar_reply()) {
        oprot.writeBool(struct.anti_vulgar_reply);
      }
      if (struct.isSetStrict_porn_reply()) {
        oprot.writeBool(struct.strict_porn_reply);
      }
      if (struct.isSetQuery_is_porn()) {
        oprot.writeBool(struct.query_is_porn);
      }
      if (struct.isSetPorn_score()) {
        {
          oprot.writeI32(struct.porn_score.size());
          for (String _iter293 : struct.porn_score)
          {
            oprot.writeString(_iter293);
          }
        }
      }
      if (struct.isSetQuery_porn_con()) {
        struct.query_porn_con.write(oprot);
      }
      if (struct.isSetReply_porn_con()) {
        struct.reply_porn_con.write(oprot);
      }
      if (struct.isSetUser_profile()) {
        struct.user_profile.write(oprot);
      }
      if (struct.isSetQuery_complete_type()) {
        oprot.writeI32(struct.query_complete_type);
      }
      if (struct.isSetProactive_reply()) {
        struct.proactive_reply.write(oprot);
      }
      if (struct.isSetIs_say_hello()) {
        oprot.writeBool(struct.is_say_hello);
      }
      if (struct.isSetSession()) {
        struct.session.write(oprot);
      }
      if (struct.isSetDebug_info()) {
        struct.debug_info.write(oprot);
      }
      if (struct.isSetWorkflow_terminal()) {
        oprot.writeBool(struct.workflow_terminal);
      }
      if (struct.isSetPorn_type()) {
        oprot.writeI32(struct.porn_type.getValue());
      }
      if (struct.isSetGene_reply()) {
        oprot.writeBool(struct.gene_reply);
      }
      if (struct.isSetRandom_reply()) {
        oprot.writeBool(struct.random_reply);
      }
      if (struct.isSetLast_query_basic_seg()) {
        {
          oprot.writeI32(struct.last_query_basic_seg.size());
          for (String _iter294 : struct.last_query_basic_seg)
          {
            oprot.writeString(_iter294);
          }
        }
      }
      if (struct.isSetLast_query_phrase_seg()) {
        {
          oprot.writeI32(struct.last_query_phrase_seg.size());
          for (String _iter295 : struct.last_query_phrase_seg)
          {
            oprot.writeString(_iter295);
          }
        }
      }
      if (struct.isSetLast_reply_basic_seg()) {
        {
          oprot.writeI32(struct.last_reply_basic_seg.size());
          for (String _iter296 : struct.last_reply_basic_seg)
          {
            oprot.writeString(_iter296);
          }
        }
      }
      if (struct.isSetLast_reply_phrase_seg()) {
        {
          oprot.writeI32(struct.last_reply_phrase_seg.size());
          for (String _iter297 : struct.last_reply_phrase_seg)
          {
            oprot.writeString(_iter297);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, DataBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(46);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reply = new Reply();
        struct.reply.read(iprot);
        struct.setReplyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_terminal = iprot.readBool();
        struct.setIs_terminalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.last_query = iprot.readString();
        struct.setLast_queryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.last_reply = iprot.readString();
        struct.setLast_replyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user_id = iprot.readString();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list298 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.query_basic_seg = new ArrayList<String>(_list298.size);
          for (int _i299 = 0; _i299 < _list298.size; ++_i299)
          {
            String _elem300;
            _elem300 = iprot.readString();
            struct.query_basic_seg.add(_elem300);
          }
        }
        struct.setQuery_basic_segIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.query_phrase_seg = new ArrayList<String>(_list301.size);
          for (int _i302 = 0; _i302 < _list301.size; ++_i302)
          {
            String _elem303;
            _elem303 = iprot.readString();
            struct.query_phrase_seg.add(_elem303);
          }
        }
        struct.setQuery_phrase_segIsSet(true);
      }
      if (incoming.get(8)) {
        struct.user_info = new UserInfo();
        struct.user_info.read(iprot);
        struct.setUser_infoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.return_status = ReturnStatus.findByValue(iprot.readI32());
        struct.setReturn_statusIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map304 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.query_tags = new HashMap<Short,Short>(2*_map304.size);
          for (int _i305 = 0; _i305 < _map304.size; ++_i305)
          {
            short _key306;
            short _val307;
            _key306 = iprot.readI16();
            _val307 = iprot.readI16();
            struct.query_tags.put(_key306, _val307);
          }
        }
        struct.setQuery_tagsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.preprocessed_query = iprot.readString();
        struct.setPreprocessed_queryIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list308 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.preprocessed_query_basic_seg = new ArrayList<String>(_list308.size);
          for (int _i309 = 0; _i309 < _list308.size; ++_i309)
          {
            String _elem310;
            _elem310 = iprot.readString();
            struct.preprocessed_query_basic_seg.add(_elem310);
          }
        }
        struct.setPreprocessed_query_basic_segIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.preprocessed_query_phrase_seg = new ArrayList<String>(_list311.size);
          for (int _i312 = 0; _i312 < _list311.size; ++_i312)
          {
            String _elem313;
            _elem313 = iprot.readString();
            struct.preprocessed_query_phrase_seg.add(_elem313);
          }
        }
        struct.setPreprocessed_query_phrase_segIsSet(true);
      }
      if (incoming.get(14)) {
        struct.query_pinyin = iprot.readString();
        struct.setQuery_pinyinIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list314 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.post_replys = new ArrayList<PostReply>(_list314.size);
          for (int _i315 = 0; _i315 < _list314.size; ++_i315)
          {
            PostReply _elem316;
            _elem316 = new PostReply();
            _elem316.read(iprot);
            struct.post_replys.add(_elem316);
          }
        }
        struct.setPost_replysIsSet(true);
      }
      if (incoming.get(16)) {
        struct.select_post_size = iprot.readI32();
        struct.setSelect_post_sizeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.select_max_reply_size = iprot.readI32();
        struct.setSelect_max_reply_sizeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.post_threshold_ratio = iprot.readDouble();
        struct.setPost_threshold_ratioIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list317 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.context_post_replys = new ArrayList<ContextPostReply>(_list317.size);
          for (int _i318 = 0; _i318 < _list317.size; ++_i318)
          {
            ContextPostReply _elem319;
            _elem319 = new ContextPostReply();
            _elem319.read(iprot);
            struct.context_post_replys.add(_elem319);
          }
        }
        struct.setContext_post_replysIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list320 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replys = new ArrayList<Reply>(_list320.size);
          for (int _i321 = 0; _i321 < _list320.size; ++_i321)
          {
            Reply _elem322;
            _elem322 = new Reply();
            _elem322.read(iprot);
            struct.replys.add(_elem322);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(21)) {
        struct.select_reply_size = iprot.readI32();
        struct.setSelect_reply_sizeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.reply_threshold_ratio = iprot.readDouble();
        struct.setReply_threshold_ratioIsSet(true);
      }
      if (incoming.get(23)) {
        struct.reply_resort_threshold = iprot.readDouble();
        struct.setReply_resort_thresholdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
        struct.setReply_from_serviceIsSet(true);
      }
      if (incoming.get(25)) {
        struct.intention_score = iprot.readDouble();
        struct.setIntention_scoreIsSet(true);
      }
      if (incoming.get(26)) {
        struct.anti_vulgar_reply = iprot.readBool();
        struct.setAnti_vulgar_replyIsSet(true);
      }
      if (incoming.get(27)) {
        struct.strict_porn_reply = iprot.readBool();
        struct.setStrict_porn_replyIsSet(true);
      }
      if (incoming.get(28)) {
        struct.query_is_porn = iprot.readBool();
        struct.setQuery_is_pornIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list323 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.porn_score = new ArrayList<String>(_list323.size);
          for (int _i324 = 0; _i324 < _list323.size; ++_i324)
          {
            String _elem325;
            _elem325 = iprot.readString();
            struct.porn_score.add(_elem325);
          }
        }
        struct.setPorn_scoreIsSet(true);
      }
      if (incoming.get(30)) {
        struct.query_porn_con = new QueryPornCondition();
        struct.query_porn_con.read(iprot);
        struct.setQuery_porn_conIsSet(true);
      }
      if (incoming.get(31)) {
        struct.reply_porn_con = new ReplyPornCondition();
        struct.reply_porn_con.read(iprot);
        struct.setReply_porn_conIsSet(true);
      }
      if (incoming.get(32)) {
        struct.user_profile = new UserProfile();
        struct.user_profile.read(iprot);
        struct.setUser_profileIsSet(true);
      }
      if (incoming.get(33)) {
        struct.query_complete_type = iprot.readI32();
        struct.setQuery_complete_typeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.proactive_reply = new ProactiveReply();
        struct.proactive_reply.read(iprot);
        struct.setProactive_replyIsSet(true);
      }
      if (incoming.get(35)) {
        struct.is_say_hello = iprot.readBool();
        struct.setIs_say_helloIsSet(true);
      }
      if (incoming.get(36)) {
        struct.session = new Session();
        struct.session.read(iprot);
        struct.setSessionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.debug_info = new DebugInfo();
        struct.debug_info.read(iprot);
        struct.setDebug_infoIsSet(true);
      }
      if (incoming.get(38)) {
        struct.workflow_terminal = iprot.readBool();
        struct.setWorkflow_terminalIsSet(true);
      }
      if (incoming.get(39)) {
        struct.porn_type = PornType.findByValue(iprot.readI32());
        struct.setPorn_typeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.gene_reply = iprot.readBool();
        struct.setGene_replyIsSet(true);
      }
      if (incoming.get(41)) {
        struct.random_reply = iprot.readBool();
        struct.setRandom_replyIsSet(true);
      }
      if (incoming.get(42)) {
        {
          org.apache.thrift.protocol.TList _list326 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_query_basic_seg = new ArrayList<String>(_list326.size);
          for (int _i327 = 0; _i327 < _list326.size; ++_i327)
          {
            String _elem328;
            _elem328 = iprot.readString();
            struct.last_query_basic_seg.add(_elem328);
          }
        }
        struct.setLast_query_basic_segIsSet(true);
      }
      if (incoming.get(43)) {
        {
          org.apache.thrift.protocol.TList _list329 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_query_phrase_seg = new ArrayList<String>(_list329.size);
          for (int _i330 = 0; _i330 < _list329.size; ++_i330)
          {
            String _elem331;
            _elem331 = iprot.readString();
            struct.last_query_phrase_seg.add(_elem331);
          }
        }
        struct.setLast_query_phrase_segIsSet(true);
      }
      if (incoming.get(44)) {
        {
          org.apache.thrift.protocol.TList _list332 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_reply_basic_seg = new ArrayList<String>(_list332.size);
          for (int _i333 = 0; _i333 < _list332.size; ++_i333)
          {
            String _elem334;
            _elem334 = iprot.readString();
            struct.last_reply_basic_seg.add(_elem334);
          }
        }
        struct.setLast_reply_basic_segIsSet(true);
      }
      if (incoming.get(45)) {
        {
          org.apache.thrift.protocol.TList _list335 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_reply_phrase_seg = new ArrayList<String>(_list335.size);
          for (int _i336 = 0; _i336 < _list335.size; ++_i336)
          {
            String _elem337;
            _elem337 = iprot.readString();
            struct.last_reply_phrase_seg.add(_elem337);
          }
        }
        struct.setLast_reply_phrase_segIsSet(true);
      }
    }
  }

}

