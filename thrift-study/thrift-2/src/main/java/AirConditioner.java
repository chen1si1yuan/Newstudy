/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2017-10-14")
public class AirConditioner implements org.apache.thrift.TBase<AirConditioner, AirConditioner._Fields>, java.io.Serializable, Cloneable, Comparable<AirConditioner> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AirConditioner");

  private static final org.apache.thrift.protocol.TField AIR_CONDITIONER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("air_conditioner_status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("temperature_val", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AirConditionerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AirConditionerTupleSchemeFactory());
  }

  /**
   * 
   * @see AirConditionerStatus
   */
  public AirConditionerStatus air_conditioner_status; // optional
  public double temperature_val; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see AirConditionerStatus
     */
    AIR_CONDITIONER_STATUS((short)1, "air_conditioner_status"),
    TEMPERATURE_VAL((short)2, "temperature_val");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AIR_CONDITIONER_STATUS
          return AIR_CONDITIONER_STATUS;
        case 2: // TEMPERATURE_VAL
          return TEMPERATURE_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMPERATURE_VAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AIR_CONDITIONER_STATUS,_Fields.TEMPERATURE_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AIR_CONDITIONER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("air_conditioner_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AirConditionerStatus.class)));
    tmpMap.put(_Fields.TEMPERATURE_VAL, new org.apache.thrift.meta_data.FieldMetaData("temperature_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AirConditioner.class, metaDataMap);
  }

  public AirConditioner() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AirConditioner(AirConditioner other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAir_conditioner_status()) {
      this.air_conditioner_status = other.air_conditioner_status;
    }
    this.temperature_val = other.temperature_val;
  }

  public AirConditioner deepCopy() {
    return new AirConditioner(this);
  }


  public void clear() {
    this.air_conditioner_status = null;
    setTemperature_valIsSet(false);
    this.temperature_val = 0.0;
  }

  /**
   * 
   * @see AirConditionerStatus
   */
  public AirConditionerStatus getAir_conditioner_status() {
    return this.air_conditioner_status;
  }

  /**
   * 
   * @see AirConditionerStatus
   */
  public AirConditioner setAir_conditioner_status(AirConditionerStatus air_conditioner_status) {
    this.air_conditioner_status = air_conditioner_status;
    return this;
  }

  public void unsetAir_conditioner_status() {
    this.air_conditioner_status = null;
  }

  /** Returns true if field air_conditioner_status is set (has been assigned a value) and false otherwise */
  public boolean isSetAir_conditioner_status() {
    return this.air_conditioner_status != null;
  }

  public void setAir_conditioner_statusIsSet(boolean value) {
    if (!value) {
      this.air_conditioner_status = null;
    }
  }

  public double getTemperature_val() {
    return this.temperature_val;
  }

  public AirConditioner setTemperature_val(double temperature_val) {
    this.temperature_val = temperature_val;
    setTemperature_valIsSet(true);
    return this;
  }

  public void unsetTemperature_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPERATURE_VAL_ISSET_ID);
  }

  /** Returns true if field temperature_val is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperature_val() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPERATURE_VAL_ISSET_ID);
  }

  public void setTemperature_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPERATURE_VAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AIR_CONDITIONER_STATUS:
      if (value == null) {
        unsetAir_conditioner_status();
      } else {
        setAir_conditioner_status((AirConditionerStatus)value);
      }
      break;

    case TEMPERATURE_VAL:
      if (value == null) {
        unsetTemperature_val();
      } else {
        setTemperature_val((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AIR_CONDITIONER_STATUS:
      return getAir_conditioner_status();

    case TEMPERATURE_VAL:
      return Double.valueOf(getTemperature_val());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AIR_CONDITIONER_STATUS:
      return isSetAir_conditioner_status();
    case TEMPERATURE_VAL:
      return isSetTemperature_val();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AirConditioner)
      return this.equals((AirConditioner)that);
    return false;
  }

  public boolean equals(AirConditioner that) {
    if (that == null)
      return false;

    boolean this_present_air_conditioner_status = true && this.isSetAir_conditioner_status();
    boolean that_present_air_conditioner_status = true && that.isSetAir_conditioner_status();
    if (this_present_air_conditioner_status || that_present_air_conditioner_status) {
      if (!(this_present_air_conditioner_status && that_present_air_conditioner_status))
        return false;
      if (!this.air_conditioner_status.equals(that.air_conditioner_status))
        return false;
    }

    boolean this_present_temperature_val = true && this.isSetTemperature_val();
    boolean that_present_temperature_val = true && that.isSetTemperature_val();
    if (this_present_temperature_val || that_present_temperature_val) {
      if (!(this_present_temperature_val && that_present_temperature_val))
        return false;
      if (this.temperature_val != that.temperature_val)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

 
  public int compareTo(AirConditioner other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAir_conditioner_status()).compareTo(other.isSetAir_conditioner_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAir_conditioner_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.air_conditioner_status, other.air_conditioner_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemperature_val()).compareTo(other.isSetTemperature_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperature_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperature_val, other.temperature_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AirConditioner(");
    boolean first = true;

    if (isSetAir_conditioner_status()) {
      sb.append("air_conditioner_status:");
      if (this.air_conditioner_status == null) {
        sb.append("null");
      } else {
        sb.append(this.air_conditioner_status);
      }
      first = false;
    }
    if (isSetTemperature_val()) {
      if (!first) sb.append(", ");
      sb.append("temperature_val:");
      sb.append(this.temperature_val);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AirConditionerStandardSchemeFactory implements SchemeFactory {
    public AirConditionerStandardScheme getScheme() {
      return new AirConditionerStandardScheme();
    }
  }

  private static class AirConditionerStandardScheme extends StandardScheme<AirConditioner> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AirConditioner struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AIR_CONDITIONER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.air_conditioner_status = AirConditionerStatus.findByValue(iprot.readI32());
              struct.setAir_conditioner_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPERATURE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temperature_val = iprot.readDouble();
              struct.setTemperature_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AirConditioner struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.air_conditioner_status != null) {
        if (struct.isSetAir_conditioner_status()) {
          oprot.writeFieldBegin(AIR_CONDITIONER_STATUS_FIELD_DESC);
          oprot.writeI32(struct.air_conditioner_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTemperature_val()) {
        oprot.writeFieldBegin(TEMPERATURE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.temperature_val);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AirConditionerTupleSchemeFactory implements SchemeFactory {
    public AirConditionerTupleScheme getScheme() {
      return new AirConditionerTupleScheme();
    }
  }

  private static class AirConditionerTupleScheme extends TupleScheme<AirConditioner> {

 
    public void write(org.apache.thrift.protocol.TProtocol prot, AirConditioner struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAir_conditioner_status()) {
        optionals.set(0);
      }
      if (struct.isSetTemperature_val()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAir_conditioner_status()) {
        oprot.writeI32(struct.air_conditioner_status.getValue());
      }
      if (struct.isSetTemperature_val()) {
        oprot.writeDouble(struct.temperature_val);
      }
    }

   
    public void read(org.apache.thrift.protocol.TProtocol prot, AirConditioner struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.air_conditioner_status = AirConditionerStatus.findByValue(iprot.readI32());
        struct.setAir_conditioner_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.temperature_val = iprot.readDouble();
        struct.setTemperature_valIsSet(true);
      }
    }
  }

}

