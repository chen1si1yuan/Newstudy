/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ContextPostReply implements org.apache.thrift.TBase<ContextPostReply, ContextPostReply._Fields>, java.io.Serializable, Cloneable, Comparable<ContextPostReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextPostReply");

  private static final org.apache.thrift.protocol.TField RAW_CURR_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_curr_post", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RAW_LAST_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_last_reply", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RAW_LAST_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_last_post", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField POST_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("post_tags", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField NOSTOPWORDS_SEG_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("nostopwords_seg_post", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField FEATURE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_score", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField ES_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("es_score", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DEBUG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_info", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_score", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CURR_POST_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("curr_post_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField CURR_POST_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("curr_post_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField LAST_REPLY_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_reply_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField LAST_REPLY_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_reply_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField LAST_POST_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_post_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_POST_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("last_post_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextPostReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextPostReplyTupleSchemeFactory());
  }

  public String raw_curr_post; // optional
  public String raw_last_reply; // optional
  public String raw_last_post; // optional
  public double score; // optional
  public List<Reply> replys; // optional
  public Map<Short,Short> post_tags; // optional
  public List<String> nostopwords_seg_post; // optional
  public Map<String,Double> feature_score; // optional
  public double es_score; // optional
  public String debug_info; // optional
  public double max_score; // optional
  public List<String> curr_post_basic_seg; // optional
  public List<String> curr_post_phrase_seg; // optional
  public List<String> last_reply_basic_seg; // optional
  public List<String> last_reply_phrase_seg; // optional
  public List<String> last_post_basic_seg; // optional
  public List<String> last_post_phrase_seg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RAW_CURR_POST((short)1, "raw_curr_post"),
    RAW_LAST_REPLY((short)2, "raw_last_reply"),
    RAW_LAST_POST((short)3, "raw_last_post"),
    SCORE((short)4, "score"),
    REPLYS((short)5, "replys"),
    POST_TAGS((short)6, "post_tags"),
    NOSTOPWORDS_SEG_POST((short)7, "nostopwords_seg_post"),
    FEATURE_SCORE((short)8, "feature_score"),
    ES_SCORE((short)9, "es_score"),
    DEBUG_INFO((short)11, "debug_info"),
    MAX_SCORE((short)12, "max_score"),
    CURR_POST_BASIC_SEG((short)13, "curr_post_basic_seg"),
    CURR_POST_PHRASE_SEG((short)14, "curr_post_phrase_seg"),
    LAST_REPLY_BASIC_SEG((short)15, "last_reply_basic_seg"),
    LAST_REPLY_PHRASE_SEG((short)16, "last_reply_phrase_seg"),
    LAST_POST_BASIC_SEG((short)17, "last_post_basic_seg"),
    LAST_POST_PHRASE_SEG((short)18, "last_post_phrase_seg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAW_CURR_POST
          return RAW_CURR_POST;
        case 2: // RAW_LAST_REPLY
          return RAW_LAST_REPLY;
        case 3: // RAW_LAST_POST
          return RAW_LAST_POST;
        case 4: // SCORE
          return SCORE;
        case 5: // REPLYS
          return REPLYS;
        case 6: // POST_TAGS
          return POST_TAGS;
        case 7: // NOSTOPWORDS_SEG_POST
          return NOSTOPWORDS_SEG_POST;
        case 8: // FEATURE_SCORE
          return FEATURE_SCORE;
        case 9: // ES_SCORE
          return ES_SCORE;
        case 11: // DEBUG_INFO
          return DEBUG_INFO;
        case 12: // MAX_SCORE
          return MAX_SCORE;
        case 13: // CURR_POST_BASIC_SEG
          return CURR_POST_BASIC_SEG;
        case 14: // CURR_POST_PHRASE_SEG
          return CURR_POST_PHRASE_SEG;
        case 15: // LAST_REPLY_BASIC_SEG
          return LAST_REPLY_BASIC_SEG;
        case 16: // LAST_REPLY_PHRASE_SEG
          return LAST_REPLY_PHRASE_SEG;
        case 17: // LAST_POST_BASIC_SEG
          return LAST_POST_BASIC_SEG;
        case 18: // LAST_POST_PHRASE_SEG
          return LAST_POST_PHRASE_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private static final int __ES_SCORE_ISSET_ID = 1;
  private static final int __MAX_SCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RAW_CURR_POST,_Fields.RAW_LAST_REPLY,_Fields.RAW_LAST_POST,_Fields.SCORE,_Fields.REPLYS,_Fields.POST_TAGS,_Fields.NOSTOPWORDS_SEG_POST,_Fields.FEATURE_SCORE,_Fields.ES_SCORE,_Fields.DEBUG_INFO,_Fields.MAX_SCORE,_Fields.CURR_POST_BASIC_SEG,_Fields.CURR_POST_PHRASE_SEG,_Fields.LAST_REPLY_BASIC_SEG,_Fields.LAST_REPLY_PHRASE_SEG,_Fields.LAST_POST_BASIC_SEG,_Fields.LAST_POST_PHRASE_SEG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAW_CURR_POST, new org.apache.thrift.meta_data.FieldMetaData("raw_curr_post", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAW_LAST_REPLY, new org.apache.thrift.meta_data.FieldMetaData("raw_last_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RAW_LAST_POST, new org.apache.thrift.meta_data.FieldMetaData("raw_last_post", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class))));
    tmpMap.put(_Fields.POST_TAGS, new org.apache.thrift.meta_data.FieldMetaData("post_tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.NOSTOPWORDS_SEG_POST, new org.apache.thrift.meta_data.FieldMetaData("nostopwords_seg_post", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("feature_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ES_SCORE, new org.apache.thrift.meta_data.FieldMetaData("es_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBUG_INFO, new org.apache.thrift.meta_data.FieldMetaData("debug_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_SCORE, new org.apache.thrift.meta_data.FieldMetaData("max_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_POST_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("curr_post_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CURR_POST_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("curr_post_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_REPLY_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_reply_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_REPLY_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_reply_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_POST_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_post_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LAST_POST_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("last_post_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextPostReply.class, metaDataMap);
  }

  public ContextPostReply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextPostReply(ContextPostReply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRaw_curr_post()) {
      this.raw_curr_post = other.raw_curr_post;
    }
    if (other.isSetRaw_last_reply()) {
      this.raw_last_reply = other.raw_last_reply;
    }
    if (other.isSetRaw_last_post()) {
      this.raw_last_post = other.raw_last_post;
    }
    this.score = other.score;
    if (other.isSetReplys()) {
      List<Reply> __this__replys = new ArrayList<Reply>(other.replys.size());
      for (Reply other_element : other.replys) {
        __this__replys.add(new Reply(other_element));
      }
      this.replys = __this__replys;
    }
    if (other.isSetPost_tags()) {
      Map<Short,Short> __this__post_tags = new HashMap<Short,Short>(other.post_tags);
      this.post_tags = __this__post_tags;
    }
    if (other.isSetNostopwords_seg_post()) {
      List<String> __this__nostopwords_seg_post = new ArrayList<String>(other.nostopwords_seg_post);
      this.nostopwords_seg_post = __this__nostopwords_seg_post;
    }
    if (other.isSetFeature_score()) {
      Map<String,Double> __this__feature_score = new HashMap<String,Double>(other.feature_score);
      this.feature_score = __this__feature_score;
    }
    this.es_score = other.es_score;
    if (other.isSetDebug_info()) {
      this.debug_info = other.debug_info;
    }
    this.max_score = other.max_score;
    if (other.isSetCurr_post_basic_seg()) {
      List<String> __this__curr_post_basic_seg = new ArrayList<String>(other.curr_post_basic_seg);
      this.curr_post_basic_seg = __this__curr_post_basic_seg;
    }
    if (other.isSetCurr_post_phrase_seg()) {
      List<String> __this__curr_post_phrase_seg = new ArrayList<String>(other.curr_post_phrase_seg);
      this.curr_post_phrase_seg = __this__curr_post_phrase_seg;
    }
    if (other.isSetLast_reply_basic_seg()) {
      List<String> __this__last_reply_basic_seg = new ArrayList<String>(other.last_reply_basic_seg);
      this.last_reply_basic_seg = __this__last_reply_basic_seg;
    }
    if (other.isSetLast_reply_phrase_seg()) {
      List<String> __this__last_reply_phrase_seg = new ArrayList<String>(other.last_reply_phrase_seg);
      this.last_reply_phrase_seg = __this__last_reply_phrase_seg;
    }
    if (other.isSetLast_post_basic_seg()) {
      List<String> __this__last_post_basic_seg = new ArrayList<String>(other.last_post_basic_seg);
      this.last_post_basic_seg = __this__last_post_basic_seg;
    }
    if (other.isSetLast_post_phrase_seg()) {
      List<String> __this__last_post_phrase_seg = new ArrayList<String>(other.last_post_phrase_seg);
      this.last_post_phrase_seg = __this__last_post_phrase_seg;
    }
  }

  public ContextPostReply deepCopy() {
    return new ContextPostReply(this);
  }

  
  public void clear() {
    this.raw_curr_post = null;
    this.raw_last_reply = null;
    this.raw_last_post = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.replys = null;
    this.post_tags = null;
    this.nostopwords_seg_post = null;
    this.feature_score = null;
    setEs_scoreIsSet(false);
    this.es_score = 0.0;
    this.debug_info = null;
    setMax_scoreIsSet(false);
    this.max_score = 0.0;
    this.curr_post_basic_seg = null;
    this.curr_post_phrase_seg = null;
    this.last_reply_basic_seg = null;
    this.last_reply_phrase_seg = null;
    this.last_post_basic_seg = null;
    this.last_post_phrase_seg = null;
  }

  public String getRaw_curr_post() {
    return this.raw_curr_post;
  }

  public ContextPostReply setRaw_curr_post(String raw_curr_post) {
    this.raw_curr_post = raw_curr_post;
    return this;
  }

  public void unsetRaw_curr_post() {
    this.raw_curr_post = null;
  }

  /** Returns true if field raw_curr_post is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_curr_post() {
    return this.raw_curr_post != null;
  }

  public void setRaw_curr_postIsSet(boolean value) {
    if (!value) {
      this.raw_curr_post = null;
    }
  }

  public String getRaw_last_reply() {
    return this.raw_last_reply;
  }

  public ContextPostReply setRaw_last_reply(String raw_last_reply) {
    this.raw_last_reply = raw_last_reply;
    return this;
  }

  public void unsetRaw_last_reply() {
    this.raw_last_reply = null;
  }

  /** Returns true if field raw_last_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_last_reply() {
    return this.raw_last_reply != null;
  }

  public void setRaw_last_replyIsSet(boolean value) {
    if (!value) {
      this.raw_last_reply = null;
    }
  }

  public String getRaw_last_post() {
    return this.raw_last_post;
  }

  public ContextPostReply setRaw_last_post(String raw_last_post) {
    this.raw_last_post = raw_last_post;
    return this;
  }

  public void unsetRaw_last_post() {
    this.raw_last_post = null;
  }

  /** Returns true if field raw_last_post is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_last_post() {
    return this.raw_last_post != null;
  }

  public void setRaw_last_postIsSet(boolean value) {
    if (!value) {
      this.raw_last_post = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public ContextPostReply setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public java.util.Iterator<Reply> getReplysIterator() {
    return (this.replys == null) ? null : this.replys.iterator();
  }

  public void addToReplys(Reply elem) {
    if (this.replys == null) {
      this.replys = new ArrayList<Reply>();
    }
    this.replys.add(elem);
  }

  public List<Reply> getReplys() {
    return this.replys;
  }

  public ContextPostReply setReplys(List<Reply> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public int getPost_tagsSize() {
    return (this.post_tags == null) ? 0 : this.post_tags.size();
  }

  public void putToPost_tags(short key, short val) {
    if (this.post_tags == null) {
      this.post_tags = new HashMap<Short,Short>();
    }
    this.post_tags.put(key, val);
  }

  public Map<Short,Short> getPost_tags() {
    return this.post_tags;
  }

  public ContextPostReply setPost_tags(Map<Short,Short> post_tags) {
    this.post_tags = post_tags;
    return this;
  }

  public void unsetPost_tags() {
    this.post_tags = null;
  }

  /** Returns true if field post_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_tags() {
    return this.post_tags != null;
  }

  public void setPost_tagsIsSet(boolean value) {
    if (!value) {
      this.post_tags = null;
    }
  }

  public int getNostopwords_seg_postSize() {
    return (this.nostopwords_seg_post == null) ? 0 : this.nostopwords_seg_post.size();
  }

  public java.util.Iterator<String> getNostopwords_seg_postIterator() {
    return (this.nostopwords_seg_post == null) ? null : this.nostopwords_seg_post.iterator();
  }

  public void addToNostopwords_seg_post(String elem) {
    if (this.nostopwords_seg_post == null) {
      this.nostopwords_seg_post = new ArrayList<String>();
    }
    this.nostopwords_seg_post.add(elem);
  }

  public List<String> getNostopwords_seg_post() {
    return this.nostopwords_seg_post;
  }

  public ContextPostReply setNostopwords_seg_post(List<String> nostopwords_seg_post) {
    this.nostopwords_seg_post = nostopwords_seg_post;
    return this;
  }

  public void unsetNostopwords_seg_post() {
    this.nostopwords_seg_post = null;
  }

  /** Returns true if field nostopwords_seg_post is set (has been assigned a value) and false otherwise */
  public boolean isSetNostopwords_seg_post() {
    return this.nostopwords_seg_post != null;
  }

  public void setNostopwords_seg_postIsSet(boolean value) {
    if (!value) {
      this.nostopwords_seg_post = null;
    }
  }

  public int getFeature_scoreSize() {
    return (this.feature_score == null) ? 0 : this.feature_score.size();
  }

  public void putToFeature_score(String key, double val) {
    if (this.feature_score == null) {
      this.feature_score = new HashMap<String,Double>();
    }
    this.feature_score.put(key, val);
  }

  public Map<String,Double> getFeature_score() {
    return this.feature_score;
  }

  public ContextPostReply setFeature_score(Map<String,Double> feature_score) {
    this.feature_score = feature_score;
    return this;
  }

  public void unsetFeature_score() {
    this.feature_score = null;
  }

  /** Returns true if field feature_score is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_score() {
    return this.feature_score != null;
  }

  public void setFeature_scoreIsSet(boolean value) {
    if (!value) {
      this.feature_score = null;
    }
  }

  public double getEs_score() {
    return this.es_score;
  }

  public ContextPostReply setEs_score(double es_score) {
    this.es_score = es_score;
    setEs_scoreIsSet(true);
    return this;
  }

  public void unsetEs_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ES_SCORE_ISSET_ID);
  }

  /** Returns true if field es_score is set (has been assigned a value) and false otherwise */
  public boolean isSetEs_score() {
    return EncodingUtils.testBit(__isset_bitfield, __ES_SCORE_ISSET_ID);
  }

  public void setEs_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ES_SCORE_ISSET_ID, value);
  }

  public String getDebug_info() {
    return this.debug_info;
  }

  public ContextPostReply setDebug_info(String debug_info) {
    this.debug_info = debug_info;
    return this;
  }

  public void unsetDebug_info() {
    this.debug_info = null;
  }

  /** Returns true if field debug_info is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_info() {
    return this.debug_info != null;
  }

  public void setDebug_infoIsSet(boolean value) {
    if (!value) {
      this.debug_info = null;
    }
  }

  public double getMax_score() {
    return this.max_score;
  }

  public ContextPostReply setMax_score(double max_score) {
    this.max_score = max_score;
    setMax_scoreIsSet(true);
    return this;
  }

  public void unsetMax_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SCORE_ISSET_ID);
  }

  /** Returns true if field max_score is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_score() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SCORE_ISSET_ID);
  }

  public void setMax_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SCORE_ISSET_ID, value);
  }

  public int getCurr_post_basic_segSize() {
    return (this.curr_post_basic_seg == null) ? 0 : this.curr_post_basic_seg.size();
  }

  public java.util.Iterator<String> getCurr_post_basic_segIterator() {
    return (this.curr_post_basic_seg == null) ? null : this.curr_post_basic_seg.iterator();
  }

  public void addToCurr_post_basic_seg(String elem) {
    if (this.curr_post_basic_seg == null) {
      this.curr_post_basic_seg = new ArrayList<String>();
    }
    this.curr_post_basic_seg.add(elem);
  }

  public List<String> getCurr_post_basic_seg() {
    return this.curr_post_basic_seg;
  }

  public ContextPostReply setCurr_post_basic_seg(List<String> curr_post_basic_seg) {
    this.curr_post_basic_seg = curr_post_basic_seg;
    return this;
  }

  public void unsetCurr_post_basic_seg() {
    this.curr_post_basic_seg = null;
  }

  /** Returns true if field curr_post_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetCurr_post_basic_seg() {
    return this.curr_post_basic_seg != null;
  }

  public void setCurr_post_basic_segIsSet(boolean value) {
    if (!value) {
      this.curr_post_basic_seg = null;
    }
  }

  public int getCurr_post_phrase_segSize() {
    return (this.curr_post_phrase_seg == null) ? 0 : this.curr_post_phrase_seg.size();
  }

  public java.util.Iterator<String> getCurr_post_phrase_segIterator() {
    return (this.curr_post_phrase_seg == null) ? null : this.curr_post_phrase_seg.iterator();
  }

  public void addToCurr_post_phrase_seg(String elem) {
    if (this.curr_post_phrase_seg == null) {
      this.curr_post_phrase_seg = new ArrayList<String>();
    }
    this.curr_post_phrase_seg.add(elem);
  }

  public List<String> getCurr_post_phrase_seg() {
    return this.curr_post_phrase_seg;
  }

  public ContextPostReply setCurr_post_phrase_seg(List<String> curr_post_phrase_seg) {
    this.curr_post_phrase_seg = curr_post_phrase_seg;
    return this;
  }

  public void unsetCurr_post_phrase_seg() {
    this.curr_post_phrase_seg = null;
  }

  /** Returns true if field curr_post_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetCurr_post_phrase_seg() {
    return this.curr_post_phrase_seg != null;
  }

  public void setCurr_post_phrase_segIsSet(boolean value) {
    if (!value) {
      this.curr_post_phrase_seg = null;
    }
  }

  public int getLast_reply_basic_segSize() {
    return (this.last_reply_basic_seg == null) ? 0 : this.last_reply_basic_seg.size();
  }

  public java.util.Iterator<String> getLast_reply_basic_segIterator() {
    return (this.last_reply_basic_seg == null) ? null : this.last_reply_basic_seg.iterator();
  }

  public void addToLast_reply_basic_seg(String elem) {
    if (this.last_reply_basic_seg == null) {
      this.last_reply_basic_seg = new ArrayList<String>();
    }
    this.last_reply_basic_seg.add(elem);
  }

  public List<String> getLast_reply_basic_seg() {
    return this.last_reply_basic_seg;
  }

  public ContextPostReply setLast_reply_basic_seg(List<String> last_reply_basic_seg) {
    this.last_reply_basic_seg = last_reply_basic_seg;
    return this;
  }

  public void unsetLast_reply_basic_seg() {
    this.last_reply_basic_seg = null;
  }

  /** Returns true if field last_reply_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_reply_basic_seg() {
    return this.last_reply_basic_seg != null;
  }

  public void setLast_reply_basic_segIsSet(boolean value) {
    if (!value) {
      this.last_reply_basic_seg = null;
    }
  }

  public int getLast_reply_phrase_segSize() {
    return (this.last_reply_phrase_seg == null) ? 0 : this.last_reply_phrase_seg.size();
  }

  public java.util.Iterator<String> getLast_reply_phrase_segIterator() {
    return (this.last_reply_phrase_seg == null) ? null : this.last_reply_phrase_seg.iterator();
  }

  public void addToLast_reply_phrase_seg(String elem) {
    if (this.last_reply_phrase_seg == null) {
      this.last_reply_phrase_seg = new ArrayList<String>();
    }
    this.last_reply_phrase_seg.add(elem);
  }

  public List<String> getLast_reply_phrase_seg() {
    return this.last_reply_phrase_seg;
  }

  public ContextPostReply setLast_reply_phrase_seg(List<String> last_reply_phrase_seg) {
    this.last_reply_phrase_seg = last_reply_phrase_seg;
    return this;
  }

  public void unsetLast_reply_phrase_seg() {
    this.last_reply_phrase_seg = null;
  }

  /** Returns true if field last_reply_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_reply_phrase_seg() {
    return this.last_reply_phrase_seg != null;
  }

  public void setLast_reply_phrase_segIsSet(boolean value) {
    if (!value) {
      this.last_reply_phrase_seg = null;
    }
  }

  public int getLast_post_basic_segSize() {
    return (this.last_post_basic_seg == null) ? 0 : this.last_post_basic_seg.size();
  }

  public java.util.Iterator<String> getLast_post_basic_segIterator() {
    return (this.last_post_basic_seg == null) ? null : this.last_post_basic_seg.iterator();
  }

  public void addToLast_post_basic_seg(String elem) {
    if (this.last_post_basic_seg == null) {
      this.last_post_basic_seg = new ArrayList<String>();
    }
    this.last_post_basic_seg.add(elem);
  }

  public List<String> getLast_post_basic_seg() {
    return this.last_post_basic_seg;
  }

  public ContextPostReply setLast_post_basic_seg(List<String> last_post_basic_seg) {
    this.last_post_basic_seg = last_post_basic_seg;
    return this;
  }

  public void unsetLast_post_basic_seg() {
    this.last_post_basic_seg = null;
  }

  /** Returns true if field last_post_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_post_basic_seg() {
    return this.last_post_basic_seg != null;
  }

  public void setLast_post_basic_segIsSet(boolean value) {
    if (!value) {
      this.last_post_basic_seg = null;
    }
  }

  public int getLast_post_phrase_segSize() {
    return (this.last_post_phrase_seg == null) ? 0 : this.last_post_phrase_seg.size();
  }

  public java.util.Iterator<String> getLast_post_phrase_segIterator() {
    return (this.last_post_phrase_seg == null) ? null : this.last_post_phrase_seg.iterator();
  }

  public void addToLast_post_phrase_seg(String elem) {
    if (this.last_post_phrase_seg == null) {
      this.last_post_phrase_seg = new ArrayList<String>();
    }
    this.last_post_phrase_seg.add(elem);
  }

  public List<String> getLast_post_phrase_seg() {
    return this.last_post_phrase_seg;
  }

  public ContextPostReply setLast_post_phrase_seg(List<String> last_post_phrase_seg) {
    this.last_post_phrase_seg = last_post_phrase_seg;
    return this;
  }

  public void unsetLast_post_phrase_seg() {
    this.last_post_phrase_seg = null;
  }

  /** Returns true if field last_post_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_post_phrase_seg() {
    return this.last_post_phrase_seg != null;
  }

  public void setLast_post_phrase_segIsSet(boolean value) {
    if (!value) {
      this.last_post_phrase_seg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAW_CURR_POST:
      if (value == null) {
        unsetRaw_curr_post();
      } else {
        setRaw_curr_post((String)value);
      }
      break;

    case RAW_LAST_REPLY:
      if (value == null) {
        unsetRaw_last_reply();
      } else {
        setRaw_last_reply((String)value);
      }
      break;

    case RAW_LAST_POST:
      if (value == null) {
        unsetRaw_last_post();
      } else {
        setRaw_last_post((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((List<Reply>)value);
      }
      break;

    case POST_TAGS:
      if (value == null) {
        unsetPost_tags();
      } else {
        setPost_tags((Map<Short,Short>)value);
      }
      break;

    case NOSTOPWORDS_SEG_POST:
      if (value == null) {
        unsetNostopwords_seg_post();
      } else {
        setNostopwords_seg_post((List<String>)value);
      }
      break;

    case FEATURE_SCORE:
      if (value == null) {
        unsetFeature_score();
      } else {
        setFeature_score((Map<String,Double>)value);
      }
      break;

    case ES_SCORE:
      if (value == null) {
        unsetEs_score();
      } else {
        setEs_score((Double)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebug_info();
      } else {
        setDebug_info((String)value);
      }
      break;

    case MAX_SCORE:
      if (value == null) {
        unsetMax_score();
      } else {
        setMax_score((Double)value);
      }
      break;

    case CURR_POST_BASIC_SEG:
      if (value == null) {
        unsetCurr_post_basic_seg();
      } else {
        setCurr_post_basic_seg((List<String>)value);
      }
      break;

    case CURR_POST_PHRASE_SEG:
      if (value == null) {
        unsetCurr_post_phrase_seg();
      } else {
        setCurr_post_phrase_seg((List<String>)value);
      }
      break;

    case LAST_REPLY_BASIC_SEG:
      if (value == null) {
        unsetLast_reply_basic_seg();
      } else {
        setLast_reply_basic_seg((List<String>)value);
      }
      break;

    case LAST_REPLY_PHRASE_SEG:
      if (value == null) {
        unsetLast_reply_phrase_seg();
      } else {
        setLast_reply_phrase_seg((List<String>)value);
      }
      break;

    case LAST_POST_BASIC_SEG:
      if (value == null) {
        unsetLast_post_basic_seg();
      } else {
        setLast_post_basic_seg((List<String>)value);
      }
      break;

    case LAST_POST_PHRASE_SEG:
      if (value == null) {
        unsetLast_post_phrase_seg();
      } else {
        setLast_post_phrase_seg((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAW_CURR_POST:
      return getRaw_curr_post();

    case RAW_LAST_REPLY:
      return getRaw_last_reply();

    case RAW_LAST_POST:
      return getRaw_last_post();

    case SCORE:
      return Double.valueOf(getScore());

    case REPLYS:
      return getReplys();

    case POST_TAGS:
      return getPost_tags();

    case NOSTOPWORDS_SEG_POST:
      return getNostopwords_seg_post();

    case FEATURE_SCORE:
      return getFeature_score();

    case ES_SCORE:
      return Double.valueOf(getEs_score());

    case DEBUG_INFO:
      return getDebug_info();

    case MAX_SCORE:
      return Double.valueOf(getMax_score());

    case CURR_POST_BASIC_SEG:
      return getCurr_post_basic_seg();

    case CURR_POST_PHRASE_SEG:
      return getCurr_post_phrase_seg();

    case LAST_REPLY_BASIC_SEG:
      return getLast_reply_basic_seg();

    case LAST_REPLY_PHRASE_SEG:
      return getLast_reply_phrase_seg();

    case LAST_POST_BASIC_SEG:
      return getLast_post_basic_seg();

    case LAST_POST_PHRASE_SEG:
      return getLast_post_phrase_seg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAW_CURR_POST:
      return isSetRaw_curr_post();
    case RAW_LAST_REPLY:
      return isSetRaw_last_reply();
    case RAW_LAST_POST:
      return isSetRaw_last_post();
    case SCORE:
      return isSetScore();
    case REPLYS:
      return isSetReplys();
    case POST_TAGS:
      return isSetPost_tags();
    case NOSTOPWORDS_SEG_POST:
      return isSetNostopwords_seg_post();
    case FEATURE_SCORE:
      return isSetFeature_score();
    case ES_SCORE:
      return isSetEs_score();
    case DEBUG_INFO:
      return isSetDebug_info();
    case MAX_SCORE:
      return isSetMax_score();
    case CURR_POST_BASIC_SEG:
      return isSetCurr_post_basic_seg();
    case CURR_POST_PHRASE_SEG:
      return isSetCurr_post_phrase_seg();
    case LAST_REPLY_BASIC_SEG:
      return isSetLast_reply_basic_seg();
    case LAST_REPLY_PHRASE_SEG:
      return isSetLast_reply_phrase_seg();
    case LAST_POST_BASIC_SEG:
      return isSetLast_post_basic_seg();
    case LAST_POST_PHRASE_SEG:
      return isSetLast_post_phrase_seg();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextPostReply)
      return this.equals((ContextPostReply)that);
    return false;
  }

  public boolean equals(ContextPostReply that) {
    if (that == null)
      return false;

    boolean this_present_raw_curr_post = true && this.isSetRaw_curr_post();
    boolean that_present_raw_curr_post = true && that.isSetRaw_curr_post();
    if (this_present_raw_curr_post || that_present_raw_curr_post) {
      if (!(this_present_raw_curr_post && that_present_raw_curr_post))
        return false;
      if (!this.raw_curr_post.equals(that.raw_curr_post))
        return false;
    }

    boolean this_present_raw_last_reply = true && this.isSetRaw_last_reply();
    boolean that_present_raw_last_reply = true && that.isSetRaw_last_reply();
    if (this_present_raw_last_reply || that_present_raw_last_reply) {
      if (!(this_present_raw_last_reply && that_present_raw_last_reply))
        return false;
      if (!this.raw_last_reply.equals(that.raw_last_reply))
        return false;
    }

    boolean this_present_raw_last_post = true && this.isSetRaw_last_post();
    boolean that_present_raw_last_post = true && that.isSetRaw_last_post();
    if (this_present_raw_last_post || that_present_raw_last_post) {
      if (!(this_present_raw_last_post && that_present_raw_last_post))
        return false;
      if (!this.raw_last_post.equals(that.raw_last_post))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_post_tags = true && this.isSetPost_tags();
    boolean that_present_post_tags = true && that.isSetPost_tags();
    if (this_present_post_tags || that_present_post_tags) {
      if (!(this_present_post_tags && that_present_post_tags))
        return false;
      if (!this.post_tags.equals(that.post_tags))
        return false;
    }

    boolean this_present_nostopwords_seg_post = true && this.isSetNostopwords_seg_post();
    boolean that_present_nostopwords_seg_post = true && that.isSetNostopwords_seg_post();
    if (this_present_nostopwords_seg_post || that_present_nostopwords_seg_post) {
      if (!(this_present_nostopwords_seg_post && that_present_nostopwords_seg_post))
        return false;
      if (!this.nostopwords_seg_post.equals(that.nostopwords_seg_post))
        return false;
    }

    boolean this_present_feature_score = true && this.isSetFeature_score();
    boolean that_present_feature_score = true && that.isSetFeature_score();
    if (this_present_feature_score || that_present_feature_score) {
      if (!(this_present_feature_score && that_present_feature_score))
        return false;
      if (!this.feature_score.equals(that.feature_score))
        return false;
    }

    boolean this_present_es_score = true && this.isSetEs_score();
    boolean that_present_es_score = true && that.isSetEs_score();
    if (this_present_es_score || that_present_es_score) {
      if (!(this_present_es_score && that_present_es_score))
        return false;
      if (this.es_score != that.es_score)
        return false;
    }

    boolean this_present_debug_info = true && this.isSetDebug_info();
    boolean that_present_debug_info = true && that.isSetDebug_info();
    if (this_present_debug_info || that_present_debug_info) {
      if (!(this_present_debug_info && that_present_debug_info))
        return false;
      if (!this.debug_info.equals(that.debug_info))
        return false;
    }

    boolean this_present_max_score = true && this.isSetMax_score();
    boolean that_present_max_score = true && that.isSetMax_score();
    if (this_present_max_score || that_present_max_score) {
      if (!(this_present_max_score && that_present_max_score))
        return false;
      if (this.max_score != that.max_score)
        return false;
    }

    boolean this_present_curr_post_basic_seg = true && this.isSetCurr_post_basic_seg();
    boolean that_present_curr_post_basic_seg = true && that.isSetCurr_post_basic_seg();
    if (this_present_curr_post_basic_seg || that_present_curr_post_basic_seg) {
      if (!(this_present_curr_post_basic_seg && that_present_curr_post_basic_seg))
        return false;
      if (!this.curr_post_basic_seg.equals(that.curr_post_basic_seg))
        return false;
    }

    boolean this_present_curr_post_phrase_seg = true && this.isSetCurr_post_phrase_seg();
    boolean that_present_curr_post_phrase_seg = true && that.isSetCurr_post_phrase_seg();
    if (this_present_curr_post_phrase_seg || that_present_curr_post_phrase_seg) {
      if (!(this_present_curr_post_phrase_seg && that_present_curr_post_phrase_seg))
        return false;
      if (!this.curr_post_phrase_seg.equals(that.curr_post_phrase_seg))
        return false;
    }

    boolean this_present_last_reply_basic_seg = true && this.isSetLast_reply_basic_seg();
    boolean that_present_last_reply_basic_seg = true && that.isSetLast_reply_basic_seg();
    if (this_present_last_reply_basic_seg || that_present_last_reply_basic_seg) {
      if (!(this_present_last_reply_basic_seg && that_present_last_reply_basic_seg))
        return false;
      if (!this.last_reply_basic_seg.equals(that.last_reply_basic_seg))
        return false;
    }

    boolean this_present_last_reply_phrase_seg = true && this.isSetLast_reply_phrase_seg();
    boolean that_present_last_reply_phrase_seg = true && that.isSetLast_reply_phrase_seg();
    if (this_present_last_reply_phrase_seg || that_present_last_reply_phrase_seg) {
      if (!(this_present_last_reply_phrase_seg && that_present_last_reply_phrase_seg))
        return false;
      if (!this.last_reply_phrase_seg.equals(that.last_reply_phrase_seg))
        return false;
    }

    boolean this_present_last_post_basic_seg = true && this.isSetLast_post_basic_seg();
    boolean that_present_last_post_basic_seg = true && that.isSetLast_post_basic_seg();
    if (this_present_last_post_basic_seg || that_present_last_post_basic_seg) {
      if (!(this_present_last_post_basic_seg && that_present_last_post_basic_seg))
        return false;
      if (!this.last_post_basic_seg.equals(that.last_post_basic_seg))
        return false;
    }

    boolean this_present_last_post_phrase_seg = true && this.isSetLast_post_phrase_seg();
    boolean that_present_last_post_phrase_seg = true && that.isSetLast_post_phrase_seg();
    if (this_present_last_post_phrase_seg || that_present_last_post_phrase_seg) {
      if (!(this_present_last_post_phrase_seg && that_present_last_post_phrase_seg))
        return false;
      if (!this.last_post_phrase_seg.equals(that.last_post_phrase_seg))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ContextPostReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRaw_curr_post()).compareTo(other.isSetRaw_curr_post());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_curr_post()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_curr_post, other.raw_curr_post);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaw_last_reply()).compareTo(other.isSetRaw_last_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_last_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_last_reply, other.raw_last_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaw_last_post()).compareTo(other.isSetRaw_last_post());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_last_post()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_last_post, other.raw_last_post);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_tags()).compareTo(other.isSetPost_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_tags, other.post_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNostopwords_seg_post()).compareTo(other.isSetNostopwords_seg_post());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNostopwords_seg_post()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nostopwords_seg_post, other.nostopwords_seg_post);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_score()).compareTo(other.isSetFeature_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_score, other.feature_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEs_score()).compareTo(other.isSetEs_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEs_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.es_score, other.es_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_info()).compareTo(other.isSetDebug_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_info, other.debug_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_score()).compareTo(other.isSetMax_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_score, other.max_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurr_post_basic_seg()).compareTo(other.isSetCurr_post_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurr_post_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curr_post_basic_seg, other.curr_post_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurr_post_phrase_seg()).compareTo(other.isSetCurr_post_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurr_post_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curr_post_phrase_seg, other.curr_post_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_reply_basic_seg()).compareTo(other.isSetLast_reply_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_reply_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_reply_basic_seg, other.last_reply_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_reply_phrase_seg()).compareTo(other.isSetLast_reply_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_reply_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_reply_phrase_seg, other.last_reply_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_post_basic_seg()).compareTo(other.isSetLast_post_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_post_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_post_basic_seg, other.last_post_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLast_post_phrase_seg()).compareTo(other.isSetLast_post_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_post_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_post_phrase_seg, other.last_post_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ContextPostReply(");
    boolean first = true;

    if (isSetRaw_curr_post()) {
      sb.append("raw_curr_post:");
      if (this.raw_curr_post == null) {
        sb.append("null");
      } else {
        sb.append(this.raw_curr_post);
      }
      first = false;
    }
    if (isSetRaw_last_reply()) {
      if (!first) sb.append(", ");
      sb.append("raw_last_reply:");
      if (this.raw_last_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.raw_last_reply);
      }
      first = false;
    }
    if (isSetRaw_last_post()) {
      if (!first) sb.append(", ");
      sb.append("raw_last_post:");
      if (this.raw_last_post == null) {
        sb.append("null");
      } else {
        sb.append(this.raw_last_post);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetReplys()) {
      if (!first) sb.append(", ");
      sb.append("replys:");
      if (this.replys == null) {
        sb.append("null");
      } else {
        sb.append(this.replys);
      }
      first = false;
    }
    if (isSetPost_tags()) {
      if (!first) sb.append(", ");
      sb.append("post_tags:");
      if (this.post_tags == null) {
        sb.append("null");
      } else {
        sb.append(this.post_tags);
      }
      first = false;
    }
    if (isSetNostopwords_seg_post()) {
      if (!first) sb.append(", ");
      sb.append("nostopwords_seg_post:");
      if (this.nostopwords_seg_post == null) {
        sb.append("null");
      } else {
        sb.append(this.nostopwords_seg_post);
      }
      first = false;
    }
    if (isSetFeature_score()) {
      if (!first) sb.append(", ");
      sb.append("feature_score:");
      if (this.feature_score == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_score);
      }
      first = false;
    }
    if (isSetEs_score()) {
      if (!first) sb.append(", ");
      sb.append("es_score:");
      sb.append(this.es_score);
      first = false;
    }
    if (isSetDebug_info()) {
      if (!first) sb.append(", ");
      sb.append("debug_info:");
      if (this.debug_info == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_info);
      }
      first = false;
    }
    if (isSetMax_score()) {
      if (!first) sb.append(", ");
      sb.append("max_score:");
      sb.append(this.max_score);
      first = false;
    }
    if (isSetCurr_post_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("curr_post_basic_seg:");
      if (this.curr_post_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.curr_post_basic_seg);
      }
      first = false;
    }
    if (isSetCurr_post_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("curr_post_phrase_seg:");
      if (this.curr_post_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.curr_post_phrase_seg);
      }
      first = false;
    }
    if (isSetLast_reply_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_reply_basic_seg:");
      if (this.last_reply_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_reply_basic_seg);
      }
      first = false;
    }
    if (isSetLast_reply_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_reply_phrase_seg:");
      if (this.last_reply_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_reply_phrase_seg);
      }
      first = false;
    }
    if (isSetLast_post_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_post_basic_seg:");
      if (this.last_post_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_post_basic_seg);
      }
      first = false;
    }
    if (isSetLast_post_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("last_post_phrase_seg:");
      if (this.last_post_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.last_post_phrase_seg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextPostReplyStandardSchemeFactory implements SchemeFactory {
    public ContextPostReplyStandardScheme getScheme() {
      return new ContextPostReplyStandardScheme();
    }
  }

  private static class ContextPostReplyStandardScheme extends StandardScheme<ContextPostReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextPostReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAW_CURR_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raw_curr_post = iprot.readString();
              struct.setRaw_curr_postIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAW_LAST_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raw_last_reply = iprot.readString();
              struct.setRaw_last_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RAW_LAST_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raw_last_post = iprot.readString();
              struct.setRaw_last_postIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                struct.replys = new ArrayList<Reply>(_list132.size);
                for (int _i133 = 0; _i133 < _list132.size; ++_i133)
                {
                  Reply _elem134;
                  _elem134 = new Reply();
                  _elem134.read(iprot);
                  struct.replys.add(_elem134);
                }
                iprot.readListEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POST_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map135 = iprot.readMapBegin();
                struct.post_tags = new HashMap<Short,Short>(2*_map135.size);
                for (int _i136 = 0; _i136 < _map135.size; ++_i136)
                {
                  short _key137;
                  short _val138;
                  _key137 = iprot.readI16();
                  _val138 = iprot.readI16();
                  struct.post_tags.put(_key137, _val138);
                }
                iprot.readMapEnd();
              }
              struct.setPost_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOSTOPWORDS_SEG_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.nostopwords_seg_post = new ArrayList<String>(_list139.size);
                for (int _i140 = 0; _i140 < _list139.size; ++_i140)
                {
                  String _elem141;
                  _elem141 = iprot.readString();
                  struct.nostopwords_seg_post.add(_elem141);
                }
                iprot.readListEnd();
              }
              struct.setNostopwords_seg_postIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FEATURE_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                struct.feature_score = new HashMap<String,Double>(2*_map142.size);
                for (int _i143 = 0; _i143 < _map142.size; ++_i143)
                {
                  String _key144;
                  double _val145;
                  _key144 = iprot.readString();
                  _val145 = iprot.readDouble();
                  struct.feature_score.put(_key144, _val145);
                }
                iprot.readMapEnd();
              }
              struct.setFeature_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ES_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.es_score = iprot.readDouble();
              struct.setEs_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEBUG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug_info = iprot.readString();
              struct.setDebug_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_score = iprot.readDouble();
              struct.setMax_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CURR_POST_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.curr_post_basic_seg = new ArrayList<String>(_list146.size);
                for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                {
                  String _elem148;
                  _elem148 = iprot.readString();
                  struct.curr_post_basic_seg.add(_elem148);
                }
                iprot.readListEnd();
              }
              struct.setCurr_post_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURR_POST_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list149 = iprot.readListBegin();
                struct.curr_post_phrase_seg = new ArrayList<String>(_list149.size);
                for (int _i150 = 0; _i150 < _list149.size; ++_i150)
                {
                  String _elem151;
                  _elem151 = iprot.readString();
                  struct.curr_post_phrase_seg.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setCurr_post_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LAST_REPLY_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.last_reply_basic_seg = new ArrayList<String>(_list152.size);
                for (int _i153 = 0; _i153 < _list152.size; ++_i153)
                {
                  String _elem154;
                  _elem154 = iprot.readString();
                  struct.last_reply_basic_seg.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setLast_reply_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LAST_REPLY_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.last_reply_phrase_seg = new ArrayList<String>(_list155.size);
                for (int _i156 = 0; _i156 < _list155.size; ++_i156)
                {
                  String _elem157;
                  _elem157 = iprot.readString();
                  struct.last_reply_phrase_seg.add(_elem157);
                }
                iprot.readListEnd();
              }
              struct.setLast_reply_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LAST_POST_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.last_post_basic_seg = new ArrayList<String>(_list158.size);
                for (int _i159 = 0; _i159 < _list158.size; ++_i159)
                {
                  String _elem160;
                  _elem160 = iprot.readString();
                  struct.last_post_basic_seg.add(_elem160);
                }
                iprot.readListEnd();
              }
              struct.setLast_post_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_POST_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.last_post_phrase_seg = new ArrayList<String>(_list161.size);
                for (int _i162 = 0; _i162 < _list161.size; ++_i162)
                {
                  String _elem163;
                  _elem163 = iprot.readString();
                  struct.last_post_phrase_seg.add(_elem163);
                }
                iprot.readListEnd();
              }
              struct.setLast_post_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextPostReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.raw_curr_post != null) {
        if (struct.isSetRaw_curr_post()) {
          oprot.writeFieldBegin(RAW_CURR_POST_FIELD_DESC);
          oprot.writeString(struct.raw_curr_post);
          oprot.writeFieldEnd();
        }
      }
      if (struct.raw_last_reply != null) {
        if (struct.isSetRaw_last_reply()) {
          oprot.writeFieldBegin(RAW_LAST_REPLY_FIELD_DESC);
          oprot.writeString(struct.raw_last_reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.raw_last_post != null) {
        if (struct.isSetRaw_last_post()) {
          oprot.writeFieldBegin(RAW_LAST_POST_FIELD_DESC);
          oprot.writeString(struct.raw_last_post);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.replys != null) {
        if (struct.isSetReplys()) {
          oprot.writeFieldBegin(REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replys.size()));
            for (Reply _iter164 : struct.replys)
            {
              _iter164.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.post_tags != null) {
        if (struct.isSetPost_tags()) {
          oprot.writeFieldBegin(POST_TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.post_tags.size()));
            for (Map.Entry<Short, Short> _iter165 : struct.post_tags.entrySet())
            {
              oprot.writeI16(_iter165.getKey());
              oprot.writeI16(_iter165.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nostopwords_seg_post != null) {
        if (struct.isSetNostopwords_seg_post()) {
          oprot.writeFieldBegin(NOSTOPWORDS_SEG_POST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nostopwords_seg_post.size()));
            for (String _iter166 : struct.nostopwords_seg_post)
            {
              oprot.writeString(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.feature_score != null) {
        if (struct.isSetFeature_score()) {
          oprot.writeFieldBegin(FEATURE_SCORE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.feature_score.size()));
            for (Map.Entry<String, Double> _iter167 : struct.feature_score.entrySet())
            {
              oprot.writeString(_iter167.getKey());
              oprot.writeDouble(_iter167.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEs_score()) {
        oprot.writeFieldBegin(ES_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.es_score);
        oprot.writeFieldEnd();
      }
      if (struct.debug_info != null) {
        if (struct.isSetDebug_info()) {
          oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
          oprot.writeString(struct.debug_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_score()) {
        oprot.writeFieldBegin(MAX_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.max_score);
        oprot.writeFieldEnd();
      }
      if (struct.curr_post_basic_seg != null) {
        if (struct.isSetCurr_post_basic_seg()) {
          oprot.writeFieldBegin(CURR_POST_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.curr_post_basic_seg.size()));
            for (String _iter168 : struct.curr_post_basic_seg)
            {
              oprot.writeString(_iter168);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.curr_post_phrase_seg != null) {
        if (struct.isSetCurr_post_phrase_seg()) {
          oprot.writeFieldBegin(CURR_POST_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.curr_post_phrase_seg.size()));
            for (String _iter169 : struct.curr_post_phrase_seg)
            {
              oprot.writeString(_iter169);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_reply_basic_seg != null) {
        if (struct.isSetLast_reply_basic_seg()) {
          oprot.writeFieldBegin(LAST_REPLY_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_reply_basic_seg.size()));
            for (String _iter170 : struct.last_reply_basic_seg)
            {
              oprot.writeString(_iter170);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_reply_phrase_seg != null) {
        if (struct.isSetLast_reply_phrase_seg()) {
          oprot.writeFieldBegin(LAST_REPLY_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_reply_phrase_seg.size()));
            for (String _iter171 : struct.last_reply_phrase_seg)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_post_basic_seg != null) {
        if (struct.isSetLast_post_basic_seg()) {
          oprot.writeFieldBegin(LAST_POST_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_post_basic_seg.size()));
            for (String _iter172 : struct.last_post_basic_seg)
            {
              oprot.writeString(_iter172);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.last_post_phrase_seg != null) {
        if (struct.isSetLast_post_phrase_seg()) {
          oprot.writeFieldBegin(LAST_POST_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.last_post_phrase_seg.size()));
            for (String _iter173 : struct.last_post_phrase_seg)
            {
              oprot.writeString(_iter173);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextPostReplyTupleSchemeFactory implements SchemeFactory {
    public ContextPostReplyTupleScheme getScheme() {
      return new ContextPostReplyTupleScheme();
    }
  }

  private static class ContextPostReplyTupleScheme extends TupleScheme<ContextPostReply> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextPostReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRaw_curr_post()) {
        optionals.set(0);
      }
      if (struct.isSetRaw_last_reply()) {
        optionals.set(1);
      }
      if (struct.isSetRaw_last_post()) {
        optionals.set(2);
      }
      if (struct.isSetScore()) {
        optionals.set(3);
      }
      if (struct.isSetReplys()) {
        optionals.set(4);
      }
      if (struct.isSetPost_tags()) {
        optionals.set(5);
      }
      if (struct.isSetNostopwords_seg_post()) {
        optionals.set(6);
      }
      if (struct.isSetFeature_score()) {
        optionals.set(7);
      }
      if (struct.isSetEs_score()) {
        optionals.set(8);
      }
      if (struct.isSetDebug_info()) {
        optionals.set(9);
      }
      if (struct.isSetMax_score()) {
        optionals.set(10);
      }
      if (struct.isSetCurr_post_basic_seg()) {
        optionals.set(11);
      }
      if (struct.isSetCurr_post_phrase_seg()) {
        optionals.set(12);
      }
      if (struct.isSetLast_reply_basic_seg()) {
        optionals.set(13);
      }
      if (struct.isSetLast_reply_phrase_seg()) {
        optionals.set(14);
      }
      if (struct.isSetLast_post_basic_seg()) {
        optionals.set(15);
      }
      if (struct.isSetLast_post_phrase_seg()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetRaw_curr_post()) {
        oprot.writeString(struct.raw_curr_post);
      }
      if (struct.isSetRaw_last_reply()) {
        oprot.writeString(struct.raw_last_reply);
      }
      if (struct.isSetRaw_last_post()) {
        oprot.writeString(struct.raw_last_post);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Reply _iter174 : struct.replys)
          {
            _iter174.write(oprot);
          }
        }
      }
      if (struct.isSetPost_tags()) {
        {
          oprot.writeI32(struct.post_tags.size());
          for (Map.Entry<Short, Short> _iter175 : struct.post_tags.entrySet())
          {
            oprot.writeI16(_iter175.getKey());
            oprot.writeI16(_iter175.getValue());
          }
        }
      }
      if (struct.isSetNostopwords_seg_post()) {
        {
          oprot.writeI32(struct.nostopwords_seg_post.size());
          for (String _iter176 : struct.nostopwords_seg_post)
          {
            oprot.writeString(_iter176);
          }
        }
      }
      if (struct.isSetFeature_score()) {
        {
          oprot.writeI32(struct.feature_score.size());
          for (Map.Entry<String, Double> _iter177 : struct.feature_score.entrySet())
          {
            oprot.writeString(_iter177.getKey());
            oprot.writeDouble(_iter177.getValue());
          }
        }
      }
      if (struct.isSetEs_score()) {
        oprot.writeDouble(struct.es_score);
      }
      if (struct.isSetDebug_info()) {
        oprot.writeString(struct.debug_info);
      }
      if (struct.isSetMax_score()) {
        oprot.writeDouble(struct.max_score);
      }
      if (struct.isSetCurr_post_basic_seg()) {
        {
          oprot.writeI32(struct.curr_post_basic_seg.size());
          for (String _iter178 : struct.curr_post_basic_seg)
          {
            oprot.writeString(_iter178);
          }
        }
      }
      if (struct.isSetCurr_post_phrase_seg()) {
        {
          oprot.writeI32(struct.curr_post_phrase_seg.size());
          for (String _iter179 : struct.curr_post_phrase_seg)
          {
            oprot.writeString(_iter179);
          }
        }
      }
      if (struct.isSetLast_reply_basic_seg()) {
        {
          oprot.writeI32(struct.last_reply_basic_seg.size());
          for (String _iter180 : struct.last_reply_basic_seg)
          {
            oprot.writeString(_iter180);
          }
        }
      }
      if (struct.isSetLast_reply_phrase_seg()) {
        {
          oprot.writeI32(struct.last_reply_phrase_seg.size());
          for (String _iter181 : struct.last_reply_phrase_seg)
          {
            oprot.writeString(_iter181);
          }
        }
      }
      if (struct.isSetLast_post_basic_seg()) {
        {
          oprot.writeI32(struct.last_post_basic_seg.size());
          for (String _iter182 : struct.last_post_basic_seg)
          {
            oprot.writeString(_iter182);
          }
        }
      }
      if (struct.isSetLast_post_phrase_seg()) {
        {
          oprot.writeI32(struct.last_post_phrase_seg.size());
          for (String _iter183 : struct.last_post_phrase_seg)
          {
            oprot.writeString(_iter183);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextPostReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.raw_curr_post = iprot.readString();
        struct.setRaw_curr_postIsSet(true);
      }
      if (incoming.get(1)) {
        struct.raw_last_reply = iprot.readString();
        struct.setRaw_last_replyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.raw_last_post = iprot.readString();
        struct.setRaw_last_postIsSet(true);
      }
      if (incoming.get(3)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list184 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replys = new ArrayList<Reply>(_list184.size);
          for (int _i185 = 0; _i185 < _list184.size; ++_i185)
          {
            Reply _elem186;
            _elem186 = new Reply();
            _elem186.read(iprot);
            struct.replys.add(_elem186);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map187 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.post_tags = new HashMap<Short,Short>(2*_map187.size);
          for (int _i188 = 0; _i188 < _map187.size; ++_i188)
          {
            short _key189;
            short _val190;
            _key189 = iprot.readI16();
            _val190 = iprot.readI16();
            struct.post_tags.put(_key189, _val190);
          }
        }
        struct.setPost_tagsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.nostopwords_seg_post = new ArrayList<String>(_list191.size);
          for (int _i192 = 0; _i192 < _list191.size; ++_i192)
          {
            String _elem193;
            _elem193 = iprot.readString();
            struct.nostopwords_seg_post.add(_elem193);
          }
        }
        struct.setNostopwords_seg_postIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map194 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.feature_score = new HashMap<String,Double>(2*_map194.size);
          for (int _i195 = 0; _i195 < _map194.size; ++_i195)
          {
            String _key196;
            double _val197;
            _key196 = iprot.readString();
            _val197 = iprot.readDouble();
            struct.feature_score.put(_key196, _val197);
          }
        }
        struct.setFeature_scoreIsSet(true);
      }
      if (incoming.get(8)) {
        struct.es_score = iprot.readDouble();
        struct.setEs_scoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.debug_info = iprot.readString();
        struct.setDebug_infoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.max_score = iprot.readDouble();
        struct.setMax_scoreIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list198 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.curr_post_basic_seg = new ArrayList<String>(_list198.size);
          for (int _i199 = 0; _i199 < _list198.size; ++_i199)
          {
            String _elem200;
            _elem200 = iprot.readString();
            struct.curr_post_basic_seg.add(_elem200);
          }
        }
        struct.setCurr_post_basic_segIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.curr_post_phrase_seg = new ArrayList<String>(_list201.size);
          for (int _i202 = 0; _i202 < _list201.size; ++_i202)
          {
            String _elem203;
            _elem203 = iprot.readString();
            struct.curr_post_phrase_seg.add(_elem203);
          }
        }
        struct.setCurr_post_phrase_segIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list204 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_reply_basic_seg = new ArrayList<String>(_list204.size);
          for (int _i205 = 0; _i205 < _list204.size; ++_i205)
          {
            String _elem206;
            _elem206 = iprot.readString();
            struct.last_reply_basic_seg.add(_elem206);
          }
        }
        struct.setLast_reply_basic_segIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_reply_phrase_seg = new ArrayList<String>(_list207.size);
          for (int _i208 = 0; _i208 < _list207.size; ++_i208)
          {
            String _elem209;
            _elem209 = iprot.readString();
            struct.last_reply_phrase_seg.add(_elem209);
          }
        }
        struct.setLast_reply_phrase_segIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list210 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_post_basic_seg = new ArrayList<String>(_list210.size);
          for (int _i211 = 0; _i211 < _list210.size; ++_i211)
          {
            String _elem212;
            _elem212 = iprot.readString();
            struct.last_post_basic_seg.add(_elem212);
          }
        }
        struct.setLast_post_basic_segIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.last_post_phrase_seg = new ArrayList<String>(_list213.size);
          for (int _i214 = 0; _i214 < _list213.size; ++_i214)
          {
            String _elem215;
            _elem215 = iprot.readString();
            struct.last_post_phrase_seg.add(_elem215);
          }
        }
        struct.setLast_post_phrase_segIsSet(true);
      }
    }
  }

}

