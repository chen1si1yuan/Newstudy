/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class UserContextUnit implements org.apache.thrift.TBase<UserContextUnit, UserContextUnit._Fields>, java.io.Serializable, Cloneable, Comparable<UserContextUnit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserContextUnit");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("rewrite", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("request_timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("response_timestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROACTIVE_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("proactive_reply", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REPLY_FROM_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_from_service", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserContextUnitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserContextUnitTupleSchemeFactory());
  }

  public String query; // optional
  public MultiRewrite rewrite; // optional
  public long request_timestamp; // optional
  public long response_timestamp; // optional
  public List<Reply> replys; // optional
  public ProactiveReply proactive_reply; // optional
  /**
   * 
   * @see ServiceName
   */
  public ServiceName reply_from_service; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    REWRITE((short)2, "rewrite"),
    REQUEST_TIMESTAMP((short)3, "request_timestamp"),
    RESPONSE_TIMESTAMP((short)4, "response_timestamp"),
    REPLYS((short)5, "replys"),
    PROACTIVE_REPLY((short)6, "proactive_reply"),
    /**
     * 
     * @see ServiceName
     */
    REPLY_FROM_SERVICE((short)7, "reply_from_service");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // REWRITE
          return REWRITE;
        case 3: // REQUEST_TIMESTAMP
          return REQUEST_TIMESTAMP;
        case 4: // RESPONSE_TIMESTAMP
          return RESPONSE_TIMESTAMP;
        case 5: // REPLYS
          return REPLYS;
        case 6: // PROACTIVE_REPLY
          return PROACTIVE_REPLY;
        case 7: // REPLY_FROM_SERVICE
          return REPLY_FROM_SERVICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REQUEST_TIMESTAMP_ISSET_ID = 0;
  private static final int __RESPONSE_TIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY,_Fields.REWRITE,_Fields.REQUEST_TIMESTAMP,_Fields.RESPONSE_TIMESTAMP,_Fields.REPLYS,_Fields.PROACTIVE_REPLY,_Fields.REPLY_FROM_SERVICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REWRITE, new org.apache.thrift.meta_data.FieldMetaData("rewrite", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiRewrite.class)));
    tmpMap.put(_Fields.REQUEST_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("request_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESPONSE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("response_timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class))));
    tmpMap.put(_Fields.PROACTIVE_REPLY, new org.apache.thrift.meta_data.FieldMetaData("proactive_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProactiveReply.class)));
    tmpMap.put(_Fields.REPLY_FROM_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("reply_from_service", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceName.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserContextUnit.class, metaDataMap);
  }

  public UserContextUnit() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserContextUnit(UserContextUnit other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetRewrite()) {
      this.rewrite = new MultiRewrite(other.rewrite);
    }
    this.request_timestamp = other.request_timestamp;
    this.response_timestamp = other.response_timestamp;
    if (other.isSetReplys()) {
      List<Reply> __this__replys = new ArrayList<Reply>(other.replys.size());
      for (Reply other_element : other.replys) {
        __this__replys.add(new Reply(other_element));
      }
      this.replys = __this__replys;
    }
    if (other.isSetProactive_reply()) {
      this.proactive_reply = new ProactiveReply(other.proactive_reply);
    }
    if (other.isSetReply_from_service()) {
      this.reply_from_service = other.reply_from_service;
    }
  }

  public UserContextUnit deepCopy() {
    return new UserContextUnit(this);
  }

  
  public void clear() {
    this.query = null;
    this.rewrite = null;
    setRequest_timestampIsSet(false);
    this.request_timestamp = 0;
    setResponse_timestampIsSet(false);
    this.response_timestamp = 0;
    this.replys = null;
    this.proactive_reply = null;
    this.reply_from_service = null;
  }

  public String getQuery() {
    return this.query;
  }

  public UserContextUnit setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public MultiRewrite getRewrite() {
    return this.rewrite;
  }

  public UserContextUnit setRewrite(MultiRewrite rewrite) {
    this.rewrite = rewrite;
    return this;
  }

  public void unsetRewrite() {
    this.rewrite = null;
  }

  /** Returns true if field rewrite is set (has been assigned a value) and false otherwise */
  public boolean isSetRewrite() {
    return this.rewrite != null;
  }

  public void setRewriteIsSet(boolean value) {
    if (!value) {
      this.rewrite = null;
    }
  }

  public long getRequest_timestamp() {
    return this.request_timestamp;
  }

  public UserContextUnit setRequest_timestamp(long request_timestamp) {
    this.request_timestamp = request_timestamp;
    setRequest_timestampIsSet(true);
    return this;
  }

  public void unsetRequest_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field request_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID);
  }

  public void setRequest_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIMESTAMP_ISSET_ID, value);
  }

  public long getResponse_timestamp() {
    return this.response_timestamp;
  }

  public UserContextUnit setResponse_timestamp(long response_timestamp) {
    this.response_timestamp = response_timestamp;
    setResponse_timestampIsSet(true);
    return this;
  }

  public void unsetResponse_timestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSE_TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field response_timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetResponse_timestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSE_TIMESTAMP_ISSET_ID);
  }

  public void setResponse_timestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSE_TIMESTAMP_ISSET_ID, value);
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public java.util.Iterator<Reply> getReplysIterator() {
    return (this.replys == null) ? null : this.replys.iterator();
  }

  public void addToReplys(Reply elem) {
    if (this.replys == null) {
      this.replys = new ArrayList<Reply>();
    }
    this.replys.add(elem);
  }

  public List<Reply> getReplys() {
    return this.replys;
  }

  public UserContextUnit setReplys(List<Reply> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public ProactiveReply getProactive_reply() {
    return this.proactive_reply;
  }

  public UserContextUnit setProactive_reply(ProactiveReply proactive_reply) {
    this.proactive_reply = proactive_reply;
    return this;
  }

  public void unsetProactive_reply() {
    this.proactive_reply = null;
  }

  /** Returns true if field proactive_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetProactive_reply() {
    return this.proactive_reply != null;
  }

  public void setProactive_replyIsSet(boolean value) {
    if (!value) {
      this.proactive_reply = null;
    }
  }

  /**
   * 
   * @see ServiceName
   */
  public ServiceName getReply_from_service() {
    return this.reply_from_service;
  }

  /**
   * 
   * @see ServiceName
   */
  public UserContextUnit setReply_from_service(ServiceName reply_from_service) {
    this.reply_from_service = reply_from_service;
    return this;
  }

  public void unsetReply_from_service() {
    this.reply_from_service = null;
  }

  /** Returns true if field reply_from_service is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_from_service() {
    return this.reply_from_service != null;
  }

  public void setReply_from_serviceIsSet(boolean value) {
    if (!value) {
      this.reply_from_service = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case REWRITE:
      if (value == null) {
        unsetRewrite();
      } else {
        setRewrite((MultiRewrite)value);
      }
      break;

    case REQUEST_TIMESTAMP:
      if (value == null) {
        unsetRequest_timestamp();
      } else {
        setRequest_timestamp((Long)value);
      }
      break;

    case RESPONSE_TIMESTAMP:
      if (value == null) {
        unsetResponse_timestamp();
      } else {
        setResponse_timestamp((Long)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((List<Reply>)value);
      }
      break;

    case PROACTIVE_REPLY:
      if (value == null) {
        unsetProactive_reply();
      } else {
        setProactive_reply((ProactiveReply)value);
      }
      break;

    case REPLY_FROM_SERVICE:
      if (value == null) {
        unsetReply_from_service();
      } else {
        setReply_from_service((ServiceName)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case REWRITE:
      return getRewrite();

    case REQUEST_TIMESTAMP:
      return Long.valueOf(getRequest_timestamp());

    case RESPONSE_TIMESTAMP:
      return Long.valueOf(getResponse_timestamp());

    case REPLYS:
      return getReplys();

    case PROACTIVE_REPLY:
      return getProactive_reply();

    case REPLY_FROM_SERVICE:
      return getReply_from_service();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case REWRITE:
      return isSetRewrite();
    case REQUEST_TIMESTAMP:
      return isSetRequest_timestamp();
    case RESPONSE_TIMESTAMP:
      return isSetResponse_timestamp();
    case REPLYS:
      return isSetReplys();
    case PROACTIVE_REPLY:
      return isSetProactive_reply();
    case REPLY_FROM_SERVICE:
      return isSetReply_from_service();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserContextUnit)
      return this.equals((UserContextUnit)that);
    return false;
  }

  public boolean equals(UserContextUnit that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_rewrite = true && this.isSetRewrite();
    boolean that_present_rewrite = true && that.isSetRewrite();
    if (this_present_rewrite || that_present_rewrite) {
      if (!(this_present_rewrite && that_present_rewrite))
        return false;
      if (!this.rewrite.equals(that.rewrite))
        return false;
    }

    boolean this_present_request_timestamp = true && this.isSetRequest_timestamp();
    boolean that_present_request_timestamp = true && that.isSetRequest_timestamp();
    if (this_present_request_timestamp || that_present_request_timestamp) {
      if (!(this_present_request_timestamp && that_present_request_timestamp))
        return false;
      if (this.request_timestamp != that.request_timestamp)
        return false;
    }

    boolean this_present_response_timestamp = true && this.isSetResponse_timestamp();
    boolean that_present_response_timestamp = true && that.isSetResponse_timestamp();
    if (this_present_response_timestamp || that_present_response_timestamp) {
      if (!(this_present_response_timestamp && that_present_response_timestamp))
        return false;
      if (this.response_timestamp != that.response_timestamp)
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_proactive_reply = true && this.isSetProactive_reply();
    boolean that_present_proactive_reply = true && that.isSetProactive_reply();
    if (this_present_proactive_reply || that_present_proactive_reply) {
      if (!(this_present_proactive_reply && that_present_proactive_reply))
        return false;
      if (!this.proactive_reply.equals(that.proactive_reply))
        return false;
    }

    boolean this_present_reply_from_service = true && this.isSetReply_from_service();
    boolean that_present_reply_from_service = true && that.isSetReply_from_service();
    if (this_present_reply_from_service || that_present_reply_from_service) {
      if (!(this_present_reply_from_service && that_present_reply_from_service))
        return false;
      if (!this.reply_from_service.equals(that.reply_from_service))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(UserContextUnit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewrite()).compareTo(other.isSetRewrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewrite, other.rewrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_timestamp()).compareTo(other.isSetRequest_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_timestamp, other.request_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponse_timestamp()).compareTo(other.isSetResponse_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponse_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response_timestamp, other.response_timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProactive_reply()).compareTo(other.isSetProactive_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProactive_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proactive_reply, other.proactive_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_from_service()).compareTo(other.isSetReply_from_service());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_from_service()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_from_service, other.reply_from_service);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("UserContextUnit(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetRewrite()) {
      if (!first) sb.append(", ");
      sb.append("rewrite:");
      if (this.rewrite == null) {
        sb.append("null");
      } else {
        sb.append(this.rewrite);
      }
      first = false;
    }
    if (isSetRequest_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("request_timestamp:");
      sb.append(this.request_timestamp);
      first = false;
    }
    if (isSetResponse_timestamp()) {
      if (!first) sb.append(", ");
      sb.append("response_timestamp:");
      sb.append(this.response_timestamp);
      first = false;
    }
    if (isSetReplys()) {
      if (!first) sb.append(", ");
      sb.append("replys:");
      if (this.replys == null) {
        sb.append("null");
      } else {
        sb.append(this.replys);
      }
      first = false;
    }
    if (isSetProactive_reply()) {
      if (!first) sb.append(", ");
      sb.append("proactive_reply:");
      if (this.proactive_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.proactive_reply);
      }
      first = false;
    }
    if (isSetReply_from_service()) {
      if (!first) sb.append(", ");
      sb.append("reply_from_service:");
      if (this.reply_from_service == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_from_service);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rewrite != null) {
      rewrite.validate();
    }
    if (proactive_reply != null) {
      proactive_reply.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserContextUnitStandardSchemeFactory implements SchemeFactory {
    public UserContextUnitStandardScheme getScheme() {
      return new UserContextUnitStandardScheme();
    }
  }

  private static class UserContextUnitStandardScheme extends StandardScheme<UserContextUnit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserContextUnit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REWRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rewrite = new MultiRewrite();
              struct.rewrite.read(iprot);
              struct.setRewriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.request_timestamp = iprot.readI64();
              struct.setRequest_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESPONSE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.response_timestamp = iprot.readI64();
              struct.setResponse_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list382 = iprot.readListBegin();
                struct.replys = new ArrayList<Reply>(_list382.size);
                for (int _i383 = 0; _i383 < _list382.size; ++_i383)
                {
                  Reply _elem384;
                  _elem384 = new Reply();
                  _elem384.read(iprot);
                  struct.replys.add(_elem384);
                }
                iprot.readListEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROACTIVE_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.proactive_reply = new ProactiveReply();
              struct.proactive_reply.read(iprot);
              struct.setProactive_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPLY_FROM_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
              struct.setReply_from_serviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserContextUnit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rewrite != null) {
        if (struct.isSetRewrite()) {
          oprot.writeFieldBegin(REWRITE_FIELD_DESC);
          struct.rewrite.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRequest_timestamp()) {
        oprot.writeFieldBegin(REQUEST_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.request_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResponse_timestamp()) {
        oprot.writeFieldBegin(RESPONSE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.response_timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.replys != null) {
        if (struct.isSetReplys()) {
          oprot.writeFieldBegin(REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replys.size()));
            for (Reply _iter385 : struct.replys)
            {
              _iter385.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.proactive_reply != null) {
        if (struct.isSetProactive_reply()) {
          oprot.writeFieldBegin(PROACTIVE_REPLY_FIELD_DESC);
          struct.proactive_reply.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_from_service != null) {
        if (struct.isSetReply_from_service()) {
          oprot.writeFieldBegin(REPLY_FROM_SERVICE_FIELD_DESC);
          oprot.writeI32(struct.reply_from_service.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserContextUnitTupleSchemeFactory implements SchemeFactory {
    public UserContextUnitTupleScheme getScheme() {
      return new UserContextUnitTupleScheme();
    }
  }

  private static class UserContextUnitTupleScheme extends TupleScheme<UserContextUnit> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, UserContextUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetRewrite()) {
        optionals.set(1);
      }
      if (struct.isSetRequest_timestamp()) {
        optionals.set(2);
      }
      if (struct.isSetResponse_timestamp()) {
        optionals.set(3);
      }
      if (struct.isSetReplys()) {
        optionals.set(4);
      }
      if (struct.isSetProactive_reply()) {
        optionals.set(5);
      }
      if (struct.isSetReply_from_service()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetRewrite()) {
        struct.rewrite.write(oprot);
      }
      if (struct.isSetRequest_timestamp()) {
        oprot.writeI64(struct.request_timestamp);
      }
      if (struct.isSetResponse_timestamp()) {
        oprot.writeI64(struct.response_timestamp);
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Reply _iter386 : struct.replys)
          {
            _iter386.write(oprot);
          }
        }
      }
      if (struct.isSetProactive_reply()) {
        struct.proactive_reply.write(oprot);
      }
      if (struct.isSetReply_from_service()) {
        oprot.writeI32(struct.reply_from_service.getValue());
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, UserContextUnit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rewrite = new MultiRewrite();
        struct.rewrite.read(iprot);
        struct.setRewriteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.request_timestamp = iprot.readI64();
        struct.setRequest_timestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.response_timestamp = iprot.readI64();
        struct.setResponse_timestampIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list387 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replys = new ArrayList<Reply>(_list387.size);
          for (int _i388 = 0; _i388 < _list387.size; ++_i388)
          {
            Reply _elem389;
            _elem389 = new Reply();
            _elem389.read(iprot);
            struct.replys.add(_elem389);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(5)) {
        struct.proactive_reply = new ProactiveReply();
        struct.proactive_reply.read(iprot);
        struct.setProactive_replyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
        struct.setReply_from_serviceIsSet(true);
      }
    }
  }

}

