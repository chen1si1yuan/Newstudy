/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ResponseParams implements org.apache.thrift.TBase<ResponseParams, ResponseParams._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseParams");

  private static final org.apache.thrift.protocol.TField RETURN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("return_status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IS_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("is_terminal", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PROACTIVE_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("proactive_reply", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEBUG_MSGS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_msgs", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField CONTROL_INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("control_instruction", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField REMIND_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("remind_event", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField REPLY_FROM_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_from_service", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField WEATHER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("weather_info", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MUSIC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("music_content", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField AUDIO_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("audio_content", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField TAKEOUT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("takeout_info", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DOMAIN_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("domain_features", org.apache.thrift.protocol.TType.STRUCT, (short)101);
  private static final org.apache.thrift.protocol.TField INENT_HIJACK_FIELD_DESC = new org.apache.thrift.protocol.TField("inent_hijack", org.apache.thrift.protocol.TType.BOOL, (short)102);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see ReturnStatus
   */
  public ReturnStatus return_status; // optional
  public boolean is_terminal; // optional
  public List<Reply> replys; // optional
  public ProactiveReply proactive_reply; // optional
  public Map<String,String> debug_msgs; // optional
  public ControlInstruction control_instruction; // optional
  public RemindEvent remind_event; // optional
  /**
   * 
   * @see ServiceName
   */
  public ServiceName reply_from_service; // optional
  public List<weather> weather_info; // optional
  public List<music> music_content; // optional
  public List<audio> audio_content; // optional
  public TakeoutInfo takeout_info; // optional
  public DomainFeatures domain_features; // optional
  public boolean inent_hijack; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ReturnStatus
     */
    RETURN_STATUS((short)1, "return_status"),
    IS_TERMINAL((short)2, "is_terminal"),
    REPLYS((short)3, "replys"),
    PROACTIVE_REPLY((short)4, "proactive_reply"),
    DEBUG_MSGS((short)5, "debug_msgs"),
    CONTROL_INSTRUCTION((short)6, "control_instruction"),
    REMIND_EVENT((short)7, "remind_event"),
    /**
     * 
     * @see ServiceName
     */
    REPLY_FROM_SERVICE((short)8, "reply_from_service"),
    WEATHER_INFO((short)9, "weather_info"),
    MUSIC_CONTENT((short)10, "music_content"),
    AUDIO_CONTENT((short)11, "audio_content"),
    TAKEOUT_INFO((short)12, "takeout_info"),
    DOMAIN_FEATURES((short)101, "domain_features"),
    INENT_HIJACK((short)102, "inent_hijack");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RETURN_STATUS
          return RETURN_STATUS;
        case 2: // IS_TERMINAL
          return IS_TERMINAL;
        case 3: // REPLYS
          return REPLYS;
        case 4: // PROACTIVE_REPLY
          return PROACTIVE_REPLY;
        case 5: // DEBUG_MSGS
          return DEBUG_MSGS;
        case 6: // CONTROL_INSTRUCTION
          return CONTROL_INSTRUCTION;
        case 7: // REMIND_EVENT
          return REMIND_EVENT;
        case 8: // REPLY_FROM_SERVICE
          return REPLY_FROM_SERVICE;
        case 9: // WEATHER_INFO
          return WEATHER_INFO;
        case 10: // MUSIC_CONTENT
          return MUSIC_CONTENT;
        case 11: // AUDIO_CONTENT
          return AUDIO_CONTENT;
        case 12: // TAKEOUT_INFO
          return TAKEOUT_INFO;
        case 101: // DOMAIN_FEATURES
          return DOMAIN_FEATURES;
        case 102: // INENT_HIJACK
          return INENT_HIJACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_TERMINAL_ISSET_ID = 0;
  private static final int __INENT_HIJACK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RETURN_STATUS,_Fields.IS_TERMINAL,_Fields.REPLYS,_Fields.PROACTIVE_REPLY,_Fields.DEBUG_MSGS,_Fields.CONTROL_INSTRUCTION,_Fields.REMIND_EVENT,_Fields.REPLY_FROM_SERVICE,_Fields.WEATHER_INFO,_Fields.MUSIC_CONTENT,_Fields.AUDIO_CONTENT,_Fields.TAKEOUT_INFO,_Fields.DOMAIN_FEATURES,_Fields.INENT_HIJACK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RETURN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("return_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnStatus.class)));
    tmpMap.put(_Fields.IS_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("is_terminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class))));
    tmpMap.put(_Fields.PROACTIVE_REPLY, new org.apache.thrift.meta_data.FieldMetaData("proactive_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProactiveReply.class)));
    tmpMap.put(_Fields.DEBUG_MSGS, new org.apache.thrift.meta_data.FieldMetaData("debug_msgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONTROL_INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("control_instruction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ControlInstruction.class)));
    tmpMap.put(_Fields.REMIND_EVENT, new org.apache.thrift.meta_data.FieldMetaData("remind_event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemindEvent.class)));
    tmpMap.put(_Fields.REPLY_FROM_SERVICE, new org.apache.thrift.meta_data.FieldMetaData("reply_from_service", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceName.class)));
    tmpMap.put(_Fields.WEATHER_INFO, new org.apache.thrift.meta_data.FieldMetaData("weather_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, weather.class))));
    tmpMap.put(_Fields.MUSIC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("music_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, music.class))));
    tmpMap.put(_Fields.AUDIO_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("audio_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, audio.class))));
    tmpMap.put(_Fields.TAKEOUT_INFO, new org.apache.thrift.meta_data.FieldMetaData("takeout_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TakeoutInfo.class)));
    tmpMap.put(_Fields.DOMAIN_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("domain_features", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DomainFeatures.class)));
    tmpMap.put(_Fields.INENT_HIJACK, new org.apache.thrift.meta_data.FieldMetaData("inent_hijack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseParams.class, metaDataMap);
  }

  public ResponseParams() {
    this.is_terminal = false;

    this.inent_hijack = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseParams(ResponseParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReturn_status()) {
      this.return_status = other.return_status;
    }
    this.is_terminal = other.is_terminal;
    if (other.isSetReplys()) {
      List<Reply> __this__replys = new ArrayList<Reply>(other.replys.size());
      for (Reply other_element : other.replys) {
        __this__replys.add(new Reply(other_element));
      }
      this.replys = __this__replys;
    }
    if (other.isSetProactive_reply()) {
      this.proactive_reply = new ProactiveReply(other.proactive_reply);
    }
    if (other.isSetDebug_msgs()) {
      Map<String,String> __this__debug_msgs = new HashMap<String,String>(other.debug_msgs);
      this.debug_msgs = __this__debug_msgs;
    }
    if (other.isSetControl_instruction()) {
      this.control_instruction = new ControlInstruction(other.control_instruction);
    }
    if (other.isSetRemind_event()) {
      this.remind_event = new RemindEvent(other.remind_event);
    }
    if (other.isSetReply_from_service()) {
      this.reply_from_service = other.reply_from_service;
    }
    if (other.isSetWeather_info()) {
      List<weather> __this__weather_info = new ArrayList<weather>(other.weather_info.size());
      for (weather other_element : other.weather_info) {
        __this__weather_info.add(new weather(other_element));
      }
      this.weather_info = __this__weather_info;
    }
    if (other.isSetMusic_content()) {
      List<music> __this__music_content = new ArrayList<music>(other.music_content.size());
      for (music other_element : other.music_content) {
        __this__music_content.add(new music(other_element));
      }
      this.music_content = __this__music_content;
    }
    if (other.isSetAudio_content()) {
      List<audio> __this__audio_content = new ArrayList<audio>(other.audio_content.size());
      for (audio other_element : other.audio_content) {
        __this__audio_content.add(new audio(other_element));
      }
      this.audio_content = __this__audio_content;
    }
    if (other.isSetTakeout_info()) {
      this.takeout_info = new TakeoutInfo(other.takeout_info);
    }
    if (other.isSetDomain_features()) {
      this.domain_features = new DomainFeatures(other.domain_features);
    }
    this.inent_hijack = other.inent_hijack;
  }

  public ResponseParams deepCopy() {
    return new ResponseParams(this);
  }

  
  public void clear() {
    this.return_status = null;
    this.is_terminal = false;

    this.replys = null;
    this.proactive_reply = null;
    this.debug_msgs = null;
    this.control_instruction = null;
    this.remind_event = null;
    this.reply_from_service = null;
    this.weather_info = null;
    this.music_content = null;
    this.audio_content = null;
    this.takeout_info = null;
    this.domain_features = null;
    this.inent_hijack = false;

  }

  /**
   * 
   * @see ReturnStatus
   */
  public ReturnStatus getReturn_status() {
    return this.return_status;
  }

  /**
   * 
   * @see ReturnStatus
   */
  public ResponseParams setReturn_status(ReturnStatus return_status) {
    this.return_status = return_status;
    return this;
  }

  public void unsetReturn_status() {
    this.return_status = null;
  }

  /** Returns true if field return_status is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_status() {
    return this.return_status != null;
  }

  public void setReturn_statusIsSet(boolean value) {
    if (!value) {
      this.return_status = null;
    }
  }

  public boolean isIs_terminal() {
    return this.is_terminal;
  }

  public ResponseParams setIs_terminal(boolean is_terminal) {
    this.is_terminal = is_terminal;
    setIs_terminalIsSet(true);
    return this;
  }

  public void unsetIs_terminal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID);
  }

  /** Returns true if field is_terminal is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_terminal() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID);
  }

  public void setIs_terminalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_TERMINAL_ISSET_ID, value);
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public java.util.Iterator<Reply> getReplysIterator() {
    return (this.replys == null) ? null : this.replys.iterator();
  }

  public void addToReplys(Reply elem) {
    if (this.replys == null) {
      this.replys = new ArrayList<Reply>();
    }
    this.replys.add(elem);
  }

  public List<Reply> getReplys() {
    return this.replys;
  }

  public ResponseParams setReplys(List<Reply> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public ProactiveReply getProactive_reply() {
    return this.proactive_reply;
  }

  public ResponseParams setProactive_reply(ProactiveReply proactive_reply) {
    this.proactive_reply = proactive_reply;
    return this;
  }

  public void unsetProactive_reply() {
    this.proactive_reply = null;
  }

  /** Returns true if field proactive_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetProactive_reply() {
    return this.proactive_reply != null;
  }

  public void setProactive_replyIsSet(boolean value) {
    if (!value) {
      this.proactive_reply = null;
    }
  }

  public int getDebug_msgsSize() {
    return (this.debug_msgs == null) ? 0 : this.debug_msgs.size();
  }

  public void putToDebug_msgs(String key, String val) {
    if (this.debug_msgs == null) {
      this.debug_msgs = new HashMap<String,String>();
    }
    this.debug_msgs.put(key, val);
  }

  public Map<String,String> getDebug_msgs() {
    return this.debug_msgs;
  }

  public ResponseParams setDebug_msgs(Map<String,String> debug_msgs) {
    this.debug_msgs = debug_msgs;
    return this;
  }

  public void unsetDebug_msgs() {
    this.debug_msgs = null;
  }

  /** Returns true if field debug_msgs is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_msgs() {
    return this.debug_msgs != null;
  }

  public void setDebug_msgsIsSet(boolean value) {
    if (!value) {
      this.debug_msgs = null;
    }
  }

  public ControlInstruction getControl_instruction() {
    return this.control_instruction;
  }

  public ResponseParams setControl_instruction(ControlInstruction control_instruction) {
    this.control_instruction = control_instruction;
    return this;
  }

  public void unsetControl_instruction() {
    this.control_instruction = null;
  }

  /** Returns true if field control_instruction is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_instruction() {
    return this.control_instruction != null;
  }

  public void setControl_instructionIsSet(boolean value) {
    if (!value) {
      this.control_instruction = null;
    }
  }

  public RemindEvent getRemind_event() {
    return this.remind_event;
  }

  public ResponseParams setRemind_event(RemindEvent remind_event) {
    this.remind_event = remind_event;
    return this;
  }

  public void unsetRemind_event() {
    this.remind_event = null;
  }

  /** Returns true if field remind_event is set (has been assigned a value) and false otherwise */
  public boolean isSetRemind_event() {
    return this.remind_event != null;
  }

  public void setRemind_eventIsSet(boolean value) {
    if (!value) {
      this.remind_event = null;
    }
  }

  /**
   * 
   * @see ServiceName
   */
  public ServiceName getReply_from_service() {
    return this.reply_from_service;
  }

  /**
   * 
   * @see ServiceName
   */
  public ResponseParams setReply_from_service(ServiceName reply_from_service) {
    this.reply_from_service = reply_from_service;
    return this;
  }

  public void unsetReply_from_service() {
    this.reply_from_service = null;
  }

  /** Returns true if field reply_from_service is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_from_service() {
    return this.reply_from_service != null;
  }

  public void setReply_from_serviceIsSet(boolean value) {
    if (!value) {
      this.reply_from_service = null;
    }
  }

  public int getWeather_infoSize() {
    return (this.weather_info == null) ? 0 : this.weather_info.size();
  }

  public java.util.Iterator<weather> getWeather_infoIterator() {
    return (this.weather_info == null) ? null : this.weather_info.iterator();
  }

  public void addToWeather_info(weather elem) {
    if (this.weather_info == null) {
      this.weather_info = new ArrayList<weather>();
    }
    this.weather_info.add(elem);
  }

  public List<weather> getWeather_info() {
    return this.weather_info;
  }

  public ResponseParams setWeather_info(List<weather> weather_info) {
    this.weather_info = weather_info;
    return this;
  }

  public void unsetWeather_info() {
    this.weather_info = null;
  }

  /** Returns true if field weather_info is set (has been assigned a value) and false otherwise */
  public boolean isSetWeather_info() {
    return this.weather_info != null;
  }

  public void setWeather_infoIsSet(boolean value) {
    if (!value) {
      this.weather_info = null;
    }
  }

  public int getMusic_contentSize() {
    return (this.music_content == null) ? 0 : this.music_content.size();
  }

  public java.util.Iterator<music> getMusic_contentIterator() {
    return (this.music_content == null) ? null : this.music_content.iterator();
  }

  public void addToMusic_content(music elem) {
    if (this.music_content == null) {
      this.music_content = new ArrayList<music>();
    }
    this.music_content.add(elem);
  }

  public List<music> getMusic_content() {
    return this.music_content;
  }

  public ResponseParams setMusic_content(List<music> music_content) {
    this.music_content = music_content;
    return this;
  }

  public void unsetMusic_content() {
    this.music_content = null;
  }

  /** Returns true if field music_content is set (has been assigned a value) and false otherwise */
  public boolean isSetMusic_content() {
    return this.music_content != null;
  }

  public void setMusic_contentIsSet(boolean value) {
    if (!value) {
      this.music_content = null;
    }
  }

  public int getAudio_contentSize() {
    return (this.audio_content == null) ? 0 : this.audio_content.size();
  }

  public java.util.Iterator<audio> getAudio_contentIterator() {
    return (this.audio_content == null) ? null : this.audio_content.iterator();
  }

  public void addToAudio_content(audio elem) {
    if (this.audio_content == null) {
      this.audio_content = new ArrayList<audio>();
    }
    this.audio_content.add(elem);
  }

  public List<audio> getAudio_content() {
    return this.audio_content;
  }

  public ResponseParams setAudio_content(List<audio> audio_content) {
    this.audio_content = audio_content;
    return this;
  }

  public void unsetAudio_content() {
    this.audio_content = null;
  }

  /** Returns true if field audio_content is set (has been assigned a value) and false otherwise */
  public boolean isSetAudio_content() {
    return this.audio_content != null;
  }

  public void setAudio_contentIsSet(boolean value) {
    if (!value) {
      this.audio_content = null;
    }
  }

  public TakeoutInfo getTakeout_info() {
    return this.takeout_info;
  }

  public ResponseParams setTakeout_info(TakeoutInfo takeout_info) {
    this.takeout_info = takeout_info;
    return this;
  }

  public void unsetTakeout_info() {
    this.takeout_info = null;
  }

  /** Returns true if field takeout_info is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeout_info() {
    return this.takeout_info != null;
  }

  public void setTakeout_infoIsSet(boolean value) {
    if (!value) {
      this.takeout_info = null;
    }
  }

  public DomainFeatures getDomain_features() {
    return this.domain_features;
  }

  public ResponseParams setDomain_features(DomainFeatures domain_features) {
    this.domain_features = domain_features;
    return this;
  }

  public void unsetDomain_features() {
    this.domain_features = null;
  }

  /** Returns true if field domain_features is set (has been assigned a value) and false otherwise */
  public boolean isSetDomain_features() {
    return this.domain_features != null;
  }

  public void setDomain_featuresIsSet(boolean value) {
    if (!value) {
      this.domain_features = null;
    }
  }

  public boolean isInent_hijack() {
    return this.inent_hijack;
  }

  public ResponseParams setInent_hijack(boolean inent_hijack) {
    this.inent_hijack = inent_hijack;
    setInent_hijackIsSet(true);
    return this;
  }

  public void unsetInent_hijack() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INENT_HIJACK_ISSET_ID);
  }

  /** Returns true if field inent_hijack is set (has been assigned a value) and false otherwise */
  public boolean isSetInent_hijack() {
    return EncodingUtils.testBit(__isset_bitfield, __INENT_HIJACK_ISSET_ID);
  }

  public void setInent_hijackIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INENT_HIJACK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RETURN_STATUS:
      if (value == null) {
        unsetReturn_status();
      } else {
        setReturn_status((ReturnStatus)value);
      }
      break;

    case IS_TERMINAL:
      if (value == null) {
        unsetIs_terminal();
      } else {
        setIs_terminal((Boolean)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((List<Reply>)value);
      }
      break;

    case PROACTIVE_REPLY:
      if (value == null) {
        unsetProactive_reply();
      } else {
        setProactive_reply((ProactiveReply)value);
      }
      break;

    case DEBUG_MSGS:
      if (value == null) {
        unsetDebug_msgs();
      } else {
        setDebug_msgs((Map<String,String>)value);
      }
      break;

    case CONTROL_INSTRUCTION:
      if (value == null) {
        unsetControl_instruction();
      } else {
        setControl_instruction((ControlInstruction)value);
      }
      break;

    case REMIND_EVENT:
      if (value == null) {
        unsetRemind_event();
      } else {
        setRemind_event((RemindEvent)value);
      }
      break;

    case REPLY_FROM_SERVICE:
      if (value == null) {
        unsetReply_from_service();
      } else {
        setReply_from_service((ServiceName)value);
      }
      break;

    case WEATHER_INFO:
      if (value == null) {
        unsetWeather_info();
      } else {
        setWeather_info((List<weather>)value);
      }
      break;

    case MUSIC_CONTENT:
      if (value == null) {
        unsetMusic_content();
      } else {
        setMusic_content((List<music>)value);
      }
      break;

    case AUDIO_CONTENT:
      if (value == null) {
        unsetAudio_content();
      } else {
        setAudio_content((List<audio>)value);
      }
      break;

    case TAKEOUT_INFO:
      if (value == null) {
        unsetTakeout_info();
      } else {
        setTakeout_info((TakeoutInfo)value);
      }
      break;

    case DOMAIN_FEATURES:
      if (value == null) {
        unsetDomain_features();
      } else {
        setDomain_features((DomainFeatures)value);
      }
      break;

    case INENT_HIJACK:
      if (value == null) {
        unsetInent_hijack();
      } else {
        setInent_hijack((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RETURN_STATUS:
      return getReturn_status();

    case IS_TERMINAL:
      return Boolean.valueOf(isIs_terminal());

    case REPLYS:
      return getReplys();

    case PROACTIVE_REPLY:
      return getProactive_reply();

    case DEBUG_MSGS:
      return getDebug_msgs();

    case CONTROL_INSTRUCTION:
      return getControl_instruction();

    case REMIND_EVENT:
      return getRemind_event();

    case REPLY_FROM_SERVICE:
      return getReply_from_service();

    case WEATHER_INFO:
      return getWeather_info();

    case MUSIC_CONTENT:
      return getMusic_content();

    case AUDIO_CONTENT:
      return getAudio_content();

    case TAKEOUT_INFO:
      return getTakeout_info();

    case DOMAIN_FEATURES:
      return getDomain_features();

    case INENT_HIJACK:
      return Boolean.valueOf(isInent_hijack());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RETURN_STATUS:
      return isSetReturn_status();
    case IS_TERMINAL:
      return isSetIs_terminal();
    case REPLYS:
      return isSetReplys();
    case PROACTIVE_REPLY:
      return isSetProactive_reply();
    case DEBUG_MSGS:
      return isSetDebug_msgs();
    case CONTROL_INSTRUCTION:
      return isSetControl_instruction();
    case REMIND_EVENT:
      return isSetRemind_event();
    case REPLY_FROM_SERVICE:
      return isSetReply_from_service();
    case WEATHER_INFO:
      return isSetWeather_info();
    case MUSIC_CONTENT:
      return isSetMusic_content();
    case AUDIO_CONTENT:
      return isSetAudio_content();
    case TAKEOUT_INFO:
      return isSetTakeout_info();
    case DOMAIN_FEATURES:
      return isSetDomain_features();
    case INENT_HIJACK:
      return isSetInent_hijack();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseParams)
      return this.equals((ResponseParams)that);
    return false;
  }

  public boolean equals(ResponseParams that) {
    if (that == null)
      return false;

    boolean this_present_return_status = true && this.isSetReturn_status();
    boolean that_present_return_status = true && that.isSetReturn_status();
    if (this_present_return_status || that_present_return_status) {
      if (!(this_present_return_status && that_present_return_status))
        return false;
      if (!this.return_status.equals(that.return_status))
        return false;
    }

    boolean this_present_is_terminal = true && this.isSetIs_terminal();
    boolean that_present_is_terminal = true && that.isSetIs_terminal();
    if (this_present_is_terminal || that_present_is_terminal) {
      if (!(this_present_is_terminal && that_present_is_terminal))
        return false;
      if (this.is_terminal != that.is_terminal)
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_proactive_reply = true && this.isSetProactive_reply();
    boolean that_present_proactive_reply = true && that.isSetProactive_reply();
    if (this_present_proactive_reply || that_present_proactive_reply) {
      if (!(this_present_proactive_reply && that_present_proactive_reply))
        return false;
      if (!this.proactive_reply.equals(that.proactive_reply))
        return false;
    }

    boolean this_present_debug_msgs = true && this.isSetDebug_msgs();
    boolean that_present_debug_msgs = true && that.isSetDebug_msgs();
    if (this_present_debug_msgs || that_present_debug_msgs) {
      if (!(this_present_debug_msgs && that_present_debug_msgs))
        return false;
      if (!this.debug_msgs.equals(that.debug_msgs))
        return false;
    }

    boolean this_present_control_instruction = true && this.isSetControl_instruction();
    boolean that_present_control_instruction = true && that.isSetControl_instruction();
    if (this_present_control_instruction || that_present_control_instruction) {
      if (!(this_present_control_instruction && that_present_control_instruction))
        return false;
      if (!this.control_instruction.equals(that.control_instruction))
        return false;
    }

    boolean this_present_remind_event = true && this.isSetRemind_event();
    boolean that_present_remind_event = true && that.isSetRemind_event();
    if (this_present_remind_event || that_present_remind_event) {
      if (!(this_present_remind_event && that_present_remind_event))
        return false;
      if (!this.remind_event.equals(that.remind_event))
        return false;
    }

    boolean this_present_reply_from_service = true && this.isSetReply_from_service();
    boolean that_present_reply_from_service = true && that.isSetReply_from_service();
    if (this_present_reply_from_service || that_present_reply_from_service) {
      if (!(this_present_reply_from_service && that_present_reply_from_service))
        return false;
      if (!this.reply_from_service.equals(that.reply_from_service))
        return false;
    }

    boolean this_present_weather_info = true && this.isSetWeather_info();
    boolean that_present_weather_info = true && that.isSetWeather_info();
    if (this_present_weather_info || that_present_weather_info) {
      if (!(this_present_weather_info && that_present_weather_info))
        return false;
      if (!this.weather_info.equals(that.weather_info))
        return false;
    }

    boolean this_present_music_content = true && this.isSetMusic_content();
    boolean that_present_music_content = true && that.isSetMusic_content();
    if (this_present_music_content || that_present_music_content) {
      if (!(this_present_music_content && that_present_music_content))
        return false;
      if (!this.music_content.equals(that.music_content))
        return false;
    }

    boolean this_present_audio_content = true && this.isSetAudio_content();
    boolean that_present_audio_content = true && that.isSetAudio_content();
    if (this_present_audio_content || that_present_audio_content) {
      if (!(this_present_audio_content && that_present_audio_content))
        return false;
      if (!this.audio_content.equals(that.audio_content))
        return false;
    }

    boolean this_present_takeout_info = true && this.isSetTakeout_info();
    boolean that_present_takeout_info = true && that.isSetTakeout_info();
    if (this_present_takeout_info || that_present_takeout_info) {
      if (!(this_present_takeout_info && that_present_takeout_info))
        return false;
      if (!this.takeout_info.equals(that.takeout_info))
        return false;
    }

    boolean this_present_domain_features = true && this.isSetDomain_features();
    boolean that_present_domain_features = true && that.isSetDomain_features();
    if (this_present_domain_features || that_present_domain_features) {
      if (!(this_present_domain_features && that_present_domain_features))
        return false;
      if (!this.domain_features.equals(that.domain_features))
        return false;
    }

    boolean this_present_inent_hijack = true && this.isSetInent_hijack();
    boolean that_present_inent_hijack = true && that.isSetInent_hijack();
    if (this_present_inent_hijack || that_present_inent_hijack) {
      if (!(this_present_inent_hijack && that_present_inent_hijack))
        return false;
      if (this.inent_hijack != that.inent_hijack)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ResponseParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReturn_status()).compareTo(other.isSetReturn_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_status, other.return_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_terminal()).compareTo(other.isSetIs_terminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_terminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_terminal, other.is_terminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProactive_reply()).compareTo(other.isSetProactive_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProactive_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proactive_reply, other.proactive_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_msgs()).compareTo(other.isSetDebug_msgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_msgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_msgs, other.debug_msgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_instruction()).compareTo(other.isSetControl_instruction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_instruction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_instruction, other.control_instruction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemind_event()).compareTo(other.isSetRemind_event());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemind_event()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remind_event, other.remind_event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_from_service()).compareTo(other.isSetReply_from_service());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_from_service()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_from_service, other.reply_from_service);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeather_info()).compareTo(other.isSetWeather_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeather_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weather_info, other.weather_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMusic_content()).compareTo(other.isSetMusic_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMusic_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.music_content, other.music_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudio_content()).compareTo(other.isSetAudio_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudio_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audio_content, other.audio_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeout_info()).compareTo(other.isSetTakeout_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeout_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeout_info, other.takeout_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomain_features()).compareTo(other.isSetDomain_features());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomain_features()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain_features, other.domain_features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInent_hijack()).compareTo(other.isSetInent_hijack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInent_hijack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inent_hijack, other.inent_hijack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseParams(");
    boolean first = true;

    if (isSetReturn_status()) {
      sb.append("return_status:");
      if (this.return_status == null) {
        sb.append("null");
      } else {
        sb.append(this.return_status);
      }
      first = false;
    }
    if (isSetIs_terminal()) {
      if (!first) sb.append(", ");
      sb.append("is_terminal:");
      sb.append(this.is_terminal);
      first = false;
    }
    if (isSetReplys()) {
      if (!first) sb.append(", ");
      sb.append("replys:");
      if (this.replys == null) {
        sb.append("null");
      } else {
        sb.append(this.replys);
      }
      first = false;
    }
    if (isSetProactive_reply()) {
      if (!first) sb.append(", ");
      sb.append("proactive_reply:");
      if (this.proactive_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.proactive_reply);
      }
      first = false;
    }
    if (isSetDebug_msgs()) {
      if (!first) sb.append(", ");
      sb.append("debug_msgs:");
      if (this.debug_msgs == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_msgs);
      }
      first = false;
    }
    if (isSetControl_instruction()) {
      if (!first) sb.append(", ");
      sb.append("control_instruction:");
      if (this.control_instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.control_instruction);
      }
      first = false;
    }
    if (isSetRemind_event()) {
      if (!first) sb.append(", ");
      sb.append("remind_event:");
      if (this.remind_event == null) {
        sb.append("null");
      } else {
        sb.append(this.remind_event);
      }
      first = false;
    }
    if (isSetReply_from_service()) {
      if (!first) sb.append(", ");
      sb.append("reply_from_service:");
      if (this.reply_from_service == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_from_service);
      }
      first = false;
    }
    if (isSetWeather_info()) {
      if (!first) sb.append(", ");
      sb.append("weather_info:");
      if (this.weather_info == null) {
        sb.append("null");
      } else {
        sb.append(this.weather_info);
      }
      first = false;
    }
    if (isSetMusic_content()) {
      if (!first) sb.append(", ");
      sb.append("music_content:");
      if (this.music_content == null) {
        sb.append("null");
      } else {
        sb.append(this.music_content);
      }
      first = false;
    }
    if (isSetAudio_content()) {
      if (!first) sb.append(", ");
      sb.append("audio_content:");
      if (this.audio_content == null) {
        sb.append("null");
      } else {
        sb.append(this.audio_content);
      }
      first = false;
    }
    if (isSetTakeout_info()) {
      if (!first) sb.append(", ");
      sb.append("takeout_info:");
      if (this.takeout_info == null) {
        sb.append("null");
      } else {
        sb.append(this.takeout_info);
      }
      first = false;
    }
    if (isSetDomain_features()) {
      if (!first) sb.append(", ");
      sb.append("domain_features:");
      if (this.domain_features == null) {
        sb.append("null");
      } else {
        sb.append(this.domain_features);
      }
      first = false;
    }
    if (isSetInent_hijack()) {
      if (!first) sb.append(", ");
      sb.append("inent_hijack:");
      sb.append(this.inent_hijack);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (proactive_reply != null) {
      proactive_reply.validate();
    }
    if (control_instruction != null) {
      control_instruction.validate();
    }
    if (remind_event != null) {
      remind_event.validate();
    }
    if (takeout_info != null) {
      takeout_info.validate();
    }
    if (domain_features != null) {
      domain_features.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseParamsStandardSchemeFactory implements SchemeFactory {
    public ResponseParamsStandardScheme getScheme() {
      return new ResponseParamsStandardScheme();
    }
  }

  private static class ResponseParamsStandardScheme extends StandardScheme<ResponseParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RETURN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.return_status = ReturnStatus.findByValue(iprot.readI32());
              struct.setReturn_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_terminal = iprot.readBool();
              struct.setIs_terminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list416 = iprot.readListBegin();
                struct.replys = new ArrayList<Reply>(_list416.size);
                for (int _i417 = 0; _i417 < _list416.size; ++_i417)
                {
                  Reply _elem418;
                  _elem418 = new Reply();
                  _elem418.read(iprot);
                  struct.replys.add(_elem418);
                }
                iprot.readListEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROACTIVE_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.proactive_reply = new ProactiveReply();
              struct.proactive_reply.read(iprot);
              struct.setProactive_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBUG_MSGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map419 = iprot.readMapBegin();
                struct.debug_msgs = new HashMap<String,String>(2*_map419.size);
                for (int _i420 = 0; _i420 < _map419.size; ++_i420)
                {
                  String _key421;
                  String _val422;
                  _key421 = iprot.readString();
                  _val422 = iprot.readString();
                  struct.debug_msgs.put(_key421, _val422);
                }
                iprot.readMapEnd();
              }
              struct.setDebug_msgsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTROL_INSTRUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.control_instruction = new ControlInstruction();
              struct.control_instruction.read(iprot);
              struct.setControl_instructionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMIND_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remind_event = new RemindEvent();
              struct.remind_event.read(iprot);
              struct.setRemind_eventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPLY_FROM_SERVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
              struct.setReply_from_serviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WEATHER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list423 = iprot.readListBegin();
                struct.weather_info = new ArrayList<weather>(_list423.size);
                for (int _i424 = 0; _i424 < _list423.size; ++_i424)
                {
                  weather _elem425;
                  _elem425 = new weather();
                  _elem425.read(iprot);
                  struct.weather_info.add(_elem425);
                }
                iprot.readListEnd();
              }
              struct.setWeather_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MUSIC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list426 = iprot.readListBegin();
                struct.music_content = new ArrayList<music>(_list426.size);
                for (int _i427 = 0; _i427 < _list426.size; ++_i427)
                {
                  music _elem428;
                  _elem428 = new music();
                  _elem428.read(iprot);
                  struct.music_content.add(_elem428);
                }
                iprot.readListEnd();
              }
              struct.setMusic_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUDIO_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list429 = iprot.readListBegin();
                struct.audio_content = new ArrayList<audio>(_list429.size);
                for (int _i430 = 0; _i430 < _list429.size; ++_i430)
                {
                  audio _elem431;
                  _elem431 = new audio();
                  _elem431.read(iprot);
                  struct.audio_content.add(_elem431);
                }
                iprot.readListEnd();
              }
              struct.setAudio_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TAKEOUT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.takeout_info = new TakeoutInfo();
              struct.takeout_info.read(iprot);
              struct.setTakeout_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // DOMAIN_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.domain_features = new DomainFeatures();
              struct.domain_features.read(iprot);
              struct.setDomain_featuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // INENT_HIJACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.inent_hijack = iprot.readBool();
              struct.setInent_hijackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.return_status != null) {
        if (struct.isSetReturn_status()) {
          oprot.writeFieldBegin(RETURN_STATUS_FIELD_DESC);
          oprot.writeI32(struct.return_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_terminal()) {
        oprot.writeFieldBegin(IS_TERMINAL_FIELD_DESC);
        oprot.writeBool(struct.is_terminal);
        oprot.writeFieldEnd();
      }
      if (struct.replys != null) {
        if (struct.isSetReplys()) {
          oprot.writeFieldBegin(REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replys.size()));
            for (Reply _iter432 : struct.replys)
            {
              _iter432.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.proactive_reply != null) {
        if (struct.isSetProactive_reply()) {
          oprot.writeFieldBegin(PROACTIVE_REPLY_FIELD_DESC);
          struct.proactive_reply.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_msgs != null) {
        if (struct.isSetDebug_msgs()) {
          oprot.writeFieldBegin(DEBUG_MSGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.debug_msgs.size()));
            for (Map.Entry<String, String> _iter433 : struct.debug_msgs.entrySet())
            {
              oprot.writeString(_iter433.getKey());
              oprot.writeString(_iter433.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.control_instruction != null) {
        if (struct.isSetControl_instruction()) {
          oprot.writeFieldBegin(CONTROL_INSTRUCTION_FIELD_DESC);
          struct.control_instruction.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remind_event != null) {
        if (struct.isSetRemind_event()) {
          oprot.writeFieldBegin(REMIND_EVENT_FIELD_DESC);
          struct.remind_event.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_from_service != null) {
        if (struct.isSetReply_from_service()) {
          oprot.writeFieldBegin(REPLY_FROM_SERVICE_FIELD_DESC);
          oprot.writeI32(struct.reply_from_service.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.weather_info != null) {
        if (struct.isSetWeather_info()) {
          oprot.writeFieldBegin(WEATHER_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.weather_info.size()));
            for (weather _iter434 : struct.weather_info)
            {
              _iter434.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.music_content != null) {
        if (struct.isSetMusic_content()) {
          oprot.writeFieldBegin(MUSIC_CONTENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.music_content.size()));
            for (music _iter435 : struct.music_content)
            {
              _iter435.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.audio_content != null) {
        if (struct.isSetAudio_content()) {
          oprot.writeFieldBegin(AUDIO_CONTENT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.audio_content.size()));
            for (audio _iter436 : struct.audio_content)
            {
              _iter436.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.takeout_info != null) {
        if (struct.isSetTakeout_info()) {
          oprot.writeFieldBegin(TAKEOUT_INFO_FIELD_DESC);
          struct.takeout_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.domain_features != null) {
        if (struct.isSetDomain_features()) {
          oprot.writeFieldBegin(DOMAIN_FEATURES_FIELD_DESC);
          struct.domain_features.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInent_hijack()) {
        oprot.writeFieldBegin(INENT_HIJACK_FIELD_DESC);
        oprot.writeBool(struct.inent_hijack);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseParamsTupleSchemeFactory implements SchemeFactory {
    public ResponseParamsTupleScheme getScheme() {
      return new ResponseParamsTupleScheme();
    }
  }

  private static class ResponseParamsTupleScheme extends TupleScheme<ResponseParams> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReturn_status()) {
        optionals.set(0);
      }
      if (struct.isSetIs_terminal()) {
        optionals.set(1);
      }
      if (struct.isSetReplys()) {
        optionals.set(2);
      }
      if (struct.isSetProactive_reply()) {
        optionals.set(3);
      }
      if (struct.isSetDebug_msgs()) {
        optionals.set(4);
      }
      if (struct.isSetControl_instruction()) {
        optionals.set(5);
      }
      if (struct.isSetRemind_event()) {
        optionals.set(6);
      }
      if (struct.isSetReply_from_service()) {
        optionals.set(7);
      }
      if (struct.isSetWeather_info()) {
        optionals.set(8);
      }
      if (struct.isSetMusic_content()) {
        optionals.set(9);
      }
      if (struct.isSetAudio_content()) {
        optionals.set(10);
      }
      if (struct.isSetTakeout_info()) {
        optionals.set(11);
      }
      if (struct.isSetDomain_features()) {
        optionals.set(12);
      }
      if (struct.isSetInent_hijack()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetReturn_status()) {
        oprot.writeI32(struct.return_status.getValue());
      }
      if (struct.isSetIs_terminal()) {
        oprot.writeBool(struct.is_terminal);
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Reply _iter437 : struct.replys)
          {
            _iter437.write(oprot);
          }
        }
      }
      if (struct.isSetProactive_reply()) {
        struct.proactive_reply.write(oprot);
      }
      if (struct.isSetDebug_msgs()) {
        {
          oprot.writeI32(struct.debug_msgs.size());
          for (Map.Entry<String, String> _iter438 : struct.debug_msgs.entrySet())
          {
            oprot.writeString(_iter438.getKey());
            oprot.writeString(_iter438.getValue());
          }
        }
      }
      if (struct.isSetControl_instruction()) {
        struct.control_instruction.write(oprot);
      }
      if (struct.isSetRemind_event()) {
        struct.remind_event.write(oprot);
      }
      if (struct.isSetReply_from_service()) {
        oprot.writeI32(struct.reply_from_service.getValue());
      }
      if (struct.isSetWeather_info()) {
        {
          oprot.writeI32(struct.weather_info.size());
          for (weather _iter439 : struct.weather_info)
          {
            _iter439.write(oprot);
          }
        }
      }
      if (struct.isSetMusic_content()) {
        {
          oprot.writeI32(struct.music_content.size());
          for (music _iter440 : struct.music_content)
          {
            _iter440.write(oprot);
          }
        }
      }
      if (struct.isSetAudio_content()) {
        {
          oprot.writeI32(struct.audio_content.size());
          for (audio _iter441 : struct.audio_content)
          {
            _iter441.write(oprot);
          }
        }
      }
      if (struct.isSetTakeout_info()) {
        struct.takeout_info.write(oprot);
      }
      if (struct.isSetDomain_features()) {
        struct.domain_features.write(oprot);
      }
      if (struct.isSetInent_hijack()) {
        oprot.writeBool(struct.inent_hijack);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.return_status = ReturnStatus.findByValue(iprot.readI32());
        struct.setReturn_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_terminal = iprot.readBool();
        struct.setIs_terminalIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list442 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replys = new ArrayList<Reply>(_list442.size);
          for (int _i443 = 0; _i443 < _list442.size; ++_i443)
          {
            Reply _elem444;
            _elem444 = new Reply();
            _elem444.read(iprot);
            struct.replys.add(_elem444);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.proactive_reply = new ProactiveReply();
        struct.proactive_reply.read(iprot);
        struct.setProactive_replyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map445 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.debug_msgs = new HashMap<String,String>(2*_map445.size);
          for (int _i446 = 0; _i446 < _map445.size; ++_i446)
          {
            String _key447;
            String _val448;
            _key447 = iprot.readString();
            _val448 = iprot.readString();
            struct.debug_msgs.put(_key447, _val448);
          }
        }
        struct.setDebug_msgsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.control_instruction = new ControlInstruction();
        struct.control_instruction.read(iprot);
        struct.setControl_instructionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remind_event = new RemindEvent();
        struct.remind_event.read(iprot);
        struct.setRemind_eventIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reply_from_service = ServiceName.findByValue(iprot.readI32());
        struct.setReply_from_serviceIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list449 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.weather_info = new ArrayList<weather>(_list449.size);
          for (int _i450 = 0; _i450 < _list449.size; ++_i450)
          {
            weather _elem451;
            _elem451 = new weather();
            _elem451.read(iprot);
            struct.weather_info.add(_elem451);
          }
        }
        struct.setWeather_infoIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list452 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.music_content = new ArrayList<music>(_list452.size);
          for (int _i453 = 0; _i453 < _list452.size; ++_i453)
          {
            music _elem454;
            _elem454 = new music();
            _elem454.read(iprot);
            struct.music_content.add(_elem454);
          }
        }
        struct.setMusic_contentIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list455 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.audio_content = new ArrayList<audio>(_list455.size);
          for (int _i456 = 0; _i456 < _list455.size; ++_i456)
          {
            audio _elem457;
            _elem457 = new audio();
            _elem457.read(iprot);
            struct.audio_content.add(_elem457);
          }
        }
        struct.setAudio_contentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.takeout_info = new TakeoutInfo();
        struct.takeout_info.read(iprot);
        struct.setTakeout_infoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.domain_features = new DomainFeatures();
        struct.domain_features.read(iprot);
        struct.setDomain_featuresIsSet(true);
      }
      if (incoming.get(13)) {
        struct.inent_hijack = iprot.readBool();
        struct.setInent_hijackIsSet(true);
      }
    }
  }

}

