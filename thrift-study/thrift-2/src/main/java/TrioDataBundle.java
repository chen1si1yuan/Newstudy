/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class TrioDataBundle implements org.apache.thrift.TBase<TrioDataBundle, TrioDataBundle._Fields>, java.io.Serializable, Cloneable, Comparable<TrioDataBundle> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TrioDataBundle");

  private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("terminal", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField REWRITE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("rewrite_data", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField USER_CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ctx", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CTX_FIELD_DESC = new org.apache.thrift.protocol.TField("ctx", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("resp", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_NER_FIELD_DESC = new org.apache.thrift.protocol.TField("query_ner", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TrioDataBundleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TrioDataBundleTupleSchemeFactory());
  }

  public String query; // optional
  public UserInfo user; // optional
  public ControlParams params; // optional
  public TerminalState terminal; // optional
  public MultiRewrite rewrite_data; // optional
  public UserContext user_ctx; // optional
  public ServiceContext ctx; // optional
  public ResponseParams resp; // optional
  public String query_ner; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY((short)1, "query"),
    USER((short)2, "user"),
    PARAMS((short)3, "params"),
    TERMINAL((short)9, "terminal"),
    REWRITE_DATA((short)4, "rewrite_data"),
    USER_CTX((short)5, "user_ctx"),
    CTX((short)6, "ctx"),
    RESP((short)7, "resp"),
    QUERY_NER((short)8, "query_ner");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY
          return QUERY;
        case 2: // USER
          return USER;
        case 3: // PARAMS
          return PARAMS;
        case 9: // TERMINAL
          return TERMINAL;
        case 4: // REWRITE_DATA
          return REWRITE_DATA;
        case 5: // USER_CTX
          return USER_CTX;
        case 6: // CTX
          return CTX;
        case 7: // RESP
          return RESP;
        case 8: // QUERY_NER
          return QUERY_NER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.QUERY,_Fields.USER,_Fields.PARAMS,_Fields.TERMINAL,_Fields.REWRITE_DATA,_Fields.USER_CTX,_Fields.CTX,_Fields.RESP,_Fields.QUERY_NER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ControlParams.class)));
    tmpMap.put(_Fields.TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("terminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TerminalState.class)));
    tmpMap.put(_Fields.REWRITE_DATA, new org.apache.thrift.meta_data.FieldMetaData("rewrite_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiRewrite.class)));
    tmpMap.put(_Fields.USER_CTX, new org.apache.thrift.meta_data.FieldMetaData("user_ctx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserContext.class)));
    tmpMap.put(_Fields.CTX, new org.apache.thrift.meta_data.FieldMetaData("ctx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceContext.class)));
    tmpMap.put(_Fields.RESP, new org.apache.thrift.meta_data.FieldMetaData("resp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseParams.class)));
    tmpMap.put(_Fields.QUERY_NER, new org.apache.thrift.meta_data.FieldMetaData("query_ner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TrioDataBundle.class, metaDataMap);
  }

  public TrioDataBundle() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TrioDataBundle(TrioDataBundle other) {
    if (other.isSetQuery()) {
      this.query = other.query;
    }
    if (other.isSetUser()) {
      this.user = new UserInfo(other.user);
    }
    if (other.isSetParams()) {
      this.params = new ControlParams(other.params);
    }
    if (other.isSetTerminal()) {
      this.terminal = new TerminalState(other.terminal);
    }
    if (other.isSetRewrite_data()) {
      this.rewrite_data = new MultiRewrite(other.rewrite_data);
    }
    if (other.isSetUser_ctx()) {
      this.user_ctx = new UserContext(other.user_ctx);
    }
    if (other.isSetCtx()) {
      this.ctx = new ServiceContext(other.ctx);
    }
    if (other.isSetResp()) {
      this.resp = new ResponseParams(other.resp);
    }
    if (other.isSetQuery_ner()) {
      this.query_ner = other.query_ner;
    }
  }

  public TrioDataBundle deepCopy() {
    return new TrioDataBundle(this);
  }

  
  public void clear() {
    this.query = null;
    this.user = null;
    this.params = null;
    this.terminal = null;
    this.rewrite_data = null;
    this.user_ctx = null;
    this.ctx = null;
    this.resp = null;
    this.query_ner = null;
  }

  public String getQuery() {
    return this.query;
  }

  public TrioDataBundle setQuery(String query) {
    this.query = query;
    return this;
  }

  public void unsetQuery() {
    this.query = null;
  }

  /** Returns true if field query is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery() {
    return this.query != null;
  }

  public void setQueryIsSet(boolean value) {
    if (!value) {
      this.query = null;
    }
  }

  public UserInfo getUser() {
    return this.user;
  }

  public TrioDataBundle setUser(UserInfo user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public ControlParams getParams() {
    return this.params;
  }

  public TrioDataBundle setParams(ControlParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public TerminalState getTerminal() {
    return this.terminal;
  }

  public TrioDataBundle setTerminal(TerminalState terminal) {
    this.terminal = terminal;
    return this;
  }

  public void unsetTerminal() {
    this.terminal = null;
  }

  /** Returns true if field terminal is set (has been assigned a value) and false otherwise */
  public boolean isSetTerminal() {
    return this.terminal != null;
  }

  public void setTerminalIsSet(boolean value) {
    if (!value) {
      this.terminal = null;
    }
  }

  public MultiRewrite getRewrite_data() {
    return this.rewrite_data;
  }

  public TrioDataBundle setRewrite_data(MultiRewrite rewrite_data) {
    this.rewrite_data = rewrite_data;
    return this;
  }

  public void unsetRewrite_data() {
    this.rewrite_data = null;
  }

  /** Returns true if field rewrite_data is set (has been assigned a value) and false otherwise */
  public boolean isSetRewrite_data() {
    return this.rewrite_data != null;
  }

  public void setRewrite_dataIsSet(boolean value) {
    if (!value) {
      this.rewrite_data = null;
    }
  }

  public UserContext getUser_ctx() {
    return this.user_ctx;
  }

  public TrioDataBundle setUser_ctx(UserContext user_ctx) {
    this.user_ctx = user_ctx;
    return this;
  }

  public void unsetUser_ctx() {
    this.user_ctx = null;
  }

  /** Returns true if field user_ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_ctx() {
    return this.user_ctx != null;
  }

  public void setUser_ctxIsSet(boolean value) {
    if (!value) {
      this.user_ctx = null;
    }
  }

  public ServiceContext getCtx() {
    return this.ctx;
  }

  public TrioDataBundle setCtx(ServiceContext ctx) {
    this.ctx = ctx;
    return this;
  }

  public void unsetCtx() {
    this.ctx = null;
  }

  /** Returns true if field ctx is set (has been assigned a value) and false otherwise */
  public boolean isSetCtx() {
    return this.ctx != null;
  }

  public void setCtxIsSet(boolean value) {
    if (!value) {
      this.ctx = null;
    }
  }

  public ResponseParams getResp() {
    return this.resp;
  }

  public TrioDataBundle setResp(ResponseParams resp) {
    this.resp = resp;
    return this;
  }

  public void unsetResp() {
    this.resp = null;
  }

  /** Returns true if field resp is set (has been assigned a value) and false otherwise */
  public boolean isSetResp() {
    return this.resp != null;
  }

  public void setRespIsSet(boolean value) {
    if (!value) {
      this.resp = null;
    }
  }

  public String getQuery_ner() {
    return this.query_ner;
  }

  public TrioDataBundle setQuery_ner(String query_ner) {
    this.query_ner = query_ner;
    return this;
  }

  public void unsetQuery_ner() {
    this.query_ner = null;
  }

  /** Returns true if field query_ner is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_ner() {
    return this.query_ner != null;
  }

  public void setQuery_nerIsSet(boolean value) {
    if (!value) {
      this.query_ner = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUERY:
      if (value == null) {
        unsetQuery();
      } else {
        setQuery((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((UserInfo)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((ControlParams)value);
      }
      break;

    case TERMINAL:
      if (value == null) {
        unsetTerminal();
      } else {
        setTerminal((TerminalState)value);
      }
      break;

    case REWRITE_DATA:
      if (value == null) {
        unsetRewrite_data();
      } else {
        setRewrite_data((MultiRewrite)value);
      }
      break;

    case USER_CTX:
      if (value == null) {
        unsetUser_ctx();
      } else {
        setUser_ctx((UserContext)value);
      }
      break;

    case CTX:
      if (value == null) {
        unsetCtx();
      } else {
        setCtx((ServiceContext)value);
      }
      break;

    case RESP:
      if (value == null) {
        unsetResp();
      } else {
        setResp((ResponseParams)value);
      }
      break;

    case QUERY_NER:
      if (value == null) {
        unsetQuery_ner();
      } else {
        setQuery_ner((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY:
      return getQuery();

    case USER:
      return getUser();

    case PARAMS:
      return getParams();

    case TERMINAL:
      return getTerminal();

    case REWRITE_DATA:
      return getRewrite_data();

    case USER_CTX:
      return getUser_ctx();

    case CTX:
      return getCtx();

    case RESP:
      return getResp();

    case QUERY_NER:
      return getQuery_ner();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUERY:
      return isSetQuery();
    case USER:
      return isSetUser();
    case PARAMS:
      return isSetParams();
    case TERMINAL:
      return isSetTerminal();
    case REWRITE_DATA:
      return isSetRewrite_data();
    case USER_CTX:
      return isSetUser_ctx();
    case CTX:
      return isSetCtx();
    case RESP:
      return isSetResp();
    case QUERY_NER:
      return isSetQuery_ner();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TrioDataBundle)
      return this.equals((TrioDataBundle)that);
    return false;
  }

  public boolean equals(TrioDataBundle that) {
    if (that == null)
      return false;

    boolean this_present_query = true && this.isSetQuery();
    boolean that_present_query = true && that.isSetQuery();
    if (this_present_query || that_present_query) {
      if (!(this_present_query && that_present_query))
        return false;
      if (!this.query.equals(that.query))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_terminal = true && this.isSetTerminal();
    boolean that_present_terminal = true && that.isSetTerminal();
    if (this_present_terminal || that_present_terminal) {
      if (!(this_present_terminal && that_present_terminal))
        return false;
      if (!this.terminal.equals(that.terminal))
        return false;
    }

    boolean this_present_rewrite_data = true && this.isSetRewrite_data();
    boolean that_present_rewrite_data = true && that.isSetRewrite_data();
    if (this_present_rewrite_data || that_present_rewrite_data) {
      if (!(this_present_rewrite_data && that_present_rewrite_data))
        return false;
      if (!this.rewrite_data.equals(that.rewrite_data))
        return false;
    }

    boolean this_present_user_ctx = true && this.isSetUser_ctx();
    boolean that_present_user_ctx = true && that.isSetUser_ctx();
    if (this_present_user_ctx || that_present_user_ctx) {
      if (!(this_present_user_ctx && that_present_user_ctx))
        return false;
      if (!this.user_ctx.equals(that.user_ctx))
        return false;
    }

    boolean this_present_ctx = true && this.isSetCtx();
    boolean that_present_ctx = true && that.isSetCtx();
    if (this_present_ctx || that_present_ctx) {
      if (!(this_present_ctx && that_present_ctx))
        return false;
      if (!this.ctx.equals(that.ctx))
        return false;
    }

    boolean this_present_resp = true && this.isSetResp();
    boolean that_present_resp = true && that.isSetResp();
    if (this_present_resp || that_present_resp) {
      if (!(this_present_resp && that_present_resp))
        return false;
      if (!this.resp.equals(that.resp))
        return false;
    }

    boolean this_present_query_ner = true && this.isSetQuery_ner();
    boolean that_present_query_ner = true && that.isSetQuery_ner();
    if (this_present_query_ner || that_present_query_ner) {
      if (!(this_present_query_ner && that_present_query_ner))
        return false;
      if (!this.query_ner.equals(that.query_ner))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(TrioDataBundle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerminal()).compareTo(other.isSetTerminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terminal, other.terminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewrite_data()).compareTo(other.isSetRewrite_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewrite_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewrite_data, other.rewrite_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_ctx()).compareTo(other.isSetUser_ctx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_ctx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ctx, other.user_ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtx()).compareTo(other.isSetCtx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctx, other.ctx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResp()).compareTo(other.isSetResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resp, other.resp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_ner()).compareTo(other.isSetQuery_ner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_ner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_ner, other.query_ner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("TrioDataBundle(");
    boolean first = true;

    if (isSetQuery()) {
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetTerminal()) {
      if (!first) sb.append(", ");
      sb.append("terminal:");
      if (this.terminal == null) {
        sb.append("null");
      } else {
        sb.append(this.terminal);
      }
      first = false;
    }
    if (isSetRewrite_data()) {
      if (!first) sb.append(", ");
      sb.append("rewrite_data:");
      if (this.rewrite_data == null) {
        sb.append("null");
      } else {
        sb.append(this.rewrite_data);
      }
      first = false;
    }
    if (isSetUser_ctx()) {
      if (!first) sb.append(", ");
      sb.append("user_ctx:");
      if (this.user_ctx == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ctx);
      }
      first = false;
    }
    if (isSetCtx()) {
      if (!first) sb.append(", ");
      sb.append("ctx:");
      if (this.ctx == null) {
        sb.append("null");
      } else {
        sb.append(this.ctx);
      }
      first = false;
    }
    if (isSetResp()) {
      if (!first) sb.append(", ");
      sb.append("resp:");
      if (this.resp == null) {
        sb.append("null");
      } else {
        sb.append(this.resp);
      }
      first = false;
    }
    if (isSetQuery_ner()) {
      if (!first) sb.append(", ");
      sb.append("query_ner:");
      if (this.query_ner == null) {
        sb.append("null");
      } else {
        sb.append(this.query_ner);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (terminal != null) {
      terminal.validate();
    }
    if (rewrite_data != null) {
      rewrite_data.validate();
    }
    if (user_ctx != null) {
      user_ctx.validate();
    }
    if (ctx != null) {
      ctx.validate();
    }
    if (resp != null) {
      resp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TrioDataBundleStandardSchemeFactory implements SchemeFactory {
    public TrioDataBundleStandardScheme getScheme() {
      return new TrioDataBundleStandardScheme();
    }
  }

  private static class TrioDataBundleStandardScheme extends StandardScheme<TrioDataBundle> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TrioDataBundle struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query = iprot.readString();
              struct.setQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new UserInfo();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new ControlParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.terminal = new TerminalState();
              struct.terminal.read(iprot);
              struct.setTerminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REWRITE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rewrite_data = new MultiRewrite();
              struct.rewrite_data.read(iprot);
              struct.setRewrite_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_ctx = new UserContext();
              struct.user_ctx.read(iprot);
              struct.setUser_ctxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CTX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ctx = new ServiceContext();
              struct.ctx.read(iprot);
              struct.setCtxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resp = new ResponseParams();
              struct.resp.read(iprot);
              struct.setRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_NER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_ner = iprot.readString();
              struct.setQuery_nerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TrioDataBundle struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query != null) {
        if (struct.isSetQuery()) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rewrite_data != null) {
        if (struct.isSetRewrite_data()) {
          oprot.writeFieldBegin(REWRITE_DATA_FIELD_DESC);
          struct.rewrite_data.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_ctx != null) {
        if (struct.isSetUser_ctx()) {
          oprot.writeFieldBegin(USER_CTX_FIELD_DESC);
          struct.user_ctx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ctx != null) {
        if (struct.isSetCtx()) {
          oprot.writeFieldBegin(CTX_FIELD_DESC);
          struct.ctx.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resp != null) {
        if (struct.isSetResp()) {
          oprot.writeFieldBegin(RESP_FIELD_DESC);
          struct.resp.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_ner != null) {
        if (struct.isSetQuery_ner()) {
          oprot.writeFieldBegin(QUERY_NER_FIELD_DESC);
          oprot.writeString(struct.query_ner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.terminal != null) {
        if (struct.isSetTerminal()) {
          oprot.writeFieldBegin(TERMINAL_FIELD_DESC);
          struct.terminal.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TrioDataBundleTupleSchemeFactory implements SchemeFactory {
    public TrioDataBundleTupleScheme getScheme() {
      return new TrioDataBundleTupleScheme();
    }
  }

  private static class TrioDataBundleTupleScheme extends TupleScheme<TrioDataBundle> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, TrioDataBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQuery()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetTerminal()) {
        optionals.set(3);
      }
      if (struct.isSetRewrite_data()) {
        optionals.set(4);
      }
      if (struct.isSetUser_ctx()) {
        optionals.set(5);
      }
      if (struct.isSetCtx()) {
        optionals.set(6);
      }
      if (struct.isSetResp()) {
        optionals.set(7);
      }
      if (struct.isSetQuery_ner()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetQuery()) {
        oprot.writeString(struct.query);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetTerminal()) {
        struct.terminal.write(oprot);
      }
      if (struct.isSetRewrite_data()) {
        struct.rewrite_data.write(oprot);
      }
      if (struct.isSetUser_ctx()) {
        struct.user_ctx.write(oprot);
      }
      if (struct.isSetCtx()) {
        struct.ctx.write(oprot);
      }
      if (struct.isSetResp()) {
        struct.resp.write(oprot);
      }
      if (struct.isSetQuery_ner()) {
        oprot.writeString(struct.query_ner);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, TrioDataBundle struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.query = iprot.readString();
        struct.setQueryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = new UserInfo();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new ControlParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.terminal = new TerminalState();
        struct.terminal.read(iprot);
        struct.setTerminalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rewrite_data = new MultiRewrite();
        struct.rewrite_data.read(iprot);
        struct.setRewrite_dataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user_ctx = new UserContext();
        struct.user_ctx.read(iprot);
        struct.setUser_ctxIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ctx = new ServiceContext();
        struct.ctx.read(iprot);
        struct.setCtxIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resp = new ResponseParams();
        struct.resp.read(iprot);
        struct.setRespIsSet(true);
      }
      if (incoming.get(8)) {
        struct.query_ner = iprot.readString();
        struct.setQuery_nerIsSet(true);
      }
    }
  }

}

