/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class PostReply implements org.apache.thrift.TBase<PostReply, PostReply._Fields>, java.io.Serializable, Cloneable, Comparable<PostReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PostReply");

  private static final org.apache.thrift.protocol.TField RAW_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("raw_post", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("replys", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField POST_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("post_tags", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField NOSTOPWORDS_SEG_POST_FIELD_DESC = new org.apache.thrift.protocol.TField("nostopwords_seg_post", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField FEATURE_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature_score", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField DEBUG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_info", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_score", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POST_BASIC_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("post_basic_seg", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField POST_PHRASE_SEG_FIELD_DESC = new org.apache.thrift.protocol.TField("post_phrase_seg", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PostReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PostReplyTupleSchemeFactory());
  }

  public String raw_post; // optional
  public double score; // optional
  public List<Reply> replys; // optional
  public Map<Short,Short> post_tags; // optional
  public List<String> nostopwords_seg_post; // optional
  public Map<String,Double> feature_score; // optional
  public String debug_info; // optional
  public double max_score; // optional
  public List<String> post_basic_seg; // optional
  public List<String> post_phrase_seg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RAW_POST((short)1, "raw_post"),
    SCORE((short)3, "score"),
    REPLYS((short)4, "replys"),
    POST_TAGS((short)5, "post_tags"),
    NOSTOPWORDS_SEG_POST((short)6, "nostopwords_seg_post"),
    FEATURE_SCORE((short)7, "feature_score"),
    DEBUG_INFO((short)11, "debug_info"),
    MAX_SCORE((short)12, "max_score"),
    POST_BASIC_SEG((short)13, "post_basic_seg"),
    POST_PHRASE_SEG((short)14, "post_phrase_seg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAW_POST
          return RAW_POST;
        case 3: // SCORE
          return SCORE;
        case 4: // REPLYS
          return REPLYS;
        case 5: // POST_TAGS
          return POST_TAGS;
        case 6: // NOSTOPWORDS_SEG_POST
          return NOSTOPWORDS_SEG_POST;
        case 7: // FEATURE_SCORE
          return FEATURE_SCORE;
        case 11: // DEBUG_INFO
          return DEBUG_INFO;
        case 12: // MAX_SCORE
          return MAX_SCORE;
        case 13: // POST_BASIC_SEG
          return POST_BASIC_SEG;
        case 14: // POST_PHRASE_SEG
          return POST_PHRASE_SEG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private static final int __MAX_SCORE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RAW_POST,_Fields.SCORE,_Fields.REPLYS,_Fields.POST_TAGS,_Fields.NOSTOPWORDS_SEG_POST,_Fields.FEATURE_SCORE,_Fields.DEBUG_INFO,_Fields.MAX_SCORE,_Fields.POST_BASIC_SEG,_Fields.POST_PHRASE_SEG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAW_POST, new org.apache.thrift.meta_data.FieldMetaData("raw_post", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPLYS, new org.apache.thrift.meta_data.FieldMetaData("replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reply.class))));
    tmpMap.put(_Fields.POST_TAGS, new org.apache.thrift.meta_data.FieldMetaData("post_tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.NOSTOPWORDS_SEG_POST, new org.apache.thrift.meta_data.FieldMetaData("nostopwords_seg_post", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_SCORE, new org.apache.thrift.meta_data.FieldMetaData("feature_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DEBUG_INFO, new org.apache.thrift.meta_data.FieldMetaData("debug_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_SCORE, new org.apache.thrift.meta_data.FieldMetaData("max_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POST_BASIC_SEG, new org.apache.thrift.meta_data.FieldMetaData("post_basic_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.POST_PHRASE_SEG, new org.apache.thrift.meta_data.FieldMetaData("post_phrase_seg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PostReply.class, metaDataMap);
  }

  public PostReply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PostReply(PostReply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRaw_post()) {
      this.raw_post = other.raw_post;
    }
    this.score = other.score;
    if (other.isSetReplys()) {
      List<Reply> __this__replys = new ArrayList<Reply>(other.replys.size());
      for (Reply other_element : other.replys) {
        __this__replys.add(new Reply(other_element));
      }
      this.replys = __this__replys;
    }
    if (other.isSetPost_tags()) {
      Map<Short,Short> __this__post_tags = new HashMap<Short,Short>(other.post_tags);
      this.post_tags = __this__post_tags;
    }
    if (other.isSetNostopwords_seg_post()) {
      List<String> __this__nostopwords_seg_post = new ArrayList<String>(other.nostopwords_seg_post);
      this.nostopwords_seg_post = __this__nostopwords_seg_post;
    }
    if (other.isSetFeature_score()) {
      Map<String,Double> __this__feature_score = new HashMap<String,Double>(other.feature_score);
      this.feature_score = __this__feature_score;
    }
    if (other.isSetDebug_info()) {
      this.debug_info = other.debug_info;
    }
    this.max_score = other.max_score;
    if (other.isSetPost_basic_seg()) {
      List<String> __this__post_basic_seg = new ArrayList<String>(other.post_basic_seg);
      this.post_basic_seg = __this__post_basic_seg;
    }
    if (other.isSetPost_phrase_seg()) {
      List<String> __this__post_phrase_seg = new ArrayList<String>(other.post_phrase_seg);
      this.post_phrase_seg = __this__post_phrase_seg;
    }
  }

  public PostReply deepCopy() {
    return new PostReply(this);
  }

  
  public void clear() {
    this.raw_post = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.replys = null;
    this.post_tags = null;
    this.nostopwords_seg_post = null;
    this.feature_score = null;
    this.debug_info = null;
    setMax_scoreIsSet(false);
    this.max_score = 0.0;
    this.post_basic_seg = null;
    this.post_phrase_seg = null;
  }

  public String getRaw_post() {
    return this.raw_post;
  }

  public PostReply setRaw_post(String raw_post) {
    this.raw_post = raw_post;
    return this;
  }

  public void unsetRaw_post() {
    this.raw_post = null;
  }

  /** Returns true if field raw_post is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw_post() {
    return this.raw_post != null;
  }

  public void setRaw_postIsSet(boolean value) {
    if (!value) {
      this.raw_post = null;
    }
  }

  public double getScore() {
    return this.score;
  }

  public PostReply setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public int getReplysSize() {
    return (this.replys == null) ? 0 : this.replys.size();
  }

  public java.util.Iterator<Reply> getReplysIterator() {
    return (this.replys == null) ? null : this.replys.iterator();
  }

  public void addToReplys(Reply elem) {
    if (this.replys == null) {
      this.replys = new ArrayList<Reply>();
    }
    this.replys.add(elem);
  }

  public List<Reply> getReplys() {
    return this.replys;
  }

  public PostReply setReplys(List<Reply> replys) {
    this.replys = replys;
    return this;
  }

  public void unsetReplys() {
    this.replys = null;
  }

  /** Returns true if field replys is set (has been assigned a value) and false otherwise */
  public boolean isSetReplys() {
    return this.replys != null;
  }

  public void setReplysIsSet(boolean value) {
    if (!value) {
      this.replys = null;
    }
  }

  public int getPost_tagsSize() {
    return (this.post_tags == null) ? 0 : this.post_tags.size();
  }

  public void putToPost_tags(short key, short val) {
    if (this.post_tags == null) {
      this.post_tags = new HashMap<Short,Short>();
    }
    this.post_tags.put(key, val);
  }

  public Map<Short,Short> getPost_tags() {
    return this.post_tags;
  }

  public PostReply setPost_tags(Map<Short,Short> post_tags) {
    this.post_tags = post_tags;
    return this;
  }

  public void unsetPost_tags() {
    this.post_tags = null;
  }

  /** Returns true if field post_tags is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_tags() {
    return this.post_tags != null;
  }

  public void setPost_tagsIsSet(boolean value) {
    if (!value) {
      this.post_tags = null;
    }
  }

  public int getNostopwords_seg_postSize() {
    return (this.nostopwords_seg_post == null) ? 0 : this.nostopwords_seg_post.size();
  }

  public java.util.Iterator<String> getNostopwords_seg_postIterator() {
    return (this.nostopwords_seg_post == null) ? null : this.nostopwords_seg_post.iterator();
  }

  public void addToNostopwords_seg_post(String elem) {
    if (this.nostopwords_seg_post == null) {
      this.nostopwords_seg_post = new ArrayList<String>();
    }
    this.nostopwords_seg_post.add(elem);
  }

  public List<String> getNostopwords_seg_post() {
    return this.nostopwords_seg_post;
  }

  public PostReply setNostopwords_seg_post(List<String> nostopwords_seg_post) {
    this.nostopwords_seg_post = nostopwords_seg_post;
    return this;
  }

  public void unsetNostopwords_seg_post() {
    this.nostopwords_seg_post = null;
  }

  /** Returns true if field nostopwords_seg_post is set (has been assigned a value) and false otherwise */
  public boolean isSetNostopwords_seg_post() {
    return this.nostopwords_seg_post != null;
  }

  public void setNostopwords_seg_postIsSet(boolean value) {
    if (!value) {
      this.nostopwords_seg_post = null;
    }
  }

  public int getFeature_scoreSize() {
    return (this.feature_score == null) ? 0 : this.feature_score.size();
  }

  public void putToFeature_score(String key, double val) {
    if (this.feature_score == null) {
      this.feature_score = new HashMap<String,Double>();
    }
    this.feature_score.put(key, val);
  }

  public Map<String,Double> getFeature_score() {
    return this.feature_score;
  }

  public PostReply setFeature_score(Map<String,Double> feature_score) {
    this.feature_score = feature_score;
    return this;
  }

  public void unsetFeature_score() {
    this.feature_score = null;
  }

  /** Returns true if field feature_score is set (has been assigned a value) and false otherwise */
  public boolean isSetFeature_score() {
    return this.feature_score != null;
  }

  public void setFeature_scoreIsSet(boolean value) {
    if (!value) {
      this.feature_score = null;
    }
  }

  public String getDebug_info() {
    return this.debug_info;
  }

  public PostReply setDebug_info(String debug_info) {
    this.debug_info = debug_info;
    return this;
  }

  public void unsetDebug_info() {
    this.debug_info = null;
  }

  /** Returns true if field debug_info is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_info() {
    return this.debug_info != null;
  }

  public void setDebug_infoIsSet(boolean value) {
    if (!value) {
      this.debug_info = null;
    }
  }

  public double getMax_score() {
    return this.max_score;
  }

  public PostReply setMax_score(double max_score) {
    this.max_score = max_score;
    setMax_scoreIsSet(true);
    return this;
  }

  public void unsetMax_score() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SCORE_ISSET_ID);
  }

  /** Returns true if field max_score is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_score() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_SCORE_ISSET_ID);
  }

  public void setMax_scoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SCORE_ISSET_ID, value);
  }

  public int getPost_basic_segSize() {
    return (this.post_basic_seg == null) ? 0 : this.post_basic_seg.size();
  }

  public java.util.Iterator<String> getPost_basic_segIterator() {
    return (this.post_basic_seg == null) ? null : this.post_basic_seg.iterator();
  }

  public void addToPost_basic_seg(String elem) {
    if (this.post_basic_seg == null) {
      this.post_basic_seg = new ArrayList<String>();
    }
    this.post_basic_seg.add(elem);
  }

  public List<String> getPost_basic_seg() {
    return this.post_basic_seg;
  }

  public PostReply setPost_basic_seg(List<String> post_basic_seg) {
    this.post_basic_seg = post_basic_seg;
    return this;
  }

  public void unsetPost_basic_seg() {
    this.post_basic_seg = null;
  }

  /** Returns true if field post_basic_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_basic_seg() {
    return this.post_basic_seg != null;
  }

  public void setPost_basic_segIsSet(boolean value) {
    if (!value) {
      this.post_basic_seg = null;
    }
  }

  public int getPost_phrase_segSize() {
    return (this.post_phrase_seg == null) ? 0 : this.post_phrase_seg.size();
  }

  public java.util.Iterator<String> getPost_phrase_segIterator() {
    return (this.post_phrase_seg == null) ? null : this.post_phrase_seg.iterator();
  }

  public void addToPost_phrase_seg(String elem) {
    if (this.post_phrase_seg == null) {
      this.post_phrase_seg = new ArrayList<String>();
    }
    this.post_phrase_seg.add(elem);
  }

  public List<String> getPost_phrase_seg() {
    return this.post_phrase_seg;
  }

  public PostReply setPost_phrase_seg(List<String> post_phrase_seg) {
    this.post_phrase_seg = post_phrase_seg;
    return this;
  }

  public void unsetPost_phrase_seg() {
    this.post_phrase_seg = null;
  }

  /** Returns true if field post_phrase_seg is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_phrase_seg() {
    return this.post_phrase_seg != null;
  }

  public void setPost_phrase_segIsSet(boolean value) {
    if (!value) {
      this.post_phrase_seg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAW_POST:
      if (value == null) {
        unsetRaw_post();
      } else {
        setRaw_post((String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case REPLYS:
      if (value == null) {
        unsetReplys();
      } else {
        setReplys((List<Reply>)value);
      }
      break;

    case POST_TAGS:
      if (value == null) {
        unsetPost_tags();
      } else {
        setPost_tags((Map<Short,Short>)value);
      }
      break;

    case NOSTOPWORDS_SEG_POST:
      if (value == null) {
        unsetNostopwords_seg_post();
      } else {
        setNostopwords_seg_post((List<String>)value);
      }
      break;

    case FEATURE_SCORE:
      if (value == null) {
        unsetFeature_score();
      } else {
        setFeature_score((Map<String,Double>)value);
      }
      break;

    case DEBUG_INFO:
      if (value == null) {
        unsetDebug_info();
      } else {
        setDebug_info((String)value);
      }
      break;

    case MAX_SCORE:
      if (value == null) {
        unsetMax_score();
      } else {
        setMax_score((Double)value);
      }
      break;

    case POST_BASIC_SEG:
      if (value == null) {
        unsetPost_basic_seg();
      } else {
        setPost_basic_seg((List<String>)value);
      }
      break;

    case POST_PHRASE_SEG:
      if (value == null) {
        unsetPost_phrase_seg();
      } else {
        setPost_phrase_seg((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAW_POST:
      return getRaw_post();

    case SCORE:
      return Double.valueOf(getScore());

    case REPLYS:
      return getReplys();

    case POST_TAGS:
      return getPost_tags();

    case NOSTOPWORDS_SEG_POST:
      return getNostopwords_seg_post();

    case FEATURE_SCORE:
      return getFeature_score();

    case DEBUG_INFO:
      return getDebug_info();

    case MAX_SCORE:
      return Double.valueOf(getMax_score());

    case POST_BASIC_SEG:
      return getPost_basic_seg();

    case POST_PHRASE_SEG:
      return getPost_phrase_seg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAW_POST:
      return isSetRaw_post();
    case SCORE:
      return isSetScore();
    case REPLYS:
      return isSetReplys();
    case POST_TAGS:
      return isSetPost_tags();
    case NOSTOPWORDS_SEG_POST:
      return isSetNostopwords_seg_post();
    case FEATURE_SCORE:
      return isSetFeature_score();
    case DEBUG_INFO:
      return isSetDebug_info();
    case MAX_SCORE:
      return isSetMax_score();
    case POST_BASIC_SEG:
      return isSetPost_basic_seg();
    case POST_PHRASE_SEG:
      return isSetPost_phrase_seg();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PostReply)
      return this.equals((PostReply)that);
    return false;
  }

  public boolean equals(PostReply that) {
    if (that == null)
      return false;

    boolean this_present_raw_post = true && this.isSetRaw_post();
    boolean that_present_raw_post = true && that.isSetRaw_post();
    if (this_present_raw_post || that_present_raw_post) {
      if (!(this_present_raw_post && that_present_raw_post))
        return false;
      if (!this.raw_post.equals(that.raw_post))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_replys = true && this.isSetReplys();
    boolean that_present_replys = true && that.isSetReplys();
    if (this_present_replys || that_present_replys) {
      if (!(this_present_replys && that_present_replys))
        return false;
      if (!this.replys.equals(that.replys))
        return false;
    }

    boolean this_present_post_tags = true && this.isSetPost_tags();
    boolean that_present_post_tags = true && that.isSetPost_tags();
    if (this_present_post_tags || that_present_post_tags) {
      if (!(this_present_post_tags && that_present_post_tags))
        return false;
      if (!this.post_tags.equals(that.post_tags))
        return false;
    }

    boolean this_present_nostopwords_seg_post = true && this.isSetNostopwords_seg_post();
    boolean that_present_nostopwords_seg_post = true && that.isSetNostopwords_seg_post();
    if (this_present_nostopwords_seg_post || that_present_nostopwords_seg_post) {
      if (!(this_present_nostopwords_seg_post && that_present_nostopwords_seg_post))
        return false;
      if (!this.nostopwords_seg_post.equals(that.nostopwords_seg_post))
        return false;
    }

    boolean this_present_feature_score = true && this.isSetFeature_score();
    boolean that_present_feature_score = true && that.isSetFeature_score();
    if (this_present_feature_score || that_present_feature_score) {
      if (!(this_present_feature_score && that_present_feature_score))
        return false;
      if (!this.feature_score.equals(that.feature_score))
        return false;
    }

    boolean this_present_debug_info = true && this.isSetDebug_info();
    boolean that_present_debug_info = true && that.isSetDebug_info();
    if (this_present_debug_info || that_present_debug_info) {
      if (!(this_present_debug_info && that_present_debug_info))
        return false;
      if (!this.debug_info.equals(that.debug_info))
        return false;
    }

    boolean this_present_max_score = true && this.isSetMax_score();
    boolean that_present_max_score = true && that.isSetMax_score();
    if (this_present_max_score || that_present_max_score) {
      if (!(this_present_max_score && that_present_max_score))
        return false;
      if (this.max_score != that.max_score)
        return false;
    }

    boolean this_present_post_basic_seg = true && this.isSetPost_basic_seg();
    boolean that_present_post_basic_seg = true && that.isSetPost_basic_seg();
    if (this_present_post_basic_seg || that_present_post_basic_seg) {
      if (!(this_present_post_basic_seg && that_present_post_basic_seg))
        return false;
      if (!this.post_basic_seg.equals(that.post_basic_seg))
        return false;
    }

    boolean this_present_post_phrase_seg = true && this.isSetPost_phrase_seg();
    boolean that_present_post_phrase_seg = true && that.isSetPost_phrase_seg();
    if (this_present_post_phrase_seg || that_present_post_phrase_seg) {
      if (!(this_present_post_phrase_seg && that_present_post_phrase_seg))
        return false;
      if (!this.post_phrase_seg.equals(that.post_phrase_seg))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(PostReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRaw_post()).compareTo(other.isSetRaw_post());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw_post()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw_post, other.raw_post);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplys()).compareTo(other.isSetReplys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replys, other.replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_tags()).compareTo(other.isSetPost_tags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_tags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_tags, other.post_tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNostopwords_seg_post()).compareTo(other.isSetNostopwords_seg_post());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNostopwords_seg_post()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nostopwords_seg_post, other.nostopwords_seg_post);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeature_score()).compareTo(other.isSetFeature_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeature_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature_score, other.feature_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_info()).compareTo(other.isSetDebug_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_info, other.debug_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax_score()).compareTo(other.isSetMax_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_score, other.max_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_basic_seg()).compareTo(other.isSetPost_basic_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_basic_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_basic_seg, other.post_basic_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPost_phrase_seg()).compareTo(other.isSetPost_phrase_seg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_phrase_seg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_phrase_seg, other.post_phrase_seg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("PostReply(");
    boolean first = true;

    if (isSetRaw_post()) {
      sb.append("raw_post:");
      if (this.raw_post == null) {
        sb.append("null");
      } else {
        sb.append(this.raw_post);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetReplys()) {
      if (!first) sb.append(", ");
      sb.append("replys:");
      if (this.replys == null) {
        sb.append("null");
      } else {
        sb.append(this.replys);
      }
      first = false;
    }
    if (isSetPost_tags()) {
      if (!first) sb.append(", ");
      sb.append("post_tags:");
      if (this.post_tags == null) {
        sb.append("null");
      } else {
        sb.append(this.post_tags);
      }
      first = false;
    }
    if (isSetNostopwords_seg_post()) {
      if (!first) sb.append(", ");
      sb.append("nostopwords_seg_post:");
      if (this.nostopwords_seg_post == null) {
        sb.append("null");
      } else {
        sb.append(this.nostopwords_seg_post);
      }
      first = false;
    }
    if (isSetFeature_score()) {
      if (!first) sb.append(", ");
      sb.append("feature_score:");
      if (this.feature_score == null) {
        sb.append("null");
      } else {
        sb.append(this.feature_score);
      }
      first = false;
    }
    if (isSetDebug_info()) {
      if (!first) sb.append(", ");
      sb.append("debug_info:");
      if (this.debug_info == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_info);
      }
      first = false;
    }
    if (isSetMax_score()) {
      if (!first) sb.append(", ");
      sb.append("max_score:");
      sb.append(this.max_score);
      first = false;
    }
    if (isSetPost_basic_seg()) {
      if (!first) sb.append(", ");
      sb.append("post_basic_seg:");
      if (this.post_basic_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.post_basic_seg);
      }
      first = false;
    }
    if (isSetPost_phrase_seg()) {
      if (!first) sb.append(", ");
      sb.append("post_phrase_seg:");
      if (this.post_phrase_seg == null) {
        sb.append("null");
      } else {
        sb.append(this.post_phrase_seg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PostReplyStandardSchemeFactory implements SchemeFactory {
    public PostReplyStandardScheme getScheme() {
      return new PostReplyStandardScheme();
    }
  }

  private static class PostReplyStandardScheme extends StandardScheme<PostReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PostReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAW_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.raw_post = iprot.readString();
              struct.setRaw_postIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.replys = new ArrayList<Reply>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  Reply _elem82;
                  _elem82 = new Reply();
                  _elem82.read(iprot);
                  struct.replys.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setReplysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POST_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map83 = iprot.readMapBegin();
                struct.post_tags = new HashMap<Short,Short>(2*_map83.size);
                for (int _i84 = 0; _i84 < _map83.size; ++_i84)
                {
                  short _key85;
                  short _val86;
                  _key85 = iprot.readI16();
                  _val86 = iprot.readI16();
                  struct.post_tags.put(_key85, _val86);
                }
                iprot.readMapEnd();
              }
              struct.setPost_tagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOSTOPWORDS_SEG_POST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.nostopwords_seg_post = new ArrayList<String>(_list87.size);
                for (int _i88 = 0; _i88 < _list87.size; ++_i88)
                {
                  String _elem89;
                  _elem89 = iprot.readString();
                  struct.nostopwords_seg_post.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setNostopwords_seg_postIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FEATURE_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
                struct.feature_score = new HashMap<String,Double>(2*_map90.size);
                for (int _i91 = 0; _i91 < _map90.size; ++_i91)
                {
                  String _key92;
                  double _val93;
                  _key92 = iprot.readString();
                  _val93 = iprot.readDouble();
                  struct.feature_score.put(_key92, _val93);
                }
                iprot.readMapEnd();
              }
              struct.setFeature_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEBUG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debug_info = iprot.readString();
              struct.setDebug_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_score = iprot.readDouble();
              struct.setMax_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POST_BASIC_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.post_basic_seg = new ArrayList<String>(_list94.size);
                for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                {
                  String _elem96;
                  _elem96 = iprot.readString();
                  struct.post_basic_seg.add(_elem96);
                }
                iprot.readListEnd();
              }
              struct.setPost_basic_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POST_PHRASE_SEG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.post_phrase_seg = new ArrayList<String>(_list97.size);
                for (int _i98 = 0; _i98 < _list97.size; ++_i98)
                {
                  String _elem99;
                  _elem99 = iprot.readString();
                  struct.post_phrase_seg.add(_elem99);
                }
                iprot.readListEnd();
              }
              struct.setPost_phrase_segIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PostReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.raw_post != null) {
        if (struct.isSetRaw_post()) {
          oprot.writeFieldBegin(RAW_POST_FIELD_DESC);
          oprot.writeString(struct.raw_post);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.replys != null) {
        if (struct.isSetReplys()) {
          oprot.writeFieldBegin(REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.replys.size()));
            for (Reply _iter100 : struct.replys)
            {
              _iter100.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.post_tags != null) {
        if (struct.isSetPost_tags()) {
          oprot.writeFieldBegin(POST_TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, struct.post_tags.size()));
            for (Map.Entry<Short, Short> _iter101 : struct.post_tags.entrySet())
            {
              oprot.writeI16(_iter101.getKey());
              oprot.writeI16(_iter101.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nostopwords_seg_post != null) {
        if (struct.isSetNostopwords_seg_post()) {
          oprot.writeFieldBegin(NOSTOPWORDS_SEG_POST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nostopwords_seg_post.size()));
            for (String _iter102 : struct.nostopwords_seg_post)
            {
              oprot.writeString(_iter102);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.feature_score != null) {
        if (struct.isSetFeature_score()) {
          oprot.writeFieldBegin(FEATURE_SCORE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.feature_score.size()));
            for (Map.Entry<String, Double> _iter103 : struct.feature_score.entrySet())
            {
              oprot.writeString(_iter103.getKey());
              oprot.writeDouble(_iter103.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_info != null) {
        if (struct.isSetDebug_info()) {
          oprot.writeFieldBegin(DEBUG_INFO_FIELD_DESC);
          oprot.writeString(struct.debug_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMax_score()) {
        oprot.writeFieldBegin(MAX_SCORE_FIELD_DESC);
        oprot.writeDouble(struct.max_score);
        oprot.writeFieldEnd();
      }
      if (struct.post_basic_seg != null) {
        if (struct.isSetPost_basic_seg()) {
          oprot.writeFieldBegin(POST_BASIC_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.post_basic_seg.size()));
            for (String _iter104 : struct.post_basic_seg)
            {
              oprot.writeString(_iter104);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.post_phrase_seg != null) {
        if (struct.isSetPost_phrase_seg()) {
          oprot.writeFieldBegin(POST_PHRASE_SEG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.post_phrase_seg.size()));
            for (String _iter105 : struct.post_phrase_seg)
            {
              oprot.writeString(_iter105);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PostReplyTupleSchemeFactory implements SchemeFactory {
    public PostReplyTupleScheme getScheme() {
      return new PostReplyTupleScheme();
    }
  }

  private static class PostReplyTupleScheme extends TupleScheme<PostReply> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, PostReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRaw_post()) {
        optionals.set(0);
      }
      if (struct.isSetScore()) {
        optionals.set(1);
      }
      if (struct.isSetReplys()) {
        optionals.set(2);
      }
      if (struct.isSetPost_tags()) {
        optionals.set(3);
      }
      if (struct.isSetNostopwords_seg_post()) {
        optionals.set(4);
      }
      if (struct.isSetFeature_score()) {
        optionals.set(5);
      }
      if (struct.isSetDebug_info()) {
        optionals.set(6);
      }
      if (struct.isSetMax_score()) {
        optionals.set(7);
      }
      if (struct.isSetPost_basic_seg()) {
        optionals.set(8);
      }
      if (struct.isSetPost_phrase_seg()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRaw_post()) {
        oprot.writeString(struct.raw_post);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetReplys()) {
        {
          oprot.writeI32(struct.replys.size());
          for (Reply _iter106 : struct.replys)
          {
            _iter106.write(oprot);
          }
        }
      }
      if (struct.isSetPost_tags()) {
        {
          oprot.writeI32(struct.post_tags.size());
          for (Map.Entry<Short, Short> _iter107 : struct.post_tags.entrySet())
          {
            oprot.writeI16(_iter107.getKey());
            oprot.writeI16(_iter107.getValue());
          }
        }
      }
      if (struct.isSetNostopwords_seg_post()) {
        {
          oprot.writeI32(struct.nostopwords_seg_post.size());
          for (String _iter108 : struct.nostopwords_seg_post)
          {
            oprot.writeString(_iter108);
          }
        }
      }
      if (struct.isSetFeature_score()) {
        {
          oprot.writeI32(struct.feature_score.size());
          for (Map.Entry<String, Double> _iter109 : struct.feature_score.entrySet())
          {
            oprot.writeString(_iter109.getKey());
            oprot.writeDouble(_iter109.getValue());
          }
        }
      }
      if (struct.isSetDebug_info()) {
        oprot.writeString(struct.debug_info);
      }
      if (struct.isSetMax_score()) {
        oprot.writeDouble(struct.max_score);
      }
      if (struct.isSetPost_basic_seg()) {
        {
          oprot.writeI32(struct.post_basic_seg.size());
          for (String _iter110 : struct.post_basic_seg)
          {
            oprot.writeString(_iter110);
          }
        }
      }
      if (struct.isSetPost_phrase_seg()) {
        {
          oprot.writeI32(struct.post_phrase_seg.size());
          for (String _iter111 : struct.post_phrase_seg)
          {
            oprot.writeString(_iter111);
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, PostReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.raw_post = iprot.readString();
        struct.setRaw_postIsSet(true);
      }
      if (incoming.get(1)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.replys = new ArrayList<Reply>(_list112.size);
          for (int _i113 = 0; _i113 < _list112.size; ++_i113)
          {
            Reply _elem114;
            _elem114 = new Reply();
            _elem114.read(iprot);
            struct.replys.add(_elem114);
          }
        }
        struct.setReplysIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map115 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.post_tags = new HashMap<Short,Short>(2*_map115.size);
          for (int _i116 = 0; _i116 < _map115.size; ++_i116)
          {
            short _key117;
            short _val118;
            _key117 = iprot.readI16();
            _val118 = iprot.readI16();
            struct.post_tags.put(_key117, _val118);
          }
        }
        struct.setPost_tagsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.nostopwords_seg_post = new ArrayList<String>(_list119.size);
          for (int _i120 = 0; _i120 < _list119.size; ++_i120)
          {
            String _elem121;
            _elem121 = iprot.readString();
            struct.nostopwords_seg_post.add(_elem121);
          }
        }
        struct.setNostopwords_seg_postIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map122 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.feature_score = new HashMap<String,Double>(2*_map122.size);
          for (int _i123 = 0; _i123 < _map122.size; ++_i123)
          {
            String _key124;
            double _val125;
            _key124 = iprot.readString();
            _val125 = iprot.readDouble();
            struct.feature_score.put(_key124, _val125);
          }
        }
        struct.setFeature_scoreIsSet(true);
      }
      if (incoming.get(6)) {
        struct.debug_info = iprot.readString();
        struct.setDebug_infoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_score = iprot.readDouble();
        struct.setMax_scoreIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list126 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.post_basic_seg = new ArrayList<String>(_list126.size);
          for (int _i127 = 0; _i127 < _list126.size; ++_i127)
          {
            String _elem128;
            _elem128 = iprot.readString();
            struct.post_basic_seg.add(_elem128);
          }
        }
        struct.setPost_basic_segIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list129 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.post_phrase_seg = new ArrayList<String>(_list129.size);
          for (int _i130 = 0; _i130 < _list129.size; ++_i130)
          {
            String _elem131;
            _elem131 = iprot.readString();
            struct.post_phrase_seg.add(_elem131);
          }
        }
        struct.setPost_phrase_segIsSet(true);
      }
    }
  }

}

