/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class music implements org.apache.thrift.TBase<music, music._Fields>, java.io.Serializable, Cloneable, Comparable<music> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("music");

  private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("link_url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SINGER_FIELD_DESC = new org.apache.thrift.protocol.TField("singer", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ABLUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ablum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LRC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("lrc_url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("image_url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new musicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new musicTupleSchemeFactory());
  }

  public String link_url; // optional
  public String name; // optional
  public String singer; // optional
  public String ablum; // optional
  public String lrc_url; // optional
  public String image_url; // optional
  public String duration; // optional
  public String label; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINK_URL((short)1, "link_url"),
    NAME((short)2, "name"),
    SINGER((short)3, "singer"),
    ABLUM((short)4, "ablum"),
    LRC_URL((short)5, "lrc_url"),
    IMAGE_URL((short)6, "image_url"),
    DURATION((short)7, "duration"),
    LABEL((short)8, "label");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINK_URL
          return LINK_URL;
        case 2: // NAME
          return NAME;
        case 3: // SINGER
          return SINGER;
        case 4: // ABLUM
          return ABLUM;
        case 5: // LRC_URL
          return LRC_URL;
        case 6: // IMAGE_URL
          return IMAGE_URL;
        case 7: // DURATION
          return DURATION;
        case 8: // LABEL
          return LABEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LINK_URL,_Fields.NAME,_Fields.SINGER,_Fields.ABLUM,_Fields.LRC_URL,_Fields.IMAGE_URL,_Fields.DURATION,_Fields.LABEL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("link_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SINGER, new org.apache.thrift.meta_data.FieldMetaData("singer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABLUM, new org.apache.thrift.meta_data.FieldMetaData("ablum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LRC_URL, new org.apache.thrift.meta_data.FieldMetaData("lrc_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("image_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(music.class, metaDataMap);
  }

  public music() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public music(music other) {
    if (other.isSetLink_url()) {
      this.link_url = other.link_url;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSinger()) {
      this.singer = other.singer;
    }
    if (other.isSetAblum()) {
      this.ablum = other.ablum;
    }
    if (other.isSetLrc_url()) {
      this.lrc_url = other.lrc_url;
    }
    if (other.isSetImage_url()) {
      this.image_url = other.image_url;
    }
    if (other.isSetDuration()) {
      this.duration = other.duration;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
  }

  public music deepCopy() {
    return new music(this);
  }

  
  public void clear() {
    this.link_url = null;
    this.name = null;
    this.singer = null;
    this.ablum = null;
    this.lrc_url = null;
    this.image_url = null;
    this.duration = null;
    this.label = null;
  }

  public String getLink_url() {
    return this.link_url;
  }

  public music setLink_url(String link_url) {
    this.link_url = link_url;
    return this;
  }

  public void unsetLink_url() {
    this.link_url = null;
  }

  /** Returns true if field link_url is set (has been assigned a value) and false otherwise */
  public boolean isSetLink_url() {
    return this.link_url != null;
  }

  public void setLink_urlIsSet(boolean value) {
    if (!value) {
      this.link_url = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public music setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSinger() {
    return this.singer;
  }

  public music setSinger(String singer) {
    this.singer = singer;
    return this;
  }

  public void unsetSinger() {
    this.singer = null;
  }

  /** Returns true if field singer is set (has been assigned a value) and false otherwise */
  public boolean isSetSinger() {
    return this.singer != null;
  }

  public void setSingerIsSet(boolean value) {
    if (!value) {
      this.singer = null;
    }
  }

  public String getAblum() {
    return this.ablum;
  }

  public music setAblum(String ablum) {
    this.ablum = ablum;
    return this;
  }

  public void unsetAblum() {
    this.ablum = null;
  }

  /** Returns true if field ablum is set (has been assigned a value) and false otherwise */
  public boolean isSetAblum() {
    return this.ablum != null;
  }

  public void setAblumIsSet(boolean value) {
    if (!value) {
      this.ablum = null;
    }
  }

  public String getLrc_url() {
    return this.lrc_url;
  }

  public music setLrc_url(String lrc_url) {
    this.lrc_url = lrc_url;
    return this;
  }

  public void unsetLrc_url() {
    this.lrc_url = null;
  }

  /** Returns true if field lrc_url is set (has been assigned a value) and false otherwise */
  public boolean isSetLrc_url() {
    return this.lrc_url != null;
  }

  public void setLrc_urlIsSet(boolean value) {
    if (!value) {
      this.lrc_url = null;
    }
  }

  public String getImage_url() {
    return this.image_url;
  }

  public music setImage_url(String image_url) {
    this.image_url = image_url;
    return this;
  }

  public void unsetImage_url() {
    this.image_url = null;
  }

  /** Returns true if field image_url is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_url() {
    return this.image_url != null;
  }

  public void setImage_urlIsSet(boolean value) {
    if (!value) {
      this.image_url = null;
    }
  }

  public String getDuration() {
    return this.duration;
  }

  public music setDuration(String duration) {
    this.duration = duration;
    return this;
  }

  public void unsetDuration() {
    this.duration = null;
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return this.duration != null;
  }

  public void setDurationIsSet(boolean value) {
    if (!value) {
      this.duration = null;
    }
  }

  public String getLabel() {
    return this.label;
  }

  public music setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINK_URL:
      if (value == null) {
        unsetLink_url();
      } else {
        setLink_url((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SINGER:
      if (value == null) {
        unsetSinger();
      } else {
        setSinger((String)value);
      }
      break;

    case ABLUM:
      if (value == null) {
        unsetAblum();
      } else {
        setAblum((String)value);
      }
      break;

    case LRC_URL:
      if (value == null) {
        unsetLrc_url();
      } else {
        setLrc_url((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImage_url();
      } else {
        setImage_url((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINK_URL:
      return getLink_url();

    case NAME:
      return getName();

    case SINGER:
      return getSinger();

    case ABLUM:
      return getAblum();

    case LRC_URL:
      return getLrc_url();

    case IMAGE_URL:
      return getImage_url();

    case DURATION:
      return getDuration();

    case LABEL:
      return getLabel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINK_URL:
      return isSetLink_url();
    case NAME:
      return isSetName();
    case SINGER:
      return isSetSinger();
    case ABLUM:
      return isSetAblum();
    case LRC_URL:
      return isSetLrc_url();
    case IMAGE_URL:
      return isSetImage_url();
    case DURATION:
      return isSetDuration();
    case LABEL:
      return isSetLabel();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof music)
      return this.equals((music)that);
    return false;
  }

  public boolean equals(music that) {
    if (that == null)
      return false;

    boolean this_present_link_url = true && this.isSetLink_url();
    boolean that_present_link_url = true && that.isSetLink_url();
    if (this_present_link_url || that_present_link_url) {
      if (!(this_present_link_url && that_present_link_url))
        return false;
      if (!this.link_url.equals(that.link_url))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_singer = true && this.isSetSinger();
    boolean that_present_singer = true && that.isSetSinger();
    if (this_present_singer || that_present_singer) {
      if (!(this_present_singer && that_present_singer))
        return false;
      if (!this.singer.equals(that.singer))
        return false;
    }

    boolean this_present_ablum = true && this.isSetAblum();
    boolean that_present_ablum = true && that.isSetAblum();
    if (this_present_ablum || that_present_ablum) {
      if (!(this_present_ablum && that_present_ablum))
        return false;
      if (!this.ablum.equals(that.ablum))
        return false;
    }

    boolean this_present_lrc_url = true && this.isSetLrc_url();
    boolean that_present_lrc_url = true && that.isSetLrc_url();
    if (this_present_lrc_url || that_present_lrc_url) {
      if (!(this_present_lrc_url && that_present_lrc_url))
        return false;
      if (!this.lrc_url.equals(that.lrc_url))
        return false;
    }

    boolean this_present_image_url = true && this.isSetImage_url();
    boolean that_present_image_url = true && that.isSetImage_url();
    if (this_present_image_url || that_present_image_url) {
      if (!(this_present_image_url && that_present_image_url))
        return false;
      if (!this.image_url.equals(that.image_url))
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (!this.duration.equals(that.duration))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(music other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLink_url()).compareTo(other.isSetLink_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.link_url, other.link_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSinger()).compareTo(other.isSetSinger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSinger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singer, other.singer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAblum()).compareTo(other.isSetAblum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAblum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ablum, other.ablum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLrc_url()).compareTo(other.isSetLrc_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLrc_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lrc_url, other.lrc_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage_url()).compareTo(other.isSetImage_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_url, other.image_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("music(");
    boolean first = true;

    if (isSetLink_url()) {
      sb.append("link_url:");
      if (this.link_url == null) {
        sb.append("null");
      } else {
        sb.append(this.link_url);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSinger()) {
      if (!first) sb.append(", ");
      sb.append("singer:");
      if (this.singer == null) {
        sb.append("null");
      } else {
        sb.append(this.singer);
      }
      first = false;
    }
    if (isSetAblum()) {
      if (!first) sb.append(", ");
      sb.append("ablum:");
      if (this.ablum == null) {
        sb.append("null");
      } else {
        sb.append(this.ablum);
      }
      first = false;
    }
    if (isSetLrc_url()) {
      if (!first) sb.append(", ");
      sb.append("lrc_url:");
      if (this.lrc_url == null) {
        sb.append("null");
      } else {
        sb.append(this.lrc_url);
      }
      first = false;
    }
    if (isSetImage_url()) {
      if (!first) sb.append(", ");
      sb.append("image_url:");
      if (this.image_url == null) {
        sb.append("null");
      } else {
        sb.append(this.image_url);
      }
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      if (this.duration == null) {
        sb.append("null");
      } else {
        sb.append(this.duration);
      }
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class musicStandardSchemeFactory implements SchemeFactory {
    public musicStandardScheme getScheme() {
      return new musicStandardScheme();
    }
  }

  private static class musicStandardScheme extends StandardScheme<music> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, music struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.link_url = iprot.readString();
              struct.setLink_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SINGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.singer = iprot.readString();
              struct.setSingerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ABLUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ablum = iprot.readString();
              struct.setAblumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LRC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lrc_url = iprot.readString();
              struct.setLrc_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image_url = iprot.readString();
              struct.setImage_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.duration = iprot.readString();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, music struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.link_url != null) {
        if (struct.isSetLink_url()) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.link_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.singer != null) {
        if (struct.isSetSinger()) {
          oprot.writeFieldBegin(SINGER_FIELD_DESC);
          oprot.writeString(struct.singer);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ablum != null) {
        if (struct.isSetAblum()) {
          oprot.writeFieldBegin(ABLUM_FIELD_DESC);
          oprot.writeString(struct.ablum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lrc_url != null) {
        if (struct.isSetLrc_url()) {
          oprot.writeFieldBegin(LRC_URL_FIELD_DESC);
          oprot.writeString(struct.lrc_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.image_url != null) {
        if (struct.isSetImage_url()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.image_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.duration != null) {
        if (struct.isSetDuration()) {
          oprot.writeFieldBegin(DURATION_FIELD_DESC);
          oprot.writeString(struct.duration);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class musicTupleSchemeFactory implements SchemeFactory {
    public musicTupleScheme getScheme() {
      return new musicTupleScheme();
    }
  }

  private static class musicTupleScheme extends TupleScheme<music> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, music struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLink_url()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSinger()) {
        optionals.set(2);
      }
      if (struct.isSetAblum()) {
        optionals.set(3);
      }
      if (struct.isSetLrc_url()) {
        optionals.set(4);
      }
      if (struct.isSetImage_url()) {
        optionals.set(5);
      }
      if (struct.isSetDuration()) {
        optionals.set(6);
      }
      if (struct.isSetLabel()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLink_url()) {
        oprot.writeString(struct.link_url);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSinger()) {
        oprot.writeString(struct.singer);
      }
      if (struct.isSetAblum()) {
        oprot.writeString(struct.ablum);
      }
      if (struct.isSetLrc_url()) {
        oprot.writeString(struct.lrc_url);
      }
      if (struct.isSetImage_url()) {
        oprot.writeString(struct.image_url);
      }
      if (struct.isSetDuration()) {
        oprot.writeString(struct.duration);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, music struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.link_url = iprot.readString();
        struct.setLink_urlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.singer = iprot.readString();
        struct.setSingerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ablum = iprot.readString();
        struct.setAblumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lrc_url = iprot.readString();
        struct.setLrc_urlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.image_url = iprot.readString();
        struct.setImage_urlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.duration = iprot.readString();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
    }
  }

}

