/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ProactiveReply implements org.apache.thrift.TBase<ProactiveReply, ProactiveReply._Fields>, java.io.Serializable, Cloneable, Comparable<ProactiveReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProactiveReply");

  private static final org.apache.thrift.protocol.TField REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("reply", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROACTIVE_TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("proactive_trigger", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_done", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_IGNORE_OTHER_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_ignore_other_reply", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_info", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProactiveReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProactiveReplyTupleSchemeFactory());
  }

  public String reply; // optional
  /**
   * 
   * @see ProactiveTrigger
   */
  public ProactiveTrigger proactive_trigger; // optional
  public boolean is_done; // optional
  public boolean is_ignore_other_reply; // optional
  public String extra_info; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPLY((short)1, "reply"),
    /**
     * 
     * @see ProactiveTrigger
     */
    PROACTIVE_TRIGGER((short)2, "proactive_trigger"),
    IS_DONE((short)3, "is_done"),
    IS_IGNORE_OTHER_REPLY((short)4, "is_ignore_other_reply"),
    EXTRA_INFO((short)5, "extra_info");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPLY
          return REPLY;
        case 2: // PROACTIVE_TRIGGER
          return PROACTIVE_TRIGGER;
        case 3: // IS_DONE
          return IS_DONE;
        case 4: // IS_IGNORE_OTHER_REPLY
          return IS_IGNORE_OTHER_REPLY;
        case 5: // EXTRA_INFO
          return EXTRA_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_DONE_ISSET_ID = 0;
  private static final int __IS_IGNORE_OTHER_REPLY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPLY,_Fields.PROACTIVE_TRIGGER,_Fields.IS_DONE,_Fields.IS_IGNORE_OTHER_REPLY,_Fields.EXTRA_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPLY, new org.apache.thrift.meta_data.FieldMetaData("reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROACTIVE_TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("proactive_trigger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProactiveTrigger.class)));
    tmpMap.put(_Fields.IS_DONE, new org.apache.thrift.meta_data.FieldMetaData("is_done", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_IGNORE_OTHER_REPLY, new org.apache.thrift.meta_data.FieldMetaData("is_ignore_other_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTRA_INFO, new org.apache.thrift.meta_data.FieldMetaData("extra_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProactiveReply.class, metaDataMap);
  }

  public ProactiveReply() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProactiveReply(ProactiveReply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReply()) {
      this.reply = other.reply;
    }
    if (other.isSetProactive_trigger()) {
      this.proactive_trigger = other.proactive_trigger;
    }
    this.is_done = other.is_done;
    this.is_ignore_other_reply = other.is_ignore_other_reply;
    if (other.isSetExtra_info()) {
      this.extra_info = other.extra_info;
    }
  }

  public ProactiveReply deepCopy() {
    return new ProactiveReply(this);
  }

  
  public void clear() {
    this.reply = null;
    this.proactive_trigger = null;
    setIs_doneIsSet(false);
    this.is_done = false;
    setIs_ignore_other_replyIsSet(false);
    this.is_ignore_other_reply = false;
    this.extra_info = null;
  }

  public String getReply() {
    return this.reply;
  }

  public ProactiveReply setReply(String reply) {
    this.reply = reply;
    return this;
  }

  public void unsetReply() {
    this.reply = null;
  }

  /** Returns true if field reply is set (has been assigned a value) and false otherwise */
  public boolean isSetReply() {
    return this.reply != null;
  }

  public void setReplyIsSet(boolean value) {
    if (!value) {
      this.reply = null;
    }
  }

  /**
   * 
   * @see ProactiveTrigger
   */
  public ProactiveTrigger getProactive_trigger() {
    return this.proactive_trigger;
  }

  /**
   * 
   * @see ProactiveTrigger
   */
  public ProactiveReply setProactive_trigger(ProactiveTrigger proactive_trigger) {
    this.proactive_trigger = proactive_trigger;
    return this;
  }

  public void unsetProactive_trigger() {
    this.proactive_trigger = null;
  }

  /** Returns true if field proactive_trigger is set (has been assigned a value) and false otherwise */
  public boolean isSetProactive_trigger() {
    return this.proactive_trigger != null;
  }

  public void setProactive_triggerIsSet(boolean value) {
    if (!value) {
      this.proactive_trigger = null;
    }
  }

  public boolean isIs_done() {
    return this.is_done;
  }

  public ProactiveReply setIs_done(boolean is_done) {
    this.is_done = is_done;
    setIs_doneIsSet(true);
    return this;
  }

  public void unsetIs_done() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_DONE_ISSET_ID);
  }

  /** Returns true if field is_done is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_done() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_DONE_ISSET_ID);
  }

  public void setIs_doneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_DONE_ISSET_ID, value);
  }

  public boolean isIs_ignore_other_reply() {
    return this.is_ignore_other_reply;
  }

  public ProactiveReply setIs_ignore_other_reply(boolean is_ignore_other_reply) {
    this.is_ignore_other_reply = is_ignore_other_reply;
    setIs_ignore_other_replyIsSet(true);
    return this;
  }

  public void unsetIs_ignore_other_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_IGNORE_OTHER_REPLY_ISSET_ID);
  }

  /** Returns true if field is_ignore_other_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_ignore_other_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_IGNORE_OTHER_REPLY_ISSET_ID);
  }

  public void setIs_ignore_other_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_IGNORE_OTHER_REPLY_ISSET_ID, value);
  }

  public String getExtra_info() {
    return this.extra_info;
  }

  public ProactiveReply setExtra_info(String extra_info) {
    this.extra_info = extra_info;
    return this;
  }

  public void unsetExtra_info() {
    this.extra_info = null;
  }

  /** Returns true if field extra_info is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_info() {
    return this.extra_info != null;
  }

  public void setExtra_infoIsSet(boolean value) {
    if (!value) {
      this.extra_info = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPLY:
      if (value == null) {
        unsetReply();
      } else {
        setReply((String)value);
      }
      break;

    case PROACTIVE_TRIGGER:
      if (value == null) {
        unsetProactive_trigger();
      } else {
        setProactive_trigger((ProactiveTrigger)value);
      }
      break;

    case IS_DONE:
      if (value == null) {
        unsetIs_done();
      } else {
        setIs_done((Boolean)value);
      }
      break;

    case IS_IGNORE_OTHER_REPLY:
      if (value == null) {
        unsetIs_ignore_other_reply();
      } else {
        setIs_ignore_other_reply((Boolean)value);
      }
      break;

    case EXTRA_INFO:
      if (value == null) {
        unsetExtra_info();
      } else {
        setExtra_info((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPLY:
      return getReply();

    case PROACTIVE_TRIGGER:
      return getProactive_trigger();

    case IS_DONE:
      return Boolean.valueOf(isIs_done());

    case IS_IGNORE_OTHER_REPLY:
      return Boolean.valueOf(isIs_ignore_other_reply());

    case EXTRA_INFO:
      return getExtra_info();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPLY:
      return isSetReply();
    case PROACTIVE_TRIGGER:
      return isSetProactive_trigger();
    case IS_DONE:
      return isSetIs_done();
    case IS_IGNORE_OTHER_REPLY:
      return isSetIs_ignore_other_reply();
    case EXTRA_INFO:
      return isSetExtra_info();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProactiveReply)
      return this.equals((ProactiveReply)that);
    return false;
  }

  public boolean equals(ProactiveReply that) {
    if (that == null)
      return false;

    boolean this_present_reply = true && this.isSetReply();
    boolean that_present_reply = true && that.isSetReply();
    if (this_present_reply || that_present_reply) {
      if (!(this_present_reply && that_present_reply))
        return false;
      if (!this.reply.equals(that.reply))
        return false;
    }

    boolean this_present_proactive_trigger = true && this.isSetProactive_trigger();
    boolean that_present_proactive_trigger = true && that.isSetProactive_trigger();
    if (this_present_proactive_trigger || that_present_proactive_trigger) {
      if (!(this_present_proactive_trigger && that_present_proactive_trigger))
        return false;
      if (!this.proactive_trigger.equals(that.proactive_trigger))
        return false;
    }

    boolean this_present_is_done = true && this.isSetIs_done();
    boolean that_present_is_done = true && that.isSetIs_done();
    if (this_present_is_done || that_present_is_done) {
      if (!(this_present_is_done && that_present_is_done))
        return false;
      if (this.is_done != that.is_done)
        return false;
    }

    boolean this_present_is_ignore_other_reply = true && this.isSetIs_ignore_other_reply();
    boolean that_present_is_ignore_other_reply = true && that.isSetIs_ignore_other_reply();
    if (this_present_is_ignore_other_reply || that_present_is_ignore_other_reply) {
      if (!(this_present_is_ignore_other_reply && that_present_is_ignore_other_reply))
        return false;
      if (this.is_ignore_other_reply != that.is_ignore_other_reply)
        return false;
    }

    boolean this_present_extra_info = true && this.isSetExtra_info();
    boolean that_present_extra_info = true && that.isSetExtra_info();
    if (this_present_extra_info || that_present_extra_info) {
      if (!(this_present_extra_info && that_present_extra_info))
        return false;
      if (!this.extra_info.equals(that.extra_info))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ProactiveReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReply()).compareTo(other.isSetReply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply, other.reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProactive_trigger()).compareTo(other.isSetProactive_trigger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProactive_trigger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proactive_trigger, other.proactive_trigger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_done()).compareTo(other.isSetIs_done());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_done()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_done, other.is_done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_ignore_other_reply()).compareTo(other.isSetIs_ignore_other_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_ignore_other_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_ignore_other_reply, other.is_ignore_other_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra_info()).compareTo(other.isSetExtra_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_info, other.extra_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ProactiveReply(");
    boolean first = true;

    if (isSetReply()) {
      sb.append("reply:");
      if (this.reply == null) {
        sb.append("null");
      } else {
        sb.append(this.reply);
      }
      first = false;
    }
    if (isSetProactive_trigger()) {
      if (!first) sb.append(", ");
      sb.append("proactive_trigger:");
      if (this.proactive_trigger == null) {
        sb.append("null");
      } else {
        sb.append(this.proactive_trigger);
      }
      first = false;
    }
    if (isSetIs_done()) {
      if (!first) sb.append(", ");
      sb.append("is_done:");
      sb.append(this.is_done);
      first = false;
    }
    if (isSetIs_ignore_other_reply()) {
      if (!first) sb.append(", ");
      sb.append("is_ignore_other_reply:");
      sb.append(this.is_ignore_other_reply);
      first = false;
    }
    if (isSetExtra_info()) {
      if (!first) sb.append(", ");
      sb.append("extra_info:");
      if (this.extra_info == null) {
        sb.append("null");
      } else {
        sb.append(this.extra_info);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProactiveReplyStandardSchemeFactory implements SchemeFactory {
    public ProactiveReplyStandardScheme getScheme() {
      return new ProactiveReplyStandardScheme();
    }
  }

  private static class ProactiveReplyStandardScheme extends StandardScheme<ProactiveReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProactiveReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reply = iprot.readString();
              struct.setReplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROACTIVE_TRIGGER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proactive_trigger = ProactiveTrigger.findByValue(iprot.readI32());
              struct.setProactive_triggerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_done = iprot.readBool();
              struct.setIs_doneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_IGNORE_OTHER_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_ignore_other_reply = iprot.readBool();
              struct.setIs_ignore_other_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRA_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra_info = iprot.readString();
              struct.setExtra_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProactiveReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reply != null) {
        if (struct.isSetReply()) {
          oprot.writeFieldBegin(REPLY_FIELD_DESC);
          oprot.writeString(struct.reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.proactive_trigger != null) {
        if (struct.isSetProactive_trigger()) {
          oprot.writeFieldBegin(PROACTIVE_TRIGGER_FIELD_DESC);
          oprot.writeI32(struct.proactive_trigger.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_done()) {
        oprot.writeFieldBegin(IS_DONE_FIELD_DESC);
        oprot.writeBool(struct.is_done);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_ignore_other_reply()) {
        oprot.writeFieldBegin(IS_IGNORE_OTHER_REPLY_FIELD_DESC);
        oprot.writeBool(struct.is_ignore_other_reply);
        oprot.writeFieldEnd();
      }
      if (struct.extra_info != null) {
        if (struct.isSetExtra_info()) {
          oprot.writeFieldBegin(EXTRA_INFO_FIELD_DESC);
          oprot.writeString(struct.extra_info);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProactiveReplyTupleSchemeFactory implements SchemeFactory {
    public ProactiveReplyTupleScheme getScheme() {
      return new ProactiveReplyTupleScheme();
    }
  }

  private static class ProactiveReplyTupleScheme extends TupleScheme<ProactiveReply> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ProactiveReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReply()) {
        optionals.set(0);
      }
      if (struct.isSetProactive_trigger()) {
        optionals.set(1);
      }
      if (struct.isSetIs_done()) {
        optionals.set(2);
      }
      if (struct.isSetIs_ignore_other_reply()) {
        optionals.set(3);
      }
      if (struct.isSetExtra_info()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetReply()) {
        oprot.writeString(struct.reply);
      }
      if (struct.isSetProactive_trigger()) {
        oprot.writeI32(struct.proactive_trigger.getValue());
      }
      if (struct.isSetIs_done()) {
        oprot.writeBool(struct.is_done);
      }
      if (struct.isSetIs_ignore_other_reply()) {
        oprot.writeBool(struct.is_ignore_other_reply);
      }
      if (struct.isSetExtra_info()) {
        oprot.writeString(struct.extra_info);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ProactiveReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.reply = iprot.readString();
        struct.setReplyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.proactive_trigger = ProactiveTrigger.findByValue(iprot.readI32());
        struct.setProactive_triggerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_done = iprot.readBool();
        struct.setIs_doneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_ignore_other_reply = iprot.readBool();
        struct.setIs_ignore_other_replyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.extra_info = iprot.readString();
        struct.setExtra_infoIsSet(true);
      }
    }
  }

}

