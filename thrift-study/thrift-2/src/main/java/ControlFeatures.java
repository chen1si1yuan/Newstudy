/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ControlFeatures implements org.apache.thrift.TBase<ControlFeatures, ControlFeatures._Fields>, java.io.Serializable, Cloneable, Comparable<ControlFeatures> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ControlFeatures");

  private static final org.apache.thrift.protocol.TField CI_FIELD_DESC = new org.apache.thrift.protocol.TField("ci", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTROL_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("control_reply", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTROL_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("control_slots", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CONTROL_INSTRUCTION_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("control_instruction_link", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTROL_PARSER_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("control_parser_line", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ControlFeaturesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ControlFeaturesTupleSchemeFactory());
  }

  public ControlInstruction ci; // optional
  public String control_reply; // optional
  public Map<String,String> control_slots; // optional
  public String control_instruction_link; // optional
  public String control_parser_line; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CI((short)1, "ci"),
    CONTROL_REPLY((short)2, "control_reply"),
    CONTROL_SLOTS((short)3, "control_slots"),
    CONTROL_INSTRUCTION_LINK((short)4, "control_instruction_link"),
    CONTROL_PARSER_LINE((short)5, "control_parser_line");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CI
          return CI;
        case 2: // CONTROL_REPLY
          return CONTROL_REPLY;
        case 3: // CONTROL_SLOTS
          return CONTROL_SLOTS;
        case 4: // CONTROL_INSTRUCTION_LINK
          return CONTROL_INSTRUCTION_LINK;
        case 5: // CONTROL_PARSER_LINE
          return CONTROL_PARSER_LINE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CI,_Fields.CONTROL_REPLY,_Fields.CONTROL_SLOTS,_Fields.CONTROL_INSTRUCTION_LINK,_Fields.CONTROL_PARSER_LINE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CI, new org.apache.thrift.meta_data.FieldMetaData("ci", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ControlInstruction.class)));
    tmpMap.put(_Fields.CONTROL_REPLY, new org.apache.thrift.meta_data.FieldMetaData("control_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTROL_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("control_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONTROL_INSTRUCTION_LINK, new org.apache.thrift.meta_data.FieldMetaData("control_instruction_link", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTROL_PARSER_LINE, new org.apache.thrift.meta_data.FieldMetaData("control_parser_line", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ControlFeatures.class, metaDataMap);
  }

  public ControlFeatures() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ControlFeatures(ControlFeatures other) {
    if (other.isSetCi()) {
      this.ci = new ControlInstruction(other.ci);
    }
    if (other.isSetControl_reply()) {
      this.control_reply = other.control_reply;
    }
    if (other.isSetControl_slots()) {
      Map<String,String> __this__control_slots = new HashMap<String,String>(other.control_slots);
      this.control_slots = __this__control_slots;
    }
    if (other.isSetControl_instruction_link()) {
      this.control_instruction_link = other.control_instruction_link;
    }
    if (other.isSetControl_parser_line()) {
      this.control_parser_line = other.control_parser_line;
    }
  }

  public ControlFeatures deepCopy() {
    return new ControlFeatures(this);
  }

  
  public void clear() {
    this.ci = null;
    this.control_reply = null;
    this.control_slots = null;
    this.control_instruction_link = null;
    this.control_parser_line = null;
  }

  public ControlInstruction getCi() {
    return this.ci;
  }

  public ControlFeatures setCi(ControlInstruction ci) {
    this.ci = ci;
    return this;
  }

  public void unsetCi() {
    this.ci = null;
  }

  /** Returns true if field ci is set (has been assigned a value) and false otherwise */
  public boolean isSetCi() {
    return this.ci != null;
  }

  public void setCiIsSet(boolean value) {
    if (!value) {
      this.ci = null;
    }
  }

  public String getControl_reply() {
    return this.control_reply;
  }

  public ControlFeatures setControl_reply(String control_reply) {
    this.control_reply = control_reply;
    return this;
  }

  public void unsetControl_reply() {
    this.control_reply = null;
  }

  /** Returns true if field control_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_reply() {
    return this.control_reply != null;
  }

  public void setControl_replyIsSet(boolean value) {
    if (!value) {
      this.control_reply = null;
    }
  }

  public int getControl_slotsSize() {
    return (this.control_slots == null) ? 0 : this.control_slots.size();
  }

  public void putToControl_slots(String key, String val) {
    if (this.control_slots == null) {
      this.control_slots = new HashMap<String,String>();
    }
    this.control_slots.put(key, val);
  }

  public Map<String,String> getControl_slots() {
    return this.control_slots;
  }

  public ControlFeatures setControl_slots(Map<String,String> control_slots) {
    this.control_slots = control_slots;
    return this;
  }

  public void unsetControl_slots() {
    this.control_slots = null;
  }

  /** Returns true if field control_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_slots() {
    return this.control_slots != null;
  }

  public void setControl_slotsIsSet(boolean value) {
    if (!value) {
      this.control_slots = null;
    }
  }

  public String getControl_instruction_link() {
    return this.control_instruction_link;
  }

  public ControlFeatures setControl_instruction_link(String control_instruction_link) {
    this.control_instruction_link = control_instruction_link;
    return this;
  }

  public void unsetControl_instruction_link() {
    this.control_instruction_link = null;
  }

  /** Returns true if field control_instruction_link is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_instruction_link() {
    return this.control_instruction_link != null;
  }

  public void setControl_instruction_linkIsSet(boolean value) {
    if (!value) {
      this.control_instruction_link = null;
    }
  }

  public String getControl_parser_line() {
    return this.control_parser_line;
  }

  public ControlFeatures setControl_parser_line(String control_parser_line) {
    this.control_parser_line = control_parser_line;
    return this;
  }

  public void unsetControl_parser_line() {
    this.control_parser_line = null;
  }

  /** Returns true if field control_parser_line is set (has been assigned a value) and false otherwise */
  public boolean isSetControl_parser_line() {
    return this.control_parser_line != null;
  }

  public void setControl_parser_lineIsSet(boolean value) {
    if (!value) {
      this.control_parser_line = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CI:
      if (value == null) {
        unsetCi();
      } else {
        setCi((ControlInstruction)value);
      }
      break;

    case CONTROL_REPLY:
      if (value == null) {
        unsetControl_reply();
      } else {
        setControl_reply((String)value);
      }
      break;

    case CONTROL_SLOTS:
      if (value == null) {
        unsetControl_slots();
      } else {
        setControl_slots((Map<String,String>)value);
      }
      break;

    case CONTROL_INSTRUCTION_LINK:
      if (value == null) {
        unsetControl_instruction_link();
      } else {
        setControl_instruction_link((String)value);
      }
      break;

    case CONTROL_PARSER_LINE:
      if (value == null) {
        unsetControl_parser_line();
      } else {
        setControl_parser_line((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CI:
      return getCi();

    case CONTROL_REPLY:
      return getControl_reply();

    case CONTROL_SLOTS:
      return getControl_slots();

    case CONTROL_INSTRUCTION_LINK:
      return getControl_instruction_link();

    case CONTROL_PARSER_LINE:
      return getControl_parser_line();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CI:
      return isSetCi();
    case CONTROL_REPLY:
      return isSetControl_reply();
    case CONTROL_SLOTS:
      return isSetControl_slots();
    case CONTROL_INSTRUCTION_LINK:
      return isSetControl_instruction_link();
    case CONTROL_PARSER_LINE:
      return isSetControl_parser_line();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ControlFeatures)
      return this.equals((ControlFeatures)that);
    return false;
  }

  public boolean equals(ControlFeatures that) {
    if (that == null)
      return false;

    boolean this_present_ci = true && this.isSetCi();
    boolean that_present_ci = true && that.isSetCi();
    if (this_present_ci || that_present_ci) {
      if (!(this_present_ci && that_present_ci))
        return false;
      if (!this.ci.equals(that.ci))
        return false;
    }

    boolean this_present_control_reply = true && this.isSetControl_reply();
    boolean that_present_control_reply = true && that.isSetControl_reply();
    if (this_present_control_reply || that_present_control_reply) {
      if (!(this_present_control_reply && that_present_control_reply))
        return false;
      if (!this.control_reply.equals(that.control_reply))
        return false;
    }

    boolean this_present_control_slots = true && this.isSetControl_slots();
    boolean that_present_control_slots = true && that.isSetControl_slots();
    if (this_present_control_slots || that_present_control_slots) {
      if (!(this_present_control_slots && that_present_control_slots))
        return false;
      if (!this.control_slots.equals(that.control_slots))
        return false;
    }

    boolean this_present_control_instruction_link = true && this.isSetControl_instruction_link();
    boolean that_present_control_instruction_link = true && that.isSetControl_instruction_link();
    if (this_present_control_instruction_link || that_present_control_instruction_link) {
      if (!(this_present_control_instruction_link && that_present_control_instruction_link))
        return false;
      if (!this.control_instruction_link.equals(that.control_instruction_link))
        return false;
    }

    boolean this_present_control_parser_line = true && this.isSetControl_parser_line();
    boolean that_present_control_parser_line = true && that.isSetControl_parser_line();
    if (this_present_control_parser_line || that_present_control_parser_line) {
      if (!(this_present_control_parser_line && that_present_control_parser_line))
        return false;
      if (!this.control_parser_line.equals(that.control_parser_line))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ControlFeatures other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCi()).compareTo(other.isSetCi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ci, other.ci);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_reply()).compareTo(other.isSetControl_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_reply, other.control_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_slots()).compareTo(other.isSetControl_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_slots, other.control_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_instruction_link()).compareTo(other.isSetControl_instruction_link());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_instruction_link()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_instruction_link, other.control_instruction_link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetControl_parser_line()).compareTo(other.isSetControl_parser_line());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl_parser_line()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control_parser_line, other.control_parser_line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ControlFeatures(");
    boolean first = true;

    if (isSetCi()) {
      sb.append("ci:");
      if (this.ci == null) {
        sb.append("null");
      } else {
        sb.append(this.ci);
      }
      first = false;
    }
    if (isSetControl_reply()) {
      if (!first) sb.append(", ");
      sb.append("control_reply:");
      if (this.control_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.control_reply);
      }
      first = false;
    }
    if (isSetControl_slots()) {
      if (!first) sb.append(", ");
      sb.append("control_slots:");
      if (this.control_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.control_slots);
      }
      first = false;
    }
    if (isSetControl_instruction_link()) {
      if (!first) sb.append(", ");
      sb.append("control_instruction_link:");
      if (this.control_instruction_link == null) {
        sb.append("null");
      } else {
        sb.append(this.control_instruction_link);
      }
      first = false;
    }
    if (isSetControl_parser_line()) {
      if (!first) sb.append(", ");
      sb.append("control_parser_line:");
      if (this.control_parser_line == null) {
        sb.append("null");
      } else {
        sb.append(this.control_parser_line);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ci != null) {
      ci.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ControlFeaturesStandardSchemeFactory implements SchemeFactory {
    public ControlFeaturesStandardScheme getScheme() {
      return new ControlFeaturesStandardScheme();
    }
  }

  private static class ControlFeaturesStandardScheme extends StandardScheme<ControlFeatures> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ControlFeatures struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ci = new ControlInstruction();
              struct.ci.read(iprot);
              struct.setCiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTROL_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.control_reply = iprot.readString();
              struct.setControl_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTROL_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.control_slots = new HashMap<String,String>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10;
                  String _val11;
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.control_slots.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setControl_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTROL_INSTRUCTION_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.control_instruction_link = iprot.readString();
              struct.setControl_instruction_linkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTROL_PARSER_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.control_parser_line = iprot.readString();
              struct.setControl_parser_lineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ControlFeatures struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ci != null) {
        if (struct.isSetCi()) {
          oprot.writeFieldBegin(CI_FIELD_DESC);
          struct.ci.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.control_reply != null) {
        if (struct.isSetControl_reply()) {
          oprot.writeFieldBegin(CONTROL_REPLY_FIELD_DESC);
          oprot.writeString(struct.control_reply);
          oprot.writeFieldEnd();
        }
      }
      if (struct.control_slots != null) {
        if (struct.isSetControl_slots()) {
          oprot.writeFieldBegin(CONTROL_SLOTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.control_slots.size()));
            for (Map.Entry<String, String> _iter12 : struct.control_slots.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.control_instruction_link != null) {
        if (struct.isSetControl_instruction_link()) {
          oprot.writeFieldBegin(CONTROL_INSTRUCTION_LINK_FIELD_DESC);
          oprot.writeString(struct.control_instruction_link);
          oprot.writeFieldEnd();
        }
      }
      if (struct.control_parser_line != null) {
        if (struct.isSetControl_parser_line()) {
          oprot.writeFieldBegin(CONTROL_PARSER_LINE_FIELD_DESC);
          oprot.writeString(struct.control_parser_line);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ControlFeaturesTupleSchemeFactory implements SchemeFactory {
    public ControlFeaturesTupleScheme getScheme() {
      return new ControlFeaturesTupleScheme();
    }
  }

  private static class ControlFeaturesTupleScheme extends TupleScheme<ControlFeatures> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ControlFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCi()) {
        optionals.set(0);
      }
      if (struct.isSetControl_reply()) {
        optionals.set(1);
      }
      if (struct.isSetControl_slots()) {
        optionals.set(2);
      }
      if (struct.isSetControl_instruction_link()) {
        optionals.set(3);
      }
      if (struct.isSetControl_parser_line()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCi()) {
        struct.ci.write(oprot);
      }
      if (struct.isSetControl_reply()) {
        oprot.writeString(struct.control_reply);
      }
      if (struct.isSetControl_slots()) {
        {
          oprot.writeI32(struct.control_slots.size());
          for (Map.Entry<String, String> _iter13 : struct.control_slots.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetControl_instruction_link()) {
        oprot.writeString(struct.control_instruction_link);
      }
      if (struct.isSetControl_parser_line()) {
        oprot.writeString(struct.control_parser_line);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ControlFeatures struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ci = new ControlInstruction();
        struct.ci.read(iprot);
        struct.setCiIsSet(true);
      }
      if (incoming.get(1)) {
        struct.control_reply = iprot.readString();
        struct.setControl_replyIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.control_slots = new HashMap<String,String>(2*_map14.size);
          for (int _i15 = 0; _i15 < _map14.size; ++_i15)
          {
            String _key16;
            String _val17;
            _key16 = iprot.readString();
            _val17 = iprot.readString();
            struct.control_slots.put(_key16, _val17);
          }
        }
        struct.setControl_slotsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.control_instruction_link = iprot.readString();
        struct.setControl_instruction_linkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.control_parser_line = iprot.readString();
        struct.setControl_parser_lineIsSet(true);
      }
    }
  }

}

