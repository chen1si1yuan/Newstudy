/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class SkillServiceContext implements org.apache.thrift.TBase<SkillServiceContext, SkillServiceContext._Fields>, java.io.Serializable, Cloneable, Comparable<SkillServiceContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SkillServiceContext");

  private static final org.apache.thrift.protocol.TField SKILL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("skill_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SKILL_CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("skill_cmd", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SKILL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("skill_data", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SKILL_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("skill_reply", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SKILL_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("skill_query", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SkillServiceContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SkillServiceContextTupleSchemeFactory());
  }

  public String skill_name; // optional
  /**
   * 
   * @see SkillCmd
   */
  public SkillCmd skill_cmd; // optional
  public SkillData skill_data; // optional
  public SkillReply skill_reply; // optional
  public String skill_query; // optional
  public String uid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SKILL_NAME((short)1, "skill_name"),
    /**
     * 
     * @see SkillCmd
     */
    SKILL_CMD((short)2, "skill_cmd"),
    SKILL_DATA((short)3, "skill_data"),
    SKILL_REPLY((short)4, "skill_reply"),
    SKILL_QUERY((short)5, "skill_query"),
    UID((short)6, "uid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SKILL_NAME
          return SKILL_NAME;
        case 2: // SKILL_CMD
          return SKILL_CMD;
        case 3: // SKILL_DATA
          return SKILL_DATA;
        case 4: // SKILL_REPLY
          return SKILL_REPLY;
        case 5: // SKILL_QUERY
          return SKILL_QUERY;
        case 6: // UID
          return UID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SKILL_NAME,_Fields.SKILL_CMD,_Fields.SKILL_DATA,_Fields.SKILL_REPLY,_Fields.SKILL_QUERY,_Fields.UID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SKILL_NAME, new org.apache.thrift.meta_data.FieldMetaData("skill_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKILL_CMD, new org.apache.thrift.meta_data.FieldMetaData("skill_cmd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SkillCmd.class)));
    tmpMap.put(_Fields.SKILL_DATA, new org.apache.thrift.meta_data.FieldMetaData("skill_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SkillData.class)));
    tmpMap.put(_Fields.SKILL_REPLY, new org.apache.thrift.meta_data.FieldMetaData("skill_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SkillReply.class)));
    tmpMap.put(_Fields.SKILL_QUERY, new org.apache.thrift.meta_data.FieldMetaData("skill_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SkillServiceContext.class, metaDataMap);
  }

  public SkillServiceContext() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SkillServiceContext(SkillServiceContext other) {
    if (other.isSetSkill_name()) {
      this.skill_name = other.skill_name;
    }
    if (other.isSetSkill_cmd()) {
      this.skill_cmd = other.skill_cmd;
    }
    if (other.isSetSkill_data()) {
      this.skill_data = new SkillData(other.skill_data);
    }
    if (other.isSetSkill_reply()) {
      this.skill_reply = new SkillReply(other.skill_reply);
    }
    if (other.isSetSkill_query()) {
      this.skill_query = other.skill_query;
    }
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
  }

  public SkillServiceContext deepCopy() {
    return new SkillServiceContext(this);
  }

  
  public void clear() {
    this.skill_name = null;
    this.skill_cmd = null;
    this.skill_data = null;
    this.skill_reply = null;
    this.skill_query = null;
    this.uid = null;
  }

  public String getSkill_name() {
    return this.skill_name;
  }

  public SkillServiceContext setSkill_name(String skill_name) {
    this.skill_name = skill_name;
    return this;
  }

  public void unsetSkill_name() {
    this.skill_name = null;
  }

  /** Returns true if field skill_name is set (has been assigned a value) and false otherwise */
  public boolean isSetSkill_name() {
    return this.skill_name != null;
  }

  public void setSkill_nameIsSet(boolean value) {
    if (!value) {
      this.skill_name = null;
    }
  }

  /**
   * 
   * @see SkillCmd
   */
  public SkillCmd getSkill_cmd() {
    return this.skill_cmd;
  }

  /**
   * 
   * @see SkillCmd
   */
  public SkillServiceContext setSkill_cmd(SkillCmd skill_cmd) {
    this.skill_cmd = skill_cmd;
    return this;
  }

  public void unsetSkill_cmd() {
    this.skill_cmd = null;
  }

  /** Returns true if field skill_cmd is set (has been assigned a value) and false otherwise */
  public boolean isSetSkill_cmd() {
    return this.skill_cmd != null;
  }

  public void setSkill_cmdIsSet(boolean value) {
    if (!value) {
      this.skill_cmd = null;
    }
  }

  public SkillData getSkill_data() {
    return this.skill_data;
  }

  public SkillServiceContext setSkill_data(SkillData skill_data) {
    this.skill_data = skill_data;
    return this;
  }

  public void unsetSkill_data() {
    this.skill_data = null;
  }

  /** Returns true if field skill_data is set (has been assigned a value) and false otherwise */
  public boolean isSetSkill_data() {
    return this.skill_data != null;
  }

  public void setSkill_dataIsSet(boolean value) {
    if (!value) {
      this.skill_data = null;
    }
  }

  public SkillReply getSkill_reply() {
    return this.skill_reply;
  }

  public SkillServiceContext setSkill_reply(SkillReply skill_reply) {
    this.skill_reply = skill_reply;
    return this;
  }

  public void unsetSkill_reply() {
    this.skill_reply = null;
  }

  /** Returns true if field skill_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetSkill_reply() {
    return this.skill_reply != null;
  }

  public void setSkill_replyIsSet(boolean value) {
    if (!value) {
      this.skill_reply = null;
    }
  }

  public String getSkill_query() {
    return this.skill_query;
  }

  public SkillServiceContext setSkill_query(String skill_query) {
    this.skill_query = skill_query;
    return this;
  }

  public void unsetSkill_query() {
    this.skill_query = null;
  }

  /** Returns true if field skill_query is set (has been assigned a value) and false otherwise */
  public boolean isSetSkill_query() {
    return this.skill_query != null;
  }

  public void setSkill_queryIsSet(boolean value) {
    if (!value) {
      this.skill_query = null;
    }
  }

  public String getUid() {
    return this.uid;
  }

  public SkillServiceContext setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SKILL_NAME:
      if (value == null) {
        unsetSkill_name();
      } else {
        setSkill_name((String)value);
      }
      break;

    case SKILL_CMD:
      if (value == null) {
        unsetSkill_cmd();
      } else {
        setSkill_cmd((SkillCmd)value);
      }
      break;

    case SKILL_DATA:
      if (value == null) {
        unsetSkill_data();
      } else {
        setSkill_data((SkillData)value);
      }
      break;

    case SKILL_REPLY:
      if (value == null) {
        unsetSkill_reply();
      } else {
        setSkill_reply((SkillReply)value);
      }
      break;

    case SKILL_QUERY:
      if (value == null) {
        unsetSkill_query();
      } else {
        setSkill_query((String)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SKILL_NAME:
      return getSkill_name();

    case SKILL_CMD:
      return getSkill_cmd();

    case SKILL_DATA:
      return getSkill_data();

    case SKILL_REPLY:
      return getSkill_reply();

    case SKILL_QUERY:
      return getSkill_query();

    case UID:
      return getUid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SKILL_NAME:
      return isSetSkill_name();
    case SKILL_CMD:
      return isSetSkill_cmd();
    case SKILL_DATA:
      return isSetSkill_data();
    case SKILL_REPLY:
      return isSetSkill_reply();
    case SKILL_QUERY:
      return isSetSkill_query();
    case UID:
      return isSetUid();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SkillServiceContext)
      return this.equals((SkillServiceContext)that);
    return false;
  }

  public boolean equals(SkillServiceContext that) {
    if (that == null)
      return false;

    boolean this_present_skill_name = true && this.isSetSkill_name();
    boolean that_present_skill_name = true && that.isSetSkill_name();
    if (this_present_skill_name || that_present_skill_name) {
      if (!(this_present_skill_name && that_present_skill_name))
        return false;
      if (!this.skill_name.equals(that.skill_name))
        return false;
    }

    boolean this_present_skill_cmd = true && this.isSetSkill_cmd();
    boolean that_present_skill_cmd = true && that.isSetSkill_cmd();
    if (this_present_skill_cmd || that_present_skill_cmd) {
      if (!(this_present_skill_cmd && that_present_skill_cmd))
        return false;
      if (!this.skill_cmd.equals(that.skill_cmd))
        return false;
    }

    boolean this_present_skill_data = true && this.isSetSkill_data();
    boolean that_present_skill_data = true && that.isSetSkill_data();
    if (this_present_skill_data || that_present_skill_data) {
      if (!(this_present_skill_data && that_present_skill_data))
        return false;
      if (!this.skill_data.equals(that.skill_data))
        return false;
    }

    boolean this_present_skill_reply = true && this.isSetSkill_reply();
    boolean that_present_skill_reply = true && that.isSetSkill_reply();
    if (this_present_skill_reply || that_present_skill_reply) {
      if (!(this_present_skill_reply && that_present_skill_reply))
        return false;
      if (!this.skill_reply.equals(that.skill_reply))
        return false;
    }

    boolean this_present_skill_query = true && this.isSetSkill_query();
    boolean that_present_skill_query = true && that.isSetSkill_query();
    if (this_present_skill_query || that_present_skill_query) {
      if (!(this_present_skill_query && that_present_skill_query))
        return false;
      if (!this.skill_query.equals(that.skill_query))
        return false;
    }

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(SkillServiceContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSkill_name()).compareTo(other.isSetSkill_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkill_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill_name, other.skill_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkill_cmd()).compareTo(other.isSetSkill_cmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkill_cmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill_cmd, other.skill_cmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkill_data()).compareTo(other.isSetSkill_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkill_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill_data, other.skill_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkill_reply()).compareTo(other.isSetSkill_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkill_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill_reply, other.skill_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSkill_query()).compareTo(other.isSetSkill_query());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkill_query()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skill_query, other.skill_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("SkillServiceContext(");
    boolean first = true;

    if (isSetSkill_name()) {
      sb.append("skill_name:");
      if (this.skill_name == null) {
        sb.append("null");
      } else {
        sb.append(this.skill_name);
      }
      first = false;
    }
    if (isSetSkill_cmd()) {
      if (!first) sb.append(", ");
      sb.append("skill_cmd:");
      if (this.skill_cmd == null) {
        sb.append("null");
      } else {
        sb.append(this.skill_cmd);
      }
      first = false;
    }
    if (isSetSkill_data()) {
      if (!first) sb.append(", ");
      sb.append("skill_data:");
      if (this.skill_data == null) {
        sb.append("null");
      } else {
        sb.append(this.skill_data);
      }
      first = false;
    }
    if (isSetSkill_reply()) {
      if (!first) sb.append(", ");
      sb.append("skill_reply:");
      if (this.skill_reply == null) {
        sb.append("null");
      } else {
        sb.append(this.skill_reply);
      }
      first = false;
    }
    if (isSetSkill_query()) {
      if (!first) sb.append(", ");
      sb.append("skill_query:");
      if (this.skill_query == null) {
        sb.append("null");
      } else {
        sb.append(this.skill_query);
      }
      first = false;
    }
    if (isSetUid()) {
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (skill_data != null) {
      skill_data.validate();
    }
    if (skill_reply != null) {
      skill_reply.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SkillServiceContextStandardSchemeFactory implements SchemeFactory {
    public SkillServiceContextStandardScheme getScheme() {
      return new SkillServiceContextStandardScheme();
    }
  }

  private static class SkillServiceContextStandardScheme extends StandardScheme<SkillServiceContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SkillServiceContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SKILL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.skill_name = iprot.readString();
              struct.setSkill_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SKILL_CMD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skill_cmd = SkillCmd.findByValue(iprot.readI32());
              struct.setSkill_cmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SKILL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.skill_data = new SkillData();
              struct.skill_data.read(iprot);
              struct.setSkill_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKILL_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.skill_reply = new SkillReply();
              struct.skill_reply.read(iprot);
              struct.setSkill_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SKILL_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.skill_query = iprot.readString();
              struct.setSkill_queryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SkillServiceContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.skill_name != null) {
        if (struct.isSetSkill_name()) {
          oprot.writeFieldBegin(SKILL_NAME_FIELD_DESC);
          oprot.writeString(struct.skill_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.skill_cmd != null) {
        if (struct.isSetSkill_cmd()) {
          oprot.writeFieldBegin(SKILL_CMD_FIELD_DESC);
          oprot.writeI32(struct.skill_cmd.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.skill_data != null) {
        if (struct.isSetSkill_data()) {
          oprot.writeFieldBegin(SKILL_DATA_FIELD_DESC);
          struct.skill_data.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.skill_reply != null) {
        if (struct.isSetSkill_reply()) {
          oprot.writeFieldBegin(SKILL_REPLY_FIELD_DESC);
          struct.skill_reply.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.skill_query != null) {
        if (struct.isSetSkill_query()) {
          oprot.writeFieldBegin(SKILL_QUERY_FIELD_DESC);
          oprot.writeString(struct.skill_query);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uid != null) {
        if (struct.isSetUid()) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SkillServiceContextTupleSchemeFactory implements SchemeFactory {
    public SkillServiceContextTupleScheme getScheme() {
      return new SkillServiceContextTupleScheme();
    }
  }

  private static class SkillServiceContextTupleScheme extends TupleScheme<SkillServiceContext> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, SkillServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSkill_name()) {
        optionals.set(0);
      }
      if (struct.isSetSkill_cmd()) {
        optionals.set(1);
      }
      if (struct.isSetSkill_data()) {
        optionals.set(2);
      }
      if (struct.isSetSkill_reply()) {
        optionals.set(3);
      }
      if (struct.isSetSkill_query()) {
        optionals.set(4);
      }
      if (struct.isSetUid()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSkill_name()) {
        oprot.writeString(struct.skill_name);
      }
      if (struct.isSetSkill_cmd()) {
        oprot.writeI32(struct.skill_cmd.getValue());
      }
      if (struct.isSetSkill_data()) {
        struct.skill_data.write(oprot);
      }
      if (struct.isSetSkill_reply()) {
        struct.skill_reply.write(oprot);
      }
      if (struct.isSetSkill_query()) {
        oprot.writeString(struct.skill_query);
      }
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, SkillServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.skill_name = iprot.readString();
        struct.setSkill_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.skill_cmd = SkillCmd.findByValue(iprot.readI32());
        struct.setSkill_cmdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.skill_data = new SkillData();
        struct.skill_data.read(iprot);
        struct.setSkill_dataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.skill_reply = new SkillReply();
        struct.skill_reply.read(iprot);
        struct.setSkill_replyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.skill_query = iprot.readString();
        struct.setSkill_queryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
    }
  }

}

