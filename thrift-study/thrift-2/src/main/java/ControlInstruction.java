/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ControlInstruction implements org.apache.thrift.TBase<ControlInstruction, ControlInstruction._Fields>, java.io.Serializable, Cloneable, Comparable<ControlInstruction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ControlInstruction");

  private static final org.apache.thrift.protocol.TField INSTRUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("instruction", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IOT_DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iot_device_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("domains", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ControlInstructionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ControlInstructionTupleSchemeFactory());
  }

  /**
   * 
   * @see Instruction
   */
  public Instruction instruction; // optional
  /**
   * 
   * @see IotDeviceType
   */
  public IotDeviceType iot_device_type; // optional
  public String value; // optional
  public String position; // optional
  public List<Domain> domains; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Instruction
     */
    INSTRUCTION((short)1, "instruction"),
    /**
     * 
     * @see IotDeviceType
     */
    IOT_DEVICE_TYPE((short)2, "iot_device_type"),
    VALUE((short)3, "value"),
    POSITION((short)4, "position"),
    DOMAINS((short)6, "domains");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUCTION
          return INSTRUCTION;
        case 2: // IOT_DEVICE_TYPE
          return IOT_DEVICE_TYPE;
        case 3: // VALUE
          return VALUE;
        case 4: // POSITION
          return POSITION;
        case 6: // DOMAINS
          return DOMAINS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.INSTRUCTION,_Fields.IOT_DEVICE_TYPE,_Fields.VALUE,_Fields.POSITION,_Fields.DOMAINS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUCTION, new org.apache.thrift.meta_data.FieldMetaData("instruction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Instruction.class)));
    tmpMap.put(_Fields.IOT_DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iot_device_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IotDeviceType.class)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOMAINS, new org.apache.thrift.meta_data.FieldMetaData("domains", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Domain.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ControlInstruction.class, metaDataMap);
  }

  public ControlInstruction() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ControlInstruction(ControlInstruction other) {
    if (other.isSetInstruction()) {
      this.instruction = other.instruction;
    }
    if (other.isSetIot_device_type()) {
      this.iot_device_type = other.iot_device_type;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    if (other.isSetDomains()) {
      List<Domain> __this__domains = new ArrayList<Domain>(other.domains.size());
      for (Domain other_element : other.domains) {
        __this__domains.add(other_element);
      }
      this.domains = __this__domains;
    }
  }

  public ControlInstruction deepCopy() {
    return new ControlInstruction(this);
  }

  
  public void clear() {
    this.instruction = null;
    this.iot_device_type = null;
    this.value = null;
    this.position = null;
    this.domains = null;
  }

  /**
   * 
   * @see Instruction
   */
  public Instruction getInstruction() {
    return this.instruction;
  }

  /**
   * 
   * @see Instruction
   */
  public ControlInstruction setInstruction(Instruction instruction) {
    this.instruction = instruction;
    return this;
  }

  public void unsetInstruction() {
    this.instruction = null;
  }

  /** Returns true if field instruction is set (has been assigned a value) and false otherwise */
  public boolean isSetInstruction() {
    return this.instruction != null;
  }

  public void setInstructionIsSet(boolean value) {
    if (!value) {
      this.instruction = null;
    }
  }

  /**
   * 
   * @see IotDeviceType
   */
  public IotDeviceType getIot_device_type() {
    return this.iot_device_type;
  }

  /**
   * 
   * @see IotDeviceType
   */
  public ControlInstruction setIot_device_type(IotDeviceType iot_device_type) {
    this.iot_device_type = iot_device_type;
    return this;
  }

  public void unsetIot_device_type() {
    this.iot_device_type = null;
  }

  /** Returns true if field iot_device_type is set (has been assigned a value) and false otherwise */
  public boolean isSetIot_device_type() {
    return this.iot_device_type != null;
  }

  public void setIot_device_typeIsSet(boolean value) {
    if (!value) {
      this.iot_device_type = null;
    }
  }

  public String getValue() {
    return this.value;
  }

  public ControlInstruction setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getPosition() {
    return this.position;
  }

  public ControlInstruction setPosition(String position) {
    this.position = position;
    return this;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public int getDomainsSize() {
    return (this.domains == null) ? 0 : this.domains.size();
  }

  public java.util.Iterator<Domain> getDomainsIterator() {
    return (this.domains == null) ? null : this.domains.iterator();
  }

  public void addToDomains(Domain elem) {
    if (this.domains == null) {
      this.domains = new ArrayList<Domain>();
    }
    this.domains.add(elem);
  }

  public List<Domain> getDomains() {
    return this.domains;
  }

  public ControlInstruction setDomains(List<Domain> domains) {
    this.domains = domains;
    return this;
  }

  public void unsetDomains() {
    this.domains = null;
  }

  /** Returns true if field domains is set (has been assigned a value) and false otherwise */
  public boolean isSetDomains() {
    return this.domains != null;
  }

  public void setDomainsIsSet(boolean value) {
    if (!value) {
      this.domains = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUCTION:
      if (value == null) {
        unsetInstruction();
      } else {
        setInstruction((Instruction)value);
      }
      break;

    case IOT_DEVICE_TYPE:
      if (value == null) {
        unsetIot_device_type();
      } else {
        setIot_device_type((IotDeviceType)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case DOMAINS:
      if (value == null) {
        unsetDomains();
      } else {
        setDomains((List<Domain>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUCTION:
      return getInstruction();

    case IOT_DEVICE_TYPE:
      return getIot_device_type();

    case VALUE:
      return getValue();

    case POSITION:
      return getPosition();

    case DOMAINS:
      return getDomains();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUCTION:
      return isSetInstruction();
    case IOT_DEVICE_TYPE:
      return isSetIot_device_type();
    case VALUE:
      return isSetValue();
    case POSITION:
      return isSetPosition();
    case DOMAINS:
      return isSetDomains();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ControlInstruction)
      return this.equals((ControlInstruction)that);
    return false;
  }

  public boolean equals(ControlInstruction that) {
    if (that == null)
      return false;

    boolean this_present_instruction = true && this.isSetInstruction();
    boolean that_present_instruction = true && that.isSetInstruction();
    if (this_present_instruction || that_present_instruction) {
      if (!(this_present_instruction && that_present_instruction))
        return false;
      if (!this.instruction.equals(that.instruction))
        return false;
    }

    boolean this_present_iot_device_type = true && this.isSetIot_device_type();
    boolean that_present_iot_device_type = true && that.isSetIot_device_type();
    if (this_present_iot_device_type || that_present_iot_device_type) {
      if (!(this_present_iot_device_type && that_present_iot_device_type))
        return false;
      if (!this.iot_device_type.equals(that.iot_device_type))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_domains = true && this.isSetDomains();
    boolean that_present_domains = true && that.isSetDomains();
    if (this_present_domains || that_present_domains) {
      if (!(this_present_domains && that_present_domains))
        return false;
      if (!this.domains.equals(that.domains))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ControlInstruction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstruction()).compareTo(other.isSetInstruction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstruction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instruction, other.instruction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIot_device_type()).compareTo(other.isSetIot_device_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIot_device_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iot_device_type, other.iot_device_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomains()).compareTo(other.isSetDomains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domains, other.domains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ControlInstruction(");
    boolean first = true;

    if (isSetInstruction()) {
      sb.append("instruction:");
      if (this.instruction == null) {
        sb.append("null");
      } else {
        sb.append(this.instruction);
      }
      first = false;
    }
    if (isSetIot_device_type()) {
      if (!first) sb.append(", ");
      sb.append("iot_device_type:");
      if (this.iot_device_type == null) {
        sb.append("null");
      } else {
        sb.append(this.iot_device_type);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetDomains()) {
      if (!first) sb.append(", ");
      sb.append("domains:");
      if (this.domains == null) {
        sb.append("null");
      } else {
        sb.append(this.domains);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ControlInstructionStandardSchemeFactory implements SchemeFactory {
    public ControlInstructionStandardScheme getScheme() {
      return new ControlInstructionStandardScheme();
    }
  }

  private static class ControlInstructionStandardScheme extends StandardScheme<ControlInstruction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ControlInstruction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.instruction = Instruction.findByValue(iprot.readI32());
              struct.setInstructionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IOT_DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iot_device_type = IotDeviceType.findByValue(iprot.readI32());
              struct.setIot_device_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.domains = new ArrayList<Domain>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Domain _elem2;
                  _elem2 = Domain.findByValue(iprot.readI32());
                  struct.domains.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDomainsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ControlInstruction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instruction != null) {
        if (struct.isSetInstruction()) {
          oprot.writeFieldBegin(INSTRUCTION_FIELD_DESC);
          oprot.writeI32(struct.instruction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.iot_device_type != null) {
        if (struct.isSetIot_device_type()) {
          oprot.writeFieldBegin(IOT_DEVICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.iot_device_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.domains != null) {
        if (struct.isSetDomains()) {
          oprot.writeFieldBegin(DOMAINS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.domains.size()));
            for (Domain _iter3 : struct.domains)
            {
              oprot.writeI32(_iter3.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ControlInstructionTupleSchemeFactory implements SchemeFactory {
    public ControlInstructionTupleScheme getScheme() {
      return new ControlInstructionTupleScheme();
    }
  }

  private static class ControlInstructionTupleScheme extends TupleScheme<ControlInstruction> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ControlInstruction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstruction()) {
        optionals.set(0);
      }
      if (struct.isSetIot_device_type()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetPosition()) {
        optionals.set(3);
      }
      if (struct.isSetDomains()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetInstruction()) {
        oprot.writeI32(struct.instruction.getValue());
      }
      if (struct.isSetIot_device_type()) {
        oprot.writeI32(struct.iot_device_type.getValue());
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetDomains()) {
        {
          oprot.writeI32(struct.domains.size());
          for (Domain _iter4 : struct.domains)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ControlInstruction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.instruction = Instruction.findByValue(iprot.readI32());
        struct.setInstructionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.iot_device_type = IotDeviceType.findByValue(iprot.readI32());
        struct.setIot_device_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.domains = new ArrayList<Domain>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Domain _elem7;
            _elem7 = Domain.findByValue(iprot.readI32());
            struct.domains.add(_elem7);
          }
        }
        struct.setDomainsIsSet(true);
      }
    }
  }

}

