/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ChatServiceContext implements org.apache.thrift.TBase<ChatServiceContext, ChatServiceContext._Fields>, java.io.Serializable, Cloneable, Comparable<ChatServiceContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatServiceContext");

  private static final org.apache.thrift.protocol.TField POST_REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("post_replys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CONTEXT_POST_REPLYS_FIELD_DESC = new org.apache.thrift.protocol.TField("context_post_replys", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField CONTEXT_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("context_input", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChatServiceContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChatServiceContextTupleSchemeFactory());
  }

  public List<PostReply> post_replys; // optional
  public List<ContextPostReply> context_post_replys; // optional
  public ContextServiceInput context_input; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POST_REPLYS((short)1, "post_replys"),
    CONTEXT_POST_REPLYS((short)2, "context_post_replys"),
    CONTEXT_INPUT((short)3, "context_input");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POST_REPLYS
          return POST_REPLYS;
        case 2: // CONTEXT_POST_REPLYS
          return CONTEXT_POST_REPLYS;
        case 3: // CONTEXT_INPUT
          return CONTEXT_INPUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.POST_REPLYS,_Fields.CONTEXT_POST_REPLYS,_Fields.CONTEXT_INPUT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POST_REPLYS, new org.apache.thrift.meta_data.FieldMetaData("post_replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PostReply.class))));
    tmpMap.put(_Fields.CONTEXT_POST_REPLYS, new org.apache.thrift.meta_data.FieldMetaData("context_post_replys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextPostReply.class))));
    tmpMap.put(_Fields.CONTEXT_INPUT, new org.apache.thrift.meta_data.FieldMetaData("context_input", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextServiceInput.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatServiceContext.class, metaDataMap);
  }

  public ChatServiceContext() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatServiceContext(ChatServiceContext other) {
    if (other.isSetPost_replys()) {
      List<PostReply> __this__post_replys = new ArrayList<PostReply>(other.post_replys.size());
      for (PostReply other_element : other.post_replys) {
        __this__post_replys.add(new PostReply(other_element));
      }
      this.post_replys = __this__post_replys;
    }
    if (other.isSetContext_post_replys()) {
      List<ContextPostReply> __this__context_post_replys = new ArrayList<ContextPostReply>(other.context_post_replys.size());
      for (ContextPostReply other_element : other.context_post_replys) {
        __this__context_post_replys.add(new ContextPostReply(other_element));
      }
      this.context_post_replys = __this__context_post_replys;
    }
    if (other.isSetContext_input()) {
      this.context_input = new ContextServiceInput(other.context_input);
    }
  }

  public ChatServiceContext deepCopy() {
    return new ChatServiceContext(this);
  }

  
  public void clear() {
    this.post_replys = null;
    this.context_post_replys = null;
    this.context_input = null;
  }

  public int getPost_replysSize() {
    return (this.post_replys == null) ? 0 : this.post_replys.size();
  }

  public java.util.Iterator<PostReply> getPost_replysIterator() {
    return (this.post_replys == null) ? null : this.post_replys.iterator();
  }

  public void addToPost_replys(PostReply elem) {
    if (this.post_replys == null) {
      this.post_replys = new ArrayList<PostReply>();
    }
    this.post_replys.add(elem);
  }

  public List<PostReply> getPost_replys() {
    return this.post_replys;
  }

  public ChatServiceContext setPost_replys(List<PostReply> post_replys) {
    this.post_replys = post_replys;
    return this;
  }

  public void unsetPost_replys() {
    this.post_replys = null;
  }

  /** Returns true if field post_replys is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_replys() {
    return this.post_replys != null;
  }

  public void setPost_replysIsSet(boolean value) {
    if (!value) {
      this.post_replys = null;
    }
  }

  public int getContext_post_replysSize() {
    return (this.context_post_replys == null) ? 0 : this.context_post_replys.size();
  }

  public java.util.Iterator<ContextPostReply> getContext_post_replysIterator() {
    return (this.context_post_replys == null) ? null : this.context_post_replys.iterator();
  }

  public void addToContext_post_replys(ContextPostReply elem) {
    if (this.context_post_replys == null) {
      this.context_post_replys = new ArrayList<ContextPostReply>();
    }
    this.context_post_replys.add(elem);
  }

  public List<ContextPostReply> getContext_post_replys() {
    return this.context_post_replys;
  }

  public ChatServiceContext setContext_post_replys(List<ContextPostReply> context_post_replys) {
    this.context_post_replys = context_post_replys;
    return this;
  }

  public void unsetContext_post_replys() {
    this.context_post_replys = null;
  }

  /** Returns true if field context_post_replys is set (has been assigned a value) and false otherwise */
  public boolean isSetContext_post_replys() {
    return this.context_post_replys != null;
  }

  public void setContext_post_replysIsSet(boolean value) {
    if (!value) {
      this.context_post_replys = null;
    }
  }

  public ContextServiceInput getContext_input() {
    return this.context_input;
  }

  public ChatServiceContext setContext_input(ContextServiceInput context_input) {
    this.context_input = context_input;
    return this;
  }

  public void unsetContext_input() {
    this.context_input = null;
  }

  /** Returns true if field context_input is set (has been assigned a value) and false otherwise */
  public boolean isSetContext_input() {
    return this.context_input != null;
  }

  public void setContext_inputIsSet(boolean value) {
    if (!value) {
      this.context_input = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POST_REPLYS:
      if (value == null) {
        unsetPost_replys();
      } else {
        setPost_replys((List<PostReply>)value);
      }
      break;

    case CONTEXT_POST_REPLYS:
      if (value == null) {
        unsetContext_post_replys();
      } else {
        setContext_post_replys((List<ContextPostReply>)value);
      }
      break;

    case CONTEXT_INPUT:
      if (value == null) {
        unsetContext_input();
      } else {
        setContext_input((ContextServiceInput)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POST_REPLYS:
      return getPost_replys();

    case CONTEXT_POST_REPLYS:
      return getContext_post_replys();

    case CONTEXT_INPUT:
      return getContext_input();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POST_REPLYS:
      return isSetPost_replys();
    case CONTEXT_POST_REPLYS:
      return isSetContext_post_replys();
    case CONTEXT_INPUT:
      return isSetContext_input();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatServiceContext)
      return this.equals((ChatServiceContext)that);
    return false;
  }

  public boolean equals(ChatServiceContext that) {
    if (that == null)
      return false;

    boolean this_present_post_replys = true && this.isSetPost_replys();
    boolean that_present_post_replys = true && that.isSetPost_replys();
    if (this_present_post_replys || that_present_post_replys) {
      if (!(this_present_post_replys && that_present_post_replys))
        return false;
      if (!this.post_replys.equals(that.post_replys))
        return false;
    }

    boolean this_present_context_post_replys = true && this.isSetContext_post_replys();
    boolean that_present_context_post_replys = true && that.isSetContext_post_replys();
    if (this_present_context_post_replys || that_present_context_post_replys) {
      if (!(this_present_context_post_replys && that_present_context_post_replys))
        return false;
      if (!this.context_post_replys.equals(that.context_post_replys))
        return false;
    }

    boolean this_present_context_input = true && this.isSetContext_input();
    boolean that_present_context_input = true && that.isSetContext_input();
    if (this_present_context_input || that_present_context_input) {
      if (!(this_present_context_input && that_present_context_input))
        return false;
      if (!this.context_input.equals(that.context_input))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ChatServiceContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPost_replys()).compareTo(other.isSetPost_replys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_replys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_replys, other.post_replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContext_post_replys()).compareTo(other.isSetContext_post_replys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext_post_replys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context_post_replys, other.context_post_replys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContext_input()).compareTo(other.isSetContext_input());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContext_input()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context_input, other.context_input);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ChatServiceContext(");
    boolean first = true;

    if (isSetPost_replys()) {
      sb.append("post_replys:");
      if (this.post_replys == null) {
        sb.append("null");
      } else {
        sb.append(this.post_replys);
      }
      first = false;
    }
    if (isSetContext_post_replys()) {
      if (!first) sb.append(", ");
      sb.append("context_post_replys:");
      if (this.context_post_replys == null) {
        sb.append("null");
      } else {
        sb.append(this.context_post_replys);
      }
      first = false;
    }
    if (isSetContext_input()) {
      if (!first) sb.append(", ");
      sb.append("context_input:");
      if (this.context_input == null) {
        sb.append("null");
      } else {
        sb.append(this.context_input);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (context_input != null) {
      context_input.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatServiceContextStandardSchemeFactory implements SchemeFactory {
    public ChatServiceContextStandardScheme getScheme() {
      return new ChatServiceContextStandardScheme();
    }
  }

  private static class ChatServiceContextStandardScheme extends StandardScheme<ChatServiceContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatServiceContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POST_REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list490 = iprot.readListBegin();
                struct.post_replys = new ArrayList<PostReply>(_list490.size);
                for (int _i491 = 0; _i491 < _list490.size; ++_i491)
                {
                  PostReply _elem492;
                  _elem492 = new PostReply();
                  _elem492.read(iprot);
                  struct.post_replys.add(_elem492);
                }
                iprot.readListEnd();
              }
              struct.setPost_replysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTEXT_POST_REPLYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list493 = iprot.readListBegin();
                struct.context_post_replys = new ArrayList<ContextPostReply>(_list493.size);
                for (int _i494 = 0; _i494 < _list493.size; ++_i494)
                {
                  ContextPostReply _elem495;
                  _elem495 = new ContextPostReply();
                  _elem495.read(iprot);
                  struct.context_post_replys.add(_elem495);
                }
                iprot.readListEnd();
              }
              struct.setContext_post_replysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTEXT_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.context_input = new ContextServiceInput();
              struct.context_input.read(iprot);
              struct.setContext_inputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatServiceContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.post_replys != null) {
        if (struct.isSetPost_replys()) {
          oprot.writeFieldBegin(POST_REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.post_replys.size()));
            for (PostReply _iter496 : struct.post_replys)
            {
              _iter496.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.context_post_replys != null) {
        if (struct.isSetContext_post_replys()) {
          oprot.writeFieldBegin(CONTEXT_POST_REPLYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.context_post_replys.size()));
            for (ContextPostReply _iter497 : struct.context_post_replys)
            {
              _iter497.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.context_input != null) {
        if (struct.isSetContext_input()) {
          oprot.writeFieldBegin(CONTEXT_INPUT_FIELD_DESC);
          struct.context_input.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatServiceContextTupleSchemeFactory implements SchemeFactory {
    public ChatServiceContextTupleScheme getScheme() {
      return new ChatServiceContextTupleScheme();
    }
  }

  private static class ChatServiceContextTupleScheme extends TupleScheme<ChatServiceContext> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPost_replys()) {
        optionals.set(0);
      }
      if (struct.isSetContext_post_replys()) {
        optionals.set(1);
      }
      if (struct.isSetContext_input()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPost_replys()) {
        {
          oprot.writeI32(struct.post_replys.size());
          for (PostReply _iter498 : struct.post_replys)
          {
            _iter498.write(oprot);
          }
        }
      }
      if (struct.isSetContext_post_replys()) {
        {
          oprot.writeI32(struct.context_post_replys.size());
          for (ContextPostReply _iter499 : struct.context_post_replys)
          {
            _iter499.write(oprot);
          }
        }
      }
      if (struct.isSetContext_input()) {
        struct.context_input.write(oprot);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatServiceContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list500 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.post_replys = new ArrayList<PostReply>(_list500.size);
          for (int _i501 = 0; _i501 < _list500.size; ++_i501)
          {
            PostReply _elem502;
            _elem502 = new PostReply();
            _elem502.read(iprot);
            struct.post_replys.add(_elem502);
          }
        }
        struct.setPost_replysIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list503 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.context_post_replys = new ArrayList<ContextPostReply>(_list503.size);
          for (int _i504 = 0; _i504 < _list503.size; ++_i504)
          {
            ContextPostReply _elem505;
            _elem505 = new ContextPostReply();
            _elem505.read(iprot);
            struct.context_post_replys.add(_elem505);
          }
        }
        struct.setContext_post_replysIsSet(true);
      }
      if (incoming.get(2)) {
        struct.context_input = new ContextServiceInput();
        struct.context_input.read(iprot);
        struct.setContext_inputIsSet(true);
      }
    }
  }

}

