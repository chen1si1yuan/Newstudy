/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class MultiRewrite implements org.apache.thrift.TBase<MultiRewrite, MultiRewrite._Fields>, java.io.Serializable, Cloneable, Comparable<MultiRewrite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiRewrite");

  private static final org.apache.thrift.protocol.TField RAW_FIELD_DESC = new org.apache.thrift.protocol.TField("raw", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PREP_FIELD_DESC = new org.apache.thrift.protocol.TField("prep", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_RAW_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_complete_raw", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_PREP_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_complete_prep", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField AUTO_COMPLETE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_complete_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QUERY_IOT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_iot", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MultiRewriteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MultiRewriteTupleSchemeFactory());
  }

  public RewriteQuery raw; // optional
  public RewriteQuery prep; // optional
  public RewriteQuery auto_complete_raw; // optional
  public RewriteQuery auto_complete_prep; // optional
  public int auto_complete_type; // optional
  public String query_iot; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RAW((short)1, "raw"),
    PREP((short)2, "prep"),
    AUTO_COMPLETE_RAW((short)3, "auto_complete_raw"),
    AUTO_COMPLETE_PREP((short)4, "auto_complete_prep"),
    AUTO_COMPLETE_TYPE((short)5, "auto_complete_type"),
    QUERY_IOT((short)6, "query_iot");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAW
          return RAW;
        case 2: // PREP
          return PREP;
        case 3: // AUTO_COMPLETE_RAW
          return AUTO_COMPLETE_RAW;
        case 4: // AUTO_COMPLETE_PREP
          return AUTO_COMPLETE_PREP;
        case 5: // AUTO_COMPLETE_TYPE
          return AUTO_COMPLETE_TYPE;
        case 6: // QUERY_IOT
          return QUERY_IOT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTO_COMPLETE_TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RAW,_Fields.PREP,_Fields.AUTO_COMPLETE_RAW,_Fields.AUTO_COMPLETE_PREP,_Fields.AUTO_COMPLETE_TYPE,_Fields.QUERY_IOT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAW, new org.apache.thrift.meta_data.FieldMetaData("raw", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteQuery.class)));
    tmpMap.put(_Fields.PREP, new org.apache.thrift.meta_data.FieldMetaData("prep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteQuery.class)));
    tmpMap.put(_Fields.AUTO_COMPLETE_RAW, new org.apache.thrift.meta_data.FieldMetaData("auto_complete_raw", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteQuery.class)));
    tmpMap.put(_Fields.AUTO_COMPLETE_PREP, new org.apache.thrift.meta_data.FieldMetaData("auto_complete_prep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteQuery.class)));
    tmpMap.put(_Fields.AUTO_COMPLETE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("auto_complete_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_IOT, new org.apache.thrift.meta_data.FieldMetaData("query_iot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiRewrite.class, metaDataMap);
  }

  public MultiRewrite() {
    this.auto_complete_type = 0;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MultiRewrite(MultiRewrite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRaw()) {
      this.raw = new RewriteQuery(other.raw);
    }
    if (other.isSetPrep()) {
      this.prep = new RewriteQuery(other.prep);
    }
    if (other.isSetAuto_complete_raw()) {
      this.auto_complete_raw = new RewriteQuery(other.auto_complete_raw);
    }
    if (other.isSetAuto_complete_prep()) {
      this.auto_complete_prep = new RewriteQuery(other.auto_complete_prep);
    }
    this.auto_complete_type = other.auto_complete_type;
    if (other.isSetQuery_iot()) {
      this.query_iot = other.query_iot;
    }
  }

  public MultiRewrite deepCopy() {
    return new MultiRewrite(this);
  }

  
  public void clear() {
    this.raw = null;
    this.prep = null;
    this.auto_complete_raw = null;
    this.auto_complete_prep = null;
    this.auto_complete_type = 0;

    this.query_iot = null;
  }

  public RewriteQuery getRaw() {
    return this.raw;
  }

  public MultiRewrite setRaw(RewriteQuery raw) {
    this.raw = raw;
    return this;
  }

  public void unsetRaw() {
    this.raw = null;
  }

  /** Returns true if field raw is set (has been assigned a value) and false otherwise */
  public boolean isSetRaw() {
    return this.raw != null;
  }

  public void setRawIsSet(boolean value) {
    if (!value) {
      this.raw = null;
    }
  }

  public RewriteQuery getPrep() {
    return this.prep;
  }

  public MultiRewrite setPrep(RewriteQuery prep) {
    this.prep = prep;
    return this;
  }

  public void unsetPrep() {
    this.prep = null;
  }

  /** Returns true if field prep is set (has been assigned a value) and false otherwise */
  public boolean isSetPrep() {
    return this.prep != null;
  }

  public void setPrepIsSet(boolean value) {
    if (!value) {
      this.prep = null;
    }
  }

  public RewriteQuery getAuto_complete_raw() {
    return this.auto_complete_raw;
  }

  public MultiRewrite setAuto_complete_raw(RewriteQuery auto_complete_raw) {
    this.auto_complete_raw = auto_complete_raw;
    return this;
  }

  public void unsetAuto_complete_raw() {
    this.auto_complete_raw = null;
  }

  /** Returns true if field auto_complete_raw is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_complete_raw() {
    return this.auto_complete_raw != null;
  }

  public void setAuto_complete_rawIsSet(boolean value) {
    if (!value) {
      this.auto_complete_raw = null;
    }
  }

  public RewriteQuery getAuto_complete_prep() {
    return this.auto_complete_prep;
  }

  public MultiRewrite setAuto_complete_prep(RewriteQuery auto_complete_prep) {
    this.auto_complete_prep = auto_complete_prep;
    return this;
  }

  public void unsetAuto_complete_prep() {
    this.auto_complete_prep = null;
  }

  /** Returns true if field auto_complete_prep is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_complete_prep() {
    return this.auto_complete_prep != null;
  }

  public void setAuto_complete_prepIsSet(boolean value) {
    if (!value) {
      this.auto_complete_prep = null;
    }
  }

  public int getAuto_complete_type() {
    return this.auto_complete_type;
  }

  public MultiRewrite setAuto_complete_type(int auto_complete_type) {
    this.auto_complete_type = auto_complete_type;
    setAuto_complete_typeIsSet(true);
    return this;
  }

  public void unsetAuto_complete_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTO_COMPLETE_TYPE_ISSET_ID);
  }

  /** Returns true if field auto_complete_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_complete_type() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTO_COMPLETE_TYPE_ISSET_ID);
  }

  public void setAuto_complete_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTO_COMPLETE_TYPE_ISSET_ID, value);
  }

  public String getQuery_iot() {
    return this.query_iot;
  }

  public MultiRewrite setQuery_iot(String query_iot) {
    this.query_iot = query_iot;
    return this;
  }

  public void unsetQuery_iot() {
    this.query_iot = null;
  }

  /** Returns true if field query_iot is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_iot() {
    return this.query_iot != null;
  }

  public void setQuery_iotIsSet(boolean value) {
    if (!value) {
      this.query_iot = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAW:
      if (value == null) {
        unsetRaw();
      } else {
        setRaw((RewriteQuery)value);
      }
      break;

    case PREP:
      if (value == null) {
        unsetPrep();
      } else {
        setPrep((RewriteQuery)value);
      }
      break;

    case AUTO_COMPLETE_RAW:
      if (value == null) {
        unsetAuto_complete_raw();
      } else {
        setAuto_complete_raw((RewriteQuery)value);
      }
      break;

    case AUTO_COMPLETE_PREP:
      if (value == null) {
        unsetAuto_complete_prep();
      } else {
        setAuto_complete_prep((RewriteQuery)value);
      }
      break;

    case AUTO_COMPLETE_TYPE:
      if (value == null) {
        unsetAuto_complete_type();
      } else {
        setAuto_complete_type((Integer)value);
      }
      break;

    case QUERY_IOT:
      if (value == null) {
        unsetQuery_iot();
      } else {
        setQuery_iot((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAW:
      return getRaw();

    case PREP:
      return getPrep();

    case AUTO_COMPLETE_RAW:
      return getAuto_complete_raw();

    case AUTO_COMPLETE_PREP:
      return getAuto_complete_prep();

    case AUTO_COMPLETE_TYPE:
      return Integer.valueOf(getAuto_complete_type());

    case QUERY_IOT:
      return getQuery_iot();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAW:
      return isSetRaw();
    case PREP:
      return isSetPrep();
    case AUTO_COMPLETE_RAW:
      return isSetAuto_complete_raw();
    case AUTO_COMPLETE_PREP:
      return isSetAuto_complete_prep();
    case AUTO_COMPLETE_TYPE:
      return isSetAuto_complete_type();
    case QUERY_IOT:
      return isSetQuery_iot();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MultiRewrite)
      return this.equals((MultiRewrite)that);
    return false;
  }

  public boolean equals(MultiRewrite that) {
    if (that == null)
      return false;

    boolean this_present_raw = true && this.isSetRaw();
    boolean that_present_raw = true && that.isSetRaw();
    if (this_present_raw || that_present_raw) {
      if (!(this_present_raw && that_present_raw))
        return false;
      if (!this.raw.equals(that.raw))
        return false;
    }

    boolean this_present_prep = true && this.isSetPrep();
    boolean that_present_prep = true && that.isSetPrep();
    if (this_present_prep || that_present_prep) {
      if (!(this_present_prep && that_present_prep))
        return false;
      if (!this.prep.equals(that.prep))
        return false;
    }

    boolean this_present_auto_complete_raw = true && this.isSetAuto_complete_raw();
    boolean that_present_auto_complete_raw = true && that.isSetAuto_complete_raw();
    if (this_present_auto_complete_raw || that_present_auto_complete_raw) {
      if (!(this_present_auto_complete_raw && that_present_auto_complete_raw))
        return false;
      if (!this.auto_complete_raw.equals(that.auto_complete_raw))
        return false;
    }

    boolean this_present_auto_complete_prep = true && this.isSetAuto_complete_prep();
    boolean that_present_auto_complete_prep = true && that.isSetAuto_complete_prep();
    if (this_present_auto_complete_prep || that_present_auto_complete_prep) {
      if (!(this_present_auto_complete_prep && that_present_auto_complete_prep))
        return false;
      if (!this.auto_complete_prep.equals(that.auto_complete_prep))
        return false;
    }

    boolean this_present_auto_complete_type = true && this.isSetAuto_complete_type();
    boolean that_present_auto_complete_type = true && that.isSetAuto_complete_type();
    if (this_present_auto_complete_type || that_present_auto_complete_type) {
      if (!(this_present_auto_complete_type && that_present_auto_complete_type))
        return false;
      if (this.auto_complete_type != that.auto_complete_type)
        return false;
    }

    boolean this_present_query_iot = true && this.isSetQuery_iot();
    boolean that_present_query_iot = true && that.isSetQuery_iot();
    if (this_present_query_iot || that_present_query_iot) {
      if (!(this_present_query_iot && that_present_query_iot))
        return false;
      if (!this.query_iot.equals(that.query_iot))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(MultiRewrite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRaw()).compareTo(other.isSetRaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raw, other.raw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrep()).compareTo(other.isSetPrep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prep, other.prep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_complete_raw()).compareTo(other.isSetAuto_complete_raw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_complete_raw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_complete_raw, other.auto_complete_raw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_complete_prep()).compareTo(other.isSetAuto_complete_prep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_complete_prep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_complete_prep, other.auto_complete_prep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_complete_type()).compareTo(other.isSetAuto_complete_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_complete_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_complete_type, other.auto_complete_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_iot()).compareTo(other.isSetQuery_iot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_iot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_iot, other.query_iot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("MultiRewrite(");
    boolean first = true;

    if (isSetRaw()) {
      sb.append("raw:");
      if (this.raw == null) {
        sb.append("null");
      } else {
        sb.append(this.raw);
      }
      first = false;
    }
    if (isSetPrep()) {
      if (!first) sb.append(", ");
      sb.append("prep:");
      if (this.prep == null) {
        sb.append("null");
      } else {
        sb.append(this.prep);
      }
      first = false;
    }
    if (isSetAuto_complete_raw()) {
      if (!first) sb.append(", ");
      sb.append("auto_complete_raw:");
      if (this.auto_complete_raw == null) {
        sb.append("null");
      } else {
        sb.append(this.auto_complete_raw);
      }
      first = false;
    }
    if (isSetAuto_complete_prep()) {
      if (!first) sb.append(", ");
      sb.append("auto_complete_prep:");
      if (this.auto_complete_prep == null) {
        sb.append("null");
      } else {
        sb.append(this.auto_complete_prep);
      }
      first = false;
    }
    if (isSetAuto_complete_type()) {
      if (!first) sb.append(", ");
      sb.append("auto_complete_type:");
      sb.append(this.auto_complete_type);
      first = false;
    }
    if (isSetQuery_iot()) {
      if (!first) sb.append(", ");
      sb.append("query_iot:");
      if (this.query_iot == null) {
        sb.append("null");
      } else {
        sb.append(this.query_iot);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (raw != null) {
      raw.validate();
    }
    if (prep != null) {
      prep.validate();
    }
    if (auto_complete_raw != null) {
      auto_complete_raw.validate();
    }
    if (auto_complete_prep != null) {
      auto_complete_prep.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MultiRewriteStandardSchemeFactory implements SchemeFactory {
    public MultiRewriteStandardScheme getScheme() {
      return new MultiRewriteStandardScheme();
    }
  }

  private static class MultiRewriteStandardScheme extends StandardScheme<MultiRewrite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MultiRewrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.raw = new RewriteQuery();
              struct.raw.read(iprot);
              struct.setRawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.prep = new RewriteQuery();
              struct.prep.read(iprot);
              struct.setPrepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTO_COMPLETE_RAW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auto_complete_raw = new RewriteQuery();
              struct.auto_complete_raw.read(iprot);
              struct.setAuto_complete_rawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTO_COMPLETE_PREP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auto_complete_prep = new RewriteQuery();
              struct.auto_complete_prep.read(iprot);
              struct.setAuto_complete_prepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTO_COMPLETE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auto_complete_type = iprot.readI32();
              struct.setAuto_complete_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUERY_IOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.query_iot = iprot.readString();
              struct.setQuery_iotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MultiRewrite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.raw != null) {
        if (struct.isSetRaw()) {
          oprot.writeFieldBegin(RAW_FIELD_DESC);
          struct.raw.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.prep != null) {
        if (struct.isSetPrep()) {
          oprot.writeFieldBegin(PREP_FIELD_DESC);
          struct.prep.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auto_complete_raw != null) {
        if (struct.isSetAuto_complete_raw()) {
          oprot.writeFieldBegin(AUTO_COMPLETE_RAW_FIELD_DESC);
          struct.auto_complete_raw.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auto_complete_prep != null) {
        if (struct.isSetAuto_complete_prep()) {
          oprot.writeFieldBegin(AUTO_COMPLETE_PREP_FIELD_DESC);
          struct.auto_complete_prep.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuto_complete_type()) {
        oprot.writeFieldBegin(AUTO_COMPLETE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.auto_complete_type);
        oprot.writeFieldEnd();
      }
      if (struct.query_iot != null) {
        if (struct.isSetQuery_iot()) {
          oprot.writeFieldBegin(QUERY_IOT_FIELD_DESC);
          oprot.writeString(struct.query_iot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MultiRewriteTupleSchemeFactory implements SchemeFactory {
    public MultiRewriteTupleScheme getScheme() {
      return new MultiRewriteTupleScheme();
    }
  }

  private static class MultiRewriteTupleScheme extends TupleScheme<MultiRewrite> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, MultiRewrite struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRaw()) {
        optionals.set(0);
      }
      if (struct.isSetPrep()) {
        optionals.set(1);
      }
      if (struct.isSetAuto_complete_raw()) {
        optionals.set(2);
      }
      if (struct.isSetAuto_complete_prep()) {
        optionals.set(3);
      }
      if (struct.isSetAuto_complete_type()) {
        optionals.set(4);
      }
      if (struct.isSetQuery_iot()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRaw()) {
        struct.raw.write(oprot);
      }
      if (struct.isSetPrep()) {
        struct.prep.write(oprot);
      }
      if (struct.isSetAuto_complete_raw()) {
        struct.auto_complete_raw.write(oprot);
      }
      if (struct.isSetAuto_complete_prep()) {
        struct.auto_complete_prep.write(oprot);
      }
      if (struct.isSetAuto_complete_type()) {
        oprot.writeI32(struct.auto_complete_type);
      }
      if (struct.isSetQuery_iot()) {
        oprot.writeString(struct.query_iot);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, MultiRewrite struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.raw = new RewriteQuery();
        struct.raw.read(iprot);
        struct.setRawIsSet(true);
      }
      if (incoming.get(1)) {
        struct.prep = new RewriteQuery();
        struct.prep.read(iprot);
        struct.setPrepIsSet(true);
      }
      if (incoming.get(2)) {
        struct.auto_complete_raw = new RewriteQuery();
        struct.auto_complete_raw.read(iprot);
        struct.setAuto_complete_rawIsSet(true);
      }
      if (incoming.get(3)) {
        struct.auto_complete_prep = new RewriteQuery();
        struct.auto_complete_prep.read(iprot);
        struct.setAuto_complete_prepIsSet(true);
      }
      if (incoming.get(4)) {
        struct.auto_complete_type = iprot.readI32();
        struct.setAuto_complete_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_iot = iprot.readString();
        struct.setQuery_iotIsSet(true);
      }
    }
  }

}

