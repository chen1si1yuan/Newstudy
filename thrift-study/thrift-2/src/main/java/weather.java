/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class weather implements org.apache.thrift.TBase<weather, weather._Fields>, java.io.Serializable, Cloneable, Comparable<weather> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("weather");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("high", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOW_FIELD_DESC = new org.apache.thrift.protocol.TField("low", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WIND_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("wind_level", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WIND_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("wind_direction", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HUMIDITY_FIELD_DESC = new org.apache.thrift.protocol.TField("humidity", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PM25_FIELD_DESC = new org.apache.thrift.protocol.TField("pm25", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DAY_OF_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("day_of_week", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DRESSING_FIELD_DESC = new org.apache.thrift.protocol.TField("dressing", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new weatherStandardSchemeFactory());
    schemes.put(TupleScheme.class, new weatherTupleSchemeFactory());
  }

  /**
   * 
   * @see WeatherType
   */
  public WeatherType type; // optional
  public String date; // optional
  public String city; // optional
  public String high; // optional
  public String low; // optional
  public String wind_level; // optional
  public String wind_direction; // optional
  public String humidity; // optional
  public String pm25; // optional
  public String day_of_week; // optional
  public String dressing; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see WeatherType
     */
    TYPE((short)1, "type"),
    DATE((short)2, "date"),
    CITY((short)3, "city"),
    HIGH((short)4, "high"),
    LOW((short)5, "low"),
    WIND_LEVEL((short)6, "wind_level"),
    WIND_DIRECTION((short)7, "wind_direction"),
    HUMIDITY((short)8, "humidity"),
    PM25((short)9, "pm25"),
    DAY_OF_WEEK((short)10, "day_of_week"),
    DRESSING((short)11, "dressing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // DATE
          return DATE;
        case 3: // CITY
          return CITY;
        case 4: // HIGH
          return HIGH;
        case 5: // LOW
          return LOW;
        case 6: // WIND_LEVEL
          return WIND_LEVEL;
        case 7: // WIND_DIRECTION
          return WIND_DIRECTION;
        case 8: // HUMIDITY
          return HUMIDITY;
        case 9: // PM25
          return PM25;
        case 10: // DAY_OF_WEEK
          return DAY_OF_WEEK;
        case 11: // DRESSING
          return DRESSING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.DATE,_Fields.CITY,_Fields.HIGH,_Fields.LOW,_Fields.WIND_LEVEL,_Fields.WIND_DIRECTION,_Fields.HUMIDITY,_Fields.PM25,_Fields.DAY_OF_WEEK,_Fields.DRESSING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WeatherType.class)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGH, new org.apache.thrift.meta_data.FieldMetaData("high", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOW, new org.apache.thrift.meta_data.FieldMetaData("low", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIND_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("wind_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIND_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("wind_direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HUMIDITY, new org.apache.thrift.meta_data.FieldMetaData("humidity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM25, new org.apache.thrift.meta_data.FieldMetaData("pm25", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_OF_WEEK, new org.apache.thrift.meta_data.FieldMetaData("day_of_week", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRESSING, new org.apache.thrift.meta_data.FieldMetaData("dressing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(weather.class, metaDataMap);
  }

  public weather() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public weather(weather other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetHigh()) {
      this.high = other.high;
    }
    if (other.isSetLow()) {
      this.low = other.low;
    }
    if (other.isSetWind_level()) {
      this.wind_level = other.wind_level;
    }
    if (other.isSetWind_direction()) {
      this.wind_direction = other.wind_direction;
    }
    if (other.isSetHumidity()) {
      this.humidity = other.humidity;
    }
    if (other.isSetPm25()) {
      this.pm25 = other.pm25;
    }
    if (other.isSetDay_of_week()) {
      this.day_of_week = other.day_of_week;
    }
    if (other.isSetDressing()) {
      this.dressing = other.dressing;
    }
  }

  public weather deepCopy() {
    return new weather(this);
  }

  
  public void clear() {
    this.type = null;
    this.date = null;
    this.city = null;
    this.high = null;
    this.low = null;
    this.wind_level = null;
    this.wind_direction = null;
    this.humidity = null;
    this.pm25 = null;
    this.day_of_week = null;
    this.dressing = null;
  }

  /**
   * 
   * @see WeatherType
   */
  public WeatherType getType() {
    return this.type;
  }

  /**
   * 
   * @see WeatherType
   */
  public weather setType(WeatherType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public weather setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public weather setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getHigh() {
    return this.high;
  }

  public weather setHigh(String high) {
    this.high = high;
    return this;
  }

  public void unsetHigh() {
    this.high = null;
  }

  /** Returns true if field high is set (has been assigned a value) and false otherwise */
  public boolean isSetHigh() {
    return this.high != null;
  }

  public void setHighIsSet(boolean value) {
    if (!value) {
      this.high = null;
    }
  }

  public String getLow() {
    return this.low;
  }

  public weather setLow(String low) {
    this.low = low;
    return this;
  }

  public void unsetLow() {
    this.low = null;
  }

  /** Returns true if field low is set (has been assigned a value) and false otherwise */
  public boolean isSetLow() {
    return this.low != null;
  }

  public void setLowIsSet(boolean value) {
    if (!value) {
      this.low = null;
    }
  }

  public String getWind_level() {
    return this.wind_level;
  }

  public weather setWind_level(String wind_level) {
    this.wind_level = wind_level;
    return this;
  }

  public void unsetWind_level() {
    this.wind_level = null;
  }

  /** Returns true if field wind_level is set (has been assigned a value) and false otherwise */
  public boolean isSetWind_level() {
    return this.wind_level != null;
  }

  public void setWind_levelIsSet(boolean value) {
    if (!value) {
      this.wind_level = null;
    }
  }

  public String getWind_direction() {
    return this.wind_direction;
  }

  public weather setWind_direction(String wind_direction) {
    this.wind_direction = wind_direction;
    return this;
  }

  public void unsetWind_direction() {
    this.wind_direction = null;
  }

  /** Returns true if field wind_direction is set (has been assigned a value) and false otherwise */
  public boolean isSetWind_direction() {
    return this.wind_direction != null;
  }

  public void setWind_directionIsSet(boolean value) {
    if (!value) {
      this.wind_direction = null;
    }
  }

  public String getHumidity() {
    return this.humidity;
  }

  public weather setHumidity(String humidity) {
    this.humidity = humidity;
    return this;
  }

  public void unsetHumidity() {
    this.humidity = null;
  }

  /** Returns true if field humidity is set (has been assigned a value) and false otherwise */
  public boolean isSetHumidity() {
    return this.humidity != null;
  }

  public void setHumidityIsSet(boolean value) {
    if (!value) {
      this.humidity = null;
    }
  }

  public String getPm25() {
    return this.pm25;
  }

  public weather setPm25(String pm25) {
    this.pm25 = pm25;
    return this;
  }

  public void unsetPm25() {
    this.pm25 = null;
  }

  /** Returns true if field pm25 is set (has been assigned a value) and false otherwise */
  public boolean isSetPm25() {
    return this.pm25 != null;
  }

  public void setPm25IsSet(boolean value) {
    if (!value) {
      this.pm25 = null;
    }
  }

  public String getDay_of_week() {
    return this.day_of_week;
  }

  public weather setDay_of_week(String day_of_week) {
    this.day_of_week = day_of_week;
    return this;
  }

  public void unsetDay_of_week() {
    this.day_of_week = null;
  }

  /** Returns true if field day_of_week is set (has been assigned a value) and false otherwise */
  public boolean isSetDay_of_week() {
    return this.day_of_week != null;
  }

  public void setDay_of_weekIsSet(boolean value) {
    if (!value) {
      this.day_of_week = null;
    }
  }

  public String getDressing() {
    return this.dressing;
  }

  public weather setDressing(String dressing) {
    this.dressing = dressing;
    return this;
  }

  public void unsetDressing() {
    this.dressing = null;
  }

  /** Returns true if field dressing is set (has been assigned a value) and false otherwise */
  public boolean isSetDressing() {
    return this.dressing != null;
  }

  public void setDressingIsSet(boolean value) {
    if (!value) {
      this.dressing = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((WeatherType)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case HIGH:
      if (value == null) {
        unsetHigh();
      } else {
        setHigh((String)value);
      }
      break;

    case LOW:
      if (value == null) {
        unsetLow();
      } else {
        setLow((String)value);
      }
      break;

    case WIND_LEVEL:
      if (value == null) {
        unsetWind_level();
      } else {
        setWind_level((String)value);
      }
      break;

    case WIND_DIRECTION:
      if (value == null) {
        unsetWind_direction();
      } else {
        setWind_direction((String)value);
      }
      break;

    case HUMIDITY:
      if (value == null) {
        unsetHumidity();
      } else {
        setHumidity((String)value);
      }
      break;

    case PM25:
      if (value == null) {
        unsetPm25();
      } else {
        setPm25((String)value);
      }
      break;

    case DAY_OF_WEEK:
      if (value == null) {
        unsetDay_of_week();
      } else {
        setDay_of_week((String)value);
      }
      break;

    case DRESSING:
      if (value == null) {
        unsetDressing();
      } else {
        setDressing((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case DATE:
      return getDate();

    case CITY:
      return getCity();

    case HIGH:
      return getHigh();

    case LOW:
      return getLow();

    case WIND_LEVEL:
      return getWind_level();

    case WIND_DIRECTION:
      return getWind_direction();

    case HUMIDITY:
      return getHumidity();

    case PM25:
      return getPm25();

    case DAY_OF_WEEK:
      return getDay_of_week();

    case DRESSING:
      return getDressing();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case DATE:
      return isSetDate();
    case CITY:
      return isSetCity();
    case HIGH:
      return isSetHigh();
    case LOW:
      return isSetLow();
    case WIND_LEVEL:
      return isSetWind_level();
    case WIND_DIRECTION:
      return isSetWind_direction();
    case HUMIDITY:
      return isSetHumidity();
    case PM25:
      return isSetPm25();
    case DAY_OF_WEEK:
      return isSetDay_of_week();
    case DRESSING:
      return isSetDressing();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof weather)
      return this.equals((weather)that);
    return false;
  }

  public boolean equals(weather that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_high = true && this.isSetHigh();
    boolean that_present_high = true && that.isSetHigh();
    if (this_present_high || that_present_high) {
      if (!(this_present_high && that_present_high))
        return false;
      if (!this.high.equals(that.high))
        return false;
    }

    boolean this_present_low = true && this.isSetLow();
    boolean that_present_low = true && that.isSetLow();
    if (this_present_low || that_present_low) {
      if (!(this_present_low && that_present_low))
        return false;
      if (!this.low.equals(that.low))
        return false;
    }

    boolean this_present_wind_level = true && this.isSetWind_level();
    boolean that_present_wind_level = true && that.isSetWind_level();
    if (this_present_wind_level || that_present_wind_level) {
      if (!(this_present_wind_level && that_present_wind_level))
        return false;
      if (!this.wind_level.equals(that.wind_level))
        return false;
    }

    boolean this_present_wind_direction = true && this.isSetWind_direction();
    boolean that_present_wind_direction = true && that.isSetWind_direction();
    if (this_present_wind_direction || that_present_wind_direction) {
      if (!(this_present_wind_direction && that_present_wind_direction))
        return false;
      if (!this.wind_direction.equals(that.wind_direction))
        return false;
    }

    boolean this_present_humidity = true && this.isSetHumidity();
    boolean that_present_humidity = true && that.isSetHumidity();
    if (this_present_humidity || that_present_humidity) {
      if (!(this_present_humidity && that_present_humidity))
        return false;
      if (!this.humidity.equals(that.humidity))
        return false;
    }

    boolean this_present_pm25 = true && this.isSetPm25();
    boolean that_present_pm25 = true && that.isSetPm25();
    if (this_present_pm25 || that_present_pm25) {
      if (!(this_present_pm25 && that_present_pm25))
        return false;
      if (!this.pm25.equals(that.pm25))
        return false;
    }

    boolean this_present_day_of_week = true && this.isSetDay_of_week();
    boolean that_present_day_of_week = true && that.isSetDay_of_week();
    if (this_present_day_of_week || that_present_day_of_week) {
      if (!(this_present_day_of_week && that_present_day_of_week))
        return false;
      if (!this.day_of_week.equals(that.day_of_week))
        return false;
    }

    boolean this_present_dressing = true && this.isSetDressing();
    boolean that_present_dressing = true && that.isSetDressing();
    if (this_present_dressing || that_present_dressing) {
      if (!(this_present_dressing && that_present_dressing))
        return false;
      if (!this.dressing.equals(that.dressing))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(weather other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigh()).compareTo(other.isSetHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigh()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.high, other.high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLow()).compareTo(other.isSetLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.low, other.low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWind_level()).compareTo(other.isSetWind_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWind_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wind_level, other.wind_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWind_direction()).compareTo(other.isSetWind_direction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWind_direction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wind_direction, other.wind_direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHumidity()).compareTo(other.isSetHumidity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHumidity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.humidity, other.humidity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPm25()).compareTo(other.isSetPm25());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPm25()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pm25, other.pm25);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay_of_week()).compareTo(other.isSetDay_of_week());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay_of_week()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_of_week, other.day_of_week);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDressing()).compareTo(other.isSetDressing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDressing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dressing, other.dressing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("weather(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetHigh()) {
      if (!first) sb.append(", ");
      sb.append("high:");
      if (this.high == null) {
        sb.append("null");
      } else {
        sb.append(this.high);
      }
      first = false;
    }
    if (isSetLow()) {
      if (!first) sb.append(", ");
      sb.append("low:");
      if (this.low == null) {
        sb.append("null");
      } else {
        sb.append(this.low);
      }
      first = false;
    }
    if (isSetWind_level()) {
      if (!first) sb.append(", ");
      sb.append("wind_level:");
      if (this.wind_level == null) {
        sb.append("null");
      } else {
        sb.append(this.wind_level);
      }
      first = false;
    }
    if (isSetWind_direction()) {
      if (!first) sb.append(", ");
      sb.append("wind_direction:");
      if (this.wind_direction == null) {
        sb.append("null");
      } else {
        sb.append(this.wind_direction);
      }
      first = false;
    }
    if (isSetHumidity()) {
      if (!first) sb.append(", ");
      sb.append("humidity:");
      if (this.humidity == null) {
        sb.append("null");
      } else {
        sb.append(this.humidity);
      }
      first = false;
    }
    if (isSetPm25()) {
      if (!first) sb.append(", ");
      sb.append("pm25:");
      if (this.pm25 == null) {
        sb.append("null");
      } else {
        sb.append(this.pm25);
      }
      first = false;
    }
    if (isSetDay_of_week()) {
      if (!first) sb.append(", ");
      sb.append("day_of_week:");
      if (this.day_of_week == null) {
        sb.append("null");
      } else {
        sb.append(this.day_of_week);
      }
      first = false;
    }
    if (isSetDressing()) {
      if (!first) sb.append(", ");
      sb.append("dressing:");
      if (this.dressing == null) {
        sb.append("null");
      } else {
        sb.append(this.dressing);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class weatherStandardSchemeFactory implements SchemeFactory {
    public weatherStandardScheme getScheme() {
      return new weatherStandardScheme();
    }
  }

  private static class weatherStandardScheme extends StandardScheme<weather> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, weather struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = WeatherType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.high = iprot.readString();
              struct.setHighIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.low = iprot.readString();
              struct.setLowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WIND_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wind_level = iprot.readString();
              struct.setWind_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WIND_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wind_direction = iprot.readString();
              struct.setWind_directionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HUMIDITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.humidity = iprot.readString();
              struct.setHumidityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PM25
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pm25 = iprot.readString();
              struct.setPm25IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DAY_OF_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.day_of_week = iprot.readString();
              struct.setDay_of_weekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DRESSING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dressing = iprot.readString();
              struct.setDressingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, weather struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.high != null) {
        if (struct.isSetHigh()) {
          oprot.writeFieldBegin(HIGH_FIELD_DESC);
          oprot.writeString(struct.high);
          oprot.writeFieldEnd();
        }
      }
      if (struct.low != null) {
        if (struct.isSetLow()) {
          oprot.writeFieldBegin(LOW_FIELD_DESC);
          oprot.writeString(struct.low);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wind_level != null) {
        if (struct.isSetWind_level()) {
          oprot.writeFieldBegin(WIND_LEVEL_FIELD_DESC);
          oprot.writeString(struct.wind_level);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wind_direction != null) {
        if (struct.isSetWind_direction()) {
          oprot.writeFieldBegin(WIND_DIRECTION_FIELD_DESC);
          oprot.writeString(struct.wind_direction);
          oprot.writeFieldEnd();
        }
      }
      if (struct.humidity != null) {
        if (struct.isSetHumidity()) {
          oprot.writeFieldBegin(HUMIDITY_FIELD_DESC);
          oprot.writeString(struct.humidity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pm25 != null) {
        if (struct.isSetPm25()) {
          oprot.writeFieldBegin(PM25_FIELD_DESC);
          oprot.writeString(struct.pm25);
          oprot.writeFieldEnd();
        }
      }
      if (struct.day_of_week != null) {
        if (struct.isSetDay_of_week()) {
          oprot.writeFieldBegin(DAY_OF_WEEK_FIELD_DESC);
          oprot.writeString(struct.day_of_week);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dressing != null) {
        if (struct.isSetDressing()) {
          oprot.writeFieldBegin(DRESSING_FIELD_DESC);
          oprot.writeString(struct.dressing);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class weatherTupleSchemeFactory implements SchemeFactory {
    public weatherTupleScheme getScheme() {
      return new weatherTupleScheme();
    }
  }

  private static class weatherTupleScheme extends TupleScheme<weather> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, weather struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetDate()) {
        optionals.set(1);
      }
      if (struct.isSetCity()) {
        optionals.set(2);
      }
      if (struct.isSetHigh()) {
        optionals.set(3);
      }
      if (struct.isSetLow()) {
        optionals.set(4);
      }
      if (struct.isSetWind_level()) {
        optionals.set(5);
      }
      if (struct.isSetWind_direction()) {
        optionals.set(6);
      }
      if (struct.isSetHumidity()) {
        optionals.set(7);
      }
      if (struct.isSetPm25()) {
        optionals.set(8);
      }
      if (struct.isSetDay_of_week()) {
        optionals.set(9);
      }
      if (struct.isSetDressing()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetHigh()) {
        oprot.writeString(struct.high);
      }
      if (struct.isSetLow()) {
        oprot.writeString(struct.low);
      }
      if (struct.isSetWind_level()) {
        oprot.writeString(struct.wind_level);
      }
      if (struct.isSetWind_direction()) {
        oprot.writeString(struct.wind_direction);
      }
      if (struct.isSetHumidity()) {
        oprot.writeString(struct.humidity);
      }
      if (struct.isSetPm25()) {
        oprot.writeString(struct.pm25);
      }
      if (struct.isSetDay_of_week()) {
        oprot.writeString(struct.day_of_week);
      }
      if (struct.isSetDressing()) {
        oprot.writeString(struct.dressing);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, weather struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.type = WeatherType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.high = iprot.readString();
        struct.setHighIsSet(true);
      }
      if (incoming.get(4)) {
        struct.low = iprot.readString();
        struct.setLowIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wind_level = iprot.readString();
        struct.setWind_levelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wind_direction = iprot.readString();
        struct.setWind_directionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.humidity = iprot.readString();
        struct.setHumidityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pm25 = iprot.readString();
        struct.setPm25IsSet(true);
      }
      if (incoming.get(9)) {
        struct.day_of_week = iprot.readString();
        struct.setDay_of_weekIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dressing = iprot.readString();
        struct.setDressingIsSet(true);
      }
    }
  }

}

