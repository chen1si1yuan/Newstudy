/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class TerminalState implements org.apache.thrift.TBase<TerminalState, TerminalState._Fields>, java.io.Serializable, Cloneable, Comparable<TerminalState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TerminalState");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FRONT_DOMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("front_domains", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_openid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("client_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("os_type", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField APP_VER_FIELD_DESC = new org.apache.thrift.protocol.TField("app_ver", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TerminalStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TerminalStateTupleSchemeFactory());
  }

  public Map<Domain,String> state; // optional
  public List<Domain> front_domains; // optional
  public String token; // optional
  public String version; // optional
  public String user_openid; // optional
  public String client_ip; // optional
  public String location; // optional
  public String os_type; // optional
  public String app_ver; // optional
  public String mac; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE((short)1, "state"),
    FRONT_DOMAINS((short)2, "front_domains"),
    TOKEN((short)3, "token"),
    VERSION((short)4, "version"),
    USER_OPENID((short)5, "user_openid"),
    CLIENT_IP((short)6, "client_ip"),
    LOCATION((short)7, "location"),
    OS_TYPE((short)8, "os_type"),
    APP_VER((short)9, "app_ver"),
    MAC((short)10, "mac");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // FRONT_DOMAINS
          return FRONT_DOMAINS;
        case 3: // TOKEN
          return TOKEN;
        case 4: // VERSION
          return VERSION;
        case 5: // USER_OPENID
          return USER_OPENID;
        case 6: // CLIENT_IP
          return CLIENT_IP;
        case 7: // LOCATION
          return LOCATION;
        case 8: // OS_TYPE
          return OS_TYPE;
        case 9: // APP_VER
          return APP_VER;
        case 10: // MAC
          return MAC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STATE,_Fields.FRONT_DOMAINS,_Fields.TOKEN,_Fields.VERSION,_Fields.USER_OPENID,_Fields.CLIENT_IP,_Fields.LOCATION,_Fields.OS_TYPE,_Fields.APP_VER,_Fields.MAC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Domain.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FRONT_DOMAINS, new org.apache.thrift.meta_data.FieldMetaData("front_domains", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Domain.class))));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_OPENID, new org.apache.thrift.meta_data.FieldMetaData("user_openid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("client_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("os_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VER, new org.apache.thrift.meta_data.FieldMetaData("app_ver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TerminalState.class, metaDataMap);
  }

  public TerminalState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TerminalState(TerminalState other) {
    if (other.isSetState()) {
      Map<Domain,String> __this__state = new HashMap<Domain,String>(other.state.size());
      for (Map.Entry<Domain, String> other_element : other.state.entrySet()) {

        Domain other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        Domain __this__state_copy_key = other_element_key;

        String __this__state_copy_value = other_element_value;

        __this__state.put(__this__state_copy_key, __this__state_copy_value);
      }
      this.state = __this__state;
    }
    if (other.isSetFront_domains()) {
      List<Domain> __this__front_domains = new ArrayList<Domain>(other.front_domains.size());
      for (Domain other_element : other.front_domains) {
        __this__front_domains.add(other_element);
      }
      this.front_domains = __this__front_domains;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetUser_openid()) {
      this.user_openid = other.user_openid;
    }
    if (other.isSetClient_ip()) {
      this.client_ip = other.client_ip;
    }
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetOs_type()) {
      this.os_type = other.os_type;
    }
    if (other.isSetApp_ver()) {
      this.app_ver = other.app_ver;
    }
    if (other.isSetMac()) {
      this.mac = other.mac;
    }
  }

  public TerminalState deepCopy() {
    return new TerminalState(this);
  }

  
  public void clear() {
    this.state = null;
    this.front_domains = null;
    this.token = null;
    this.version = null;
    this.user_openid = null;
    this.client_ip = null;
    this.location = null;
    this.os_type = null;
    this.app_ver = null;
    this.mac = null;
  }

  public int getStateSize() {
    return (this.state == null) ? 0 : this.state.size();
  }

  public void putToState(Domain key, String val) {
    if (this.state == null) {
      this.state = new HashMap<Domain,String>();
    }
    this.state.put(key, val);
  }

  public Map<Domain,String> getState() {
    return this.state;
  }

  public TerminalState setState(Map<Domain,String> state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getFront_domainsSize() {
    return (this.front_domains == null) ? 0 : this.front_domains.size();
  }

  public java.util.Iterator<Domain> getFront_domainsIterator() {
    return (this.front_domains == null) ? null : this.front_domains.iterator();
  }

  public void addToFront_domains(Domain elem) {
    if (this.front_domains == null) {
      this.front_domains = new ArrayList<Domain>();
    }
    this.front_domains.add(elem);
  }

  public List<Domain> getFront_domains() {
    return this.front_domains;
  }

  public TerminalState setFront_domains(List<Domain> front_domains) {
    this.front_domains = front_domains;
    return this;
  }

  public void unsetFront_domains() {
    this.front_domains = null;
  }

  /** Returns true if field front_domains is set (has been assigned a value) and false otherwise */
  public boolean isSetFront_domains() {
    return this.front_domains != null;
  }

  public void setFront_domainsIsSet(boolean value) {
    if (!value) {
      this.front_domains = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public TerminalState setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public TerminalState setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getUser_openid() {
    return this.user_openid;
  }

  public TerminalState setUser_openid(String user_openid) {
    this.user_openid = user_openid;
    return this;
  }

  public void unsetUser_openid() {
    this.user_openid = null;
  }

  /** Returns true if field user_openid is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_openid() {
    return this.user_openid != null;
  }

  public void setUser_openidIsSet(boolean value) {
    if (!value) {
      this.user_openid = null;
    }
  }

  public String getClient_ip() {
    return this.client_ip;
  }

  public TerminalState setClient_ip(String client_ip) {
    this.client_ip = client_ip;
    return this;
  }

  public void unsetClient_ip() {
    this.client_ip = null;
  }

  /** Returns true if field client_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_ip() {
    return this.client_ip != null;
  }

  public void setClient_ipIsSet(boolean value) {
    if (!value) {
      this.client_ip = null;
    }
  }

  public String getLocation() {
    return this.location;
  }

  public TerminalState setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public String getOs_type() {
    return this.os_type;
  }

  public TerminalState setOs_type(String os_type) {
    this.os_type = os_type;
    return this;
  }

  public void unsetOs_type() {
    this.os_type = null;
  }

  /** Returns true if field os_type is set (has been assigned a value) and false otherwise */
  public boolean isSetOs_type() {
    return this.os_type != null;
  }

  public void setOs_typeIsSet(boolean value) {
    if (!value) {
      this.os_type = null;
    }
  }

  public String getApp_ver() {
    return this.app_ver;
  }

  public TerminalState setApp_ver(String app_ver) {
    this.app_ver = app_ver;
    return this;
  }

  public void unsetApp_ver() {
    this.app_ver = null;
  }

  /** Returns true if field app_ver is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_ver() {
    return this.app_ver != null;
  }

  public void setApp_verIsSet(boolean value) {
    if (!value) {
      this.app_ver = null;
    }
  }

  public String getMac() {
    return this.mac;
  }

  public TerminalState setMac(String mac) {
    this.mac = mac;
    return this;
  }

  public void unsetMac() {
    this.mac = null;
  }

  /** Returns true if field mac is set (has been assigned a value) and false otherwise */
  public boolean isSetMac() {
    return this.mac != null;
  }

  public void setMacIsSet(boolean value) {
    if (!value) {
      this.mac = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Map<Domain,String>)value);
      }
      break;

    case FRONT_DOMAINS:
      if (value == null) {
        unsetFront_domains();
      } else {
        setFront_domains((List<Domain>)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case USER_OPENID:
      if (value == null) {
        unsetUser_openid();
      } else {
        setUser_openid((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClient_ip();
      } else {
        setClient_ip((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case OS_TYPE:
      if (value == null) {
        unsetOs_type();
      } else {
        setOs_type((String)value);
      }
      break;

    case APP_VER:
      if (value == null) {
        unsetApp_ver();
      } else {
        setApp_ver((String)value);
      }
      break;

    case MAC:
      if (value == null) {
        unsetMac();
      } else {
        setMac((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case FRONT_DOMAINS:
      return getFront_domains();

    case TOKEN:
      return getToken();

    case VERSION:
      return getVersion();

    case USER_OPENID:
      return getUser_openid();

    case CLIENT_IP:
      return getClient_ip();

    case LOCATION:
      return getLocation();

    case OS_TYPE:
      return getOs_type();

    case APP_VER:
      return getApp_ver();

    case MAC:
      return getMac();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case FRONT_DOMAINS:
      return isSetFront_domains();
    case TOKEN:
      return isSetToken();
    case VERSION:
      return isSetVersion();
    case USER_OPENID:
      return isSetUser_openid();
    case CLIENT_IP:
      return isSetClient_ip();
    case LOCATION:
      return isSetLocation();
    case OS_TYPE:
      return isSetOs_type();
    case APP_VER:
      return isSetApp_ver();
    case MAC:
      return isSetMac();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TerminalState)
      return this.equals((TerminalState)that);
    return false;
  }

  public boolean equals(TerminalState that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_front_domains = true && this.isSetFront_domains();
    boolean that_present_front_domains = true && that.isSetFront_domains();
    if (this_present_front_domains || that_present_front_domains) {
      if (!(this_present_front_domains && that_present_front_domains))
        return false;
      if (!this.front_domains.equals(that.front_domains))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_user_openid = true && this.isSetUser_openid();
    boolean that_present_user_openid = true && that.isSetUser_openid();
    if (this_present_user_openid || that_present_user_openid) {
      if (!(this_present_user_openid && that_present_user_openid))
        return false;
      if (!this.user_openid.equals(that.user_openid))
        return false;
    }

    boolean this_present_client_ip = true && this.isSetClient_ip();
    boolean that_present_client_ip = true && that.isSetClient_ip();
    if (this_present_client_ip || that_present_client_ip) {
      if (!(this_present_client_ip && that_present_client_ip))
        return false;
      if (!this.client_ip.equals(that.client_ip))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_os_type = true && this.isSetOs_type();
    boolean that_present_os_type = true && that.isSetOs_type();
    if (this_present_os_type || that_present_os_type) {
      if (!(this_present_os_type && that_present_os_type))
        return false;
      if (!this.os_type.equals(that.os_type))
        return false;
    }

    boolean this_present_app_ver = true && this.isSetApp_ver();
    boolean that_present_app_ver = true && that.isSetApp_ver();
    if (this_present_app_ver || that_present_app_ver) {
      if (!(this_present_app_ver && that_present_app_ver))
        return false;
      if (!this.app_ver.equals(that.app_ver))
        return false;
    }

    boolean this_present_mac = true && this.isSetMac();
    boolean that_present_mac = true && that.isSetMac();
    if (this_present_mac || that_present_mac) {
      if (!(this_present_mac && that_present_mac))
        return false;
      if (!this.mac.equals(that.mac))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(TerminalState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFront_domains()).compareTo(other.isSetFront_domains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFront_domains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.front_domains, other.front_domains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_openid()).compareTo(other.isSetUser_openid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_openid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_openid, other.user_openid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClient_ip()).compareTo(other.isSetClient_ip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_ip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_ip, other.client_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs_type()).compareTo(other.isSetOs_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os_type, other.os_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_ver()).compareTo(other.isSetApp_ver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_ver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_ver, other.app_ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("TerminalState(");
    boolean first = true;

    if (isSetState()) {
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetFront_domains()) {
      if (!first) sb.append(", ");
      sb.append("front_domains:");
      if (this.front_domains == null) {
        sb.append("null");
      } else {
        sb.append(this.front_domains);
      }
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetUser_openid()) {
      if (!first) sb.append(", ");
      sb.append("user_openid:");
      if (this.user_openid == null) {
        sb.append("null");
      } else {
        sb.append(this.user_openid);
      }
      first = false;
    }
    if (isSetClient_ip()) {
      if (!first) sb.append(", ");
      sb.append("client_ip:");
      if (this.client_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.client_ip);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetOs_type()) {
      if (!first) sb.append(", ");
      sb.append("os_type:");
      if (this.os_type == null) {
        sb.append("null");
      } else {
        sb.append(this.os_type);
      }
      first = false;
    }
    if (isSetApp_ver()) {
      if (!first) sb.append(", ");
      sb.append("app_ver:");
      if (this.app_ver == null) {
        sb.append("null");
      } else {
        sb.append(this.app_ver);
      }
      first = false;
    }
    if (isSetMac()) {
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TerminalStateStandardSchemeFactory implements SchemeFactory {
    public TerminalStateStandardScheme getScheme() {
      return new TerminalStateStandardScheme();
    }
  }

  private static class TerminalStateStandardScheme extends StandardScheme<TerminalState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TerminalState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map536 = iprot.readMapBegin();
                struct.state = new HashMap<Domain,String>(2*_map536.size);
                for (int _i537 = 0; _i537 < _map536.size; ++_i537)
                {
                  Domain _key538;
                  String _val539;
                  _key538 = Domain.findByValue(iprot.readI32());
                  _val539 = iprot.readString();
                  struct.state.put(_key538, _val539);
                }
                iprot.readMapEnd();
              }
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRONT_DOMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list540 = iprot.readListBegin();
                struct.front_domains = new ArrayList<Domain>(_list540.size);
                for (int _i541 = 0; _i541 < _list540.size; ++_i541)
                {
                  Domain _elem542;
                  _elem542 = Domain.findByValue(iprot.readI32());
                  struct.front_domains.add(_elem542);
                }
                iprot.readListEnd();
              }
              struct.setFront_domainsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_OPENID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_openid = iprot.readString();
              struct.setUser_openidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client_ip = iprot.readString();
              struct.setClient_ipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.os_type = iprot.readString();
              struct.setOs_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APP_VER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_ver = iprot.readString();
              struct.setApp_verIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mac = iprot.readString();
              struct.setMacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TerminalState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.state.size()));
            for (Map.Entry<Domain, String> _iter543 : struct.state.entrySet())
            {
              oprot.writeI32(_iter543.getKey().getValue());
              oprot.writeString(_iter543.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.front_domains != null) {
        if (struct.isSetFront_domains()) {
          oprot.writeFieldBegin(FRONT_DOMAINS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.front_domains.size()));
            for (Domain _iter544 : struct.front_domains)
            {
              oprot.writeI32(_iter544.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_openid != null) {
        if (struct.isSetUser_openid()) {
          oprot.writeFieldBegin(USER_OPENID_FIELD_DESC);
          oprot.writeString(struct.user_openid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.client_ip != null) {
        if (struct.isSetClient_ip()) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.client_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.os_type != null) {
        if (struct.isSetOs_type()) {
          oprot.writeFieldBegin(OS_TYPE_FIELD_DESC);
          oprot.writeString(struct.os_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.app_ver != null) {
        if (struct.isSetApp_ver()) {
          oprot.writeFieldBegin(APP_VER_FIELD_DESC);
          oprot.writeString(struct.app_ver);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mac != null) {
        if (struct.isSetMac()) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TerminalStateTupleSchemeFactory implements SchemeFactory {
    public TerminalStateTupleScheme getScheme() {
      return new TerminalStateTupleScheme();
    }
  }

  private static class TerminalStateTupleScheme extends TupleScheme<TerminalState> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, TerminalState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetFront_domains()) {
        optionals.set(1);
      }
      if (struct.isSetToken()) {
        optionals.set(2);
      }
      if (struct.isSetVersion()) {
        optionals.set(3);
      }
      if (struct.isSetUser_openid()) {
        optionals.set(4);
      }
      if (struct.isSetClient_ip()) {
        optionals.set(5);
      }
      if (struct.isSetLocation()) {
        optionals.set(6);
      }
      if (struct.isSetOs_type()) {
        optionals.set(7);
      }
      if (struct.isSetApp_ver()) {
        optionals.set(8);
      }
      if (struct.isSetMac()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetState()) {
        {
          oprot.writeI32(struct.state.size());
          for (Map.Entry<Domain, String> _iter545 : struct.state.entrySet())
          {
            oprot.writeI32(_iter545.getKey().getValue());
            oprot.writeString(_iter545.getValue());
          }
        }
      }
      if (struct.isSetFront_domains()) {
        {
          oprot.writeI32(struct.front_domains.size());
          for (Domain _iter546 : struct.front_domains)
          {
            oprot.writeI32(_iter546.getValue());
          }
        }
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetUser_openid()) {
        oprot.writeString(struct.user_openid);
      }
      if (struct.isSetClient_ip()) {
        oprot.writeString(struct.client_ip);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetOs_type()) {
        oprot.writeString(struct.os_type);
      }
      if (struct.isSetApp_ver()) {
        oprot.writeString(struct.app_ver);
      }
      if (struct.isSetMac()) {
        oprot.writeString(struct.mac);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, TerminalState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map547 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.state = new HashMap<Domain,String>(2*_map547.size);
          for (int _i548 = 0; _i548 < _map547.size; ++_i548)
          {
            Domain _key549;
            String _val550;
            _key549 = Domain.findByValue(iprot.readI32());
            _val550 = iprot.readString();
            struct.state.put(_key549, _val550);
          }
        }
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list551 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.front_domains = new ArrayList<Domain>(_list551.size);
          for (int _i552 = 0; _i552 < _list551.size; ++_i552)
          {
            Domain _elem553;
            _elem553 = Domain.findByValue(iprot.readI32());
            struct.front_domains.add(_elem553);
          }
        }
        struct.setFront_domainsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_openid = iprot.readString();
        struct.setUser_openidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.client_ip = iprot.readString();
        struct.setClient_ipIsSet(true);
      }
      if (incoming.get(6)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.os_type = iprot.readString();
        struct.setOs_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.app_ver = iprot.readString();
        struct.setApp_verIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mac = iprot.readString();
        struct.setMacIsSet(true);
      }
    }
  }

}

