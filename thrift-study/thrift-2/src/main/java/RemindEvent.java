/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class RemindEvent implements org.apache.thrift.TBase<RemindEvent, RemindEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemindEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemindEvent");

  private static final org.apache.thrift.protocol.TField EVENT_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("event_uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event_content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_completed", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField REMIND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("remind_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("time_stamp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("selection", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField TIMEVAL_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("timeval_sec", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RemindEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RemindEventTupleSchemeFactory());
  }

  public String event_uid; // optional
  public String event_content; // optional
  /**
   * 
   * @see EventType
   */
  public EventType event_type; // optional
  public TimeInfo time; // optional
  public DateOption date; // optional
  /**
   * 
   * @see EventStatus
   */
  public EventStatus status; // optional
  public boolean is_completed; // optional
  /**
   * 
   * @see RemindType
   */
  public RemindType remind_type; // optional
  public String time_stamp; // optional
  public List<String> selection; // optional
  public String timeval_sec; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_UID((short)1, "event_uid"),
    EVENT_CONTENT((short)2, "event_content"),
    /**
     * 
     * @see EventType
     */
    EVENT_TYPE((short)3, "event_type"),
    TIME((short)4, "time"),
    DATE((short)5, "date"),
    /**
     * 
     * @see EventStatus
     */
    STATUS((short)6, "status"),
    IS_COMPLETED((short)7, "is_completed"),
    /**
     * 
     * @see RemindType
     */
    REMIND_TYPE((short)8, "remind_type"),
    TIME_STAMP((short)9, "time_stamp"),
    SELECTION((short)10, "selection"),
    TIMEVAL_SEC((short)11, "timeval_sec");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_UID
          return EVENT_UID;
        case 2: // EVENT_CONTENT
          return EVENT_CONTENT;
        case 3: // EVENT_TYPE
          return EVENT_TYPE;
        case 4: // TIME
          return TIME;
        case 5: // DATE
          return DATE;
        case 6: // STATUS
          return STATUS;
        case 7: // IS_COMPLETED
          return IS_COMPLETED;
        case 8: // REMIND_TYPE
          return REMIND_TYPE;
        case 9: // TIME_STAMP
          return TIME_STAMP;
        case 10: // SELECTION
          return SELECTION;
        case 11: // TIMEVAL_SEC
          return TIMEVAL_SEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_COMPLETED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENT_UID,_Fields.EVENT_CONTENT,_Fields.EVENT_TYPE,_Fields.TIME,_Fields.DATE,_Fields.STATUS,_Fields.IS_COMPLETED,_Fields.REMIND_TYPE,_Fields.TIME_STAMP,_Fields.SELECTION,_Fields.TIMEVAL_SEC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_UID, new org.apache.thrift.meta_data.FieldMetaData("event_uid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("event_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventType.class)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeInfo.class)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateOption.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventStatus.class)));
    tmpMap.put(_Fields.IS_COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("is_completed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REMIND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("remind_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RemindType.class)));
    tmpMap.put(_Fields.TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("time_stamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELECTION, new org.apache.thrift.meta_data.FieldMetaData("selection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TIMEVAL_SEC, new org.apache.thrift.meta_data.FieldMetaData("timeval_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemindEvent.class, metaDataMap);
  }

  public RemindEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemindEvent(RemindEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEvent_uid()) {
      this.event_uid = other.event_uid;
    }
    if (other.isSetEvent_content()) {
      this.event_content = other.event_content;
    }
    if (other.isSetEvent_type()) {
      this.event_type = other.event_type;
    }
    if (other.isSetTime()) {
      this.time = new TimeInfo(other.time);
    }
    if (other.isSetDate()) {
      this.date = new DateOption(other.date);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.is_completed = other.is_completed;
    if (other.isSetRemind_type()) {
      this.remind_type = other.remind_type;
    }
    if (other.isSetTime_stamp()) {
      this.time_stamp = other.time_stamp;
    }
    if (other.isSetSelection()) {
      List<String> __this__selection = new ArrayList<String>(other.selection);
      this.selection = __this__selection;
    }
    if (other.isSetTimeval_sec()) {
      this.timeval_sec = other.timeval_sec;
    }
  }

  public RemindEvent deepCopy() {
    return new RemindEvent(this);
  }

  
  public void clear() {
    this.event_uid = null;
    this.event_content = null;
    this.event_type = null;
    this.time = null;
    this.date = null;
    this.status = null;
    setIs_completedIsSet(false);
    this.is_completed = false;
    this.remind_type = null;
    this.time_stamp = null;
    this.selection = null;
    this.timeval_sec = null;
  }

  public String getEvent_uid() {
    return this.event_uid;
  }

  public RemindEvent setEvent_uid(String event_uid) {
    this.event_uid = event_uid;
    return this;
  }

  public void unsetEvent_uid() {
    this.event_uid = null;
  }

  /** Returns true if field event_uid is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_uid() {
    return this.event_uid != null;
  }

  public void setEvent_uidIsSet(boolean value) {
    if (!value) {
      this.event_uid = null;
    }
  }

  public String getEvent_content() {
    return this.event_content;
  }

  public RemindEvent setEvent_content(String event_content) {
    this.event_content = event_content;
    return this;
  }

  public void unsetEvent_content() {
    this.event_content = null;
  }

  /** Returns true if field event_content is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_content() {
    return this.event_content != null;
  }

  public void setEvent_contentIsSet(boolean value) {
    if (!value) {
      this.event_content = null;
    }
  }

  /**
   * 
   * @see EventType
   */
  public EventType getEvent_type() {
    return this.event_type;
  }

  /**
   * 
   * @see EventType
   */
  public RemindEvent setEvent_type(EventType event_type) {
    this.event_type = event_type;
    return this;
  }

  public void unsetEvent_type() {
    this.event_type = null;
  }

  /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_type() {
    return this.event_type != null;
  }

  public void setEvent_typeIsSet(boolean value) {
    if (!value) {
      this.event_type = null;
    }
  }

  public TimeInfo getTime() {
    return this.time;
  }

  public RemindEvent setTime(TimeInfo time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public DateOption getDate() {
    return this.date;
  }

  public RemindEvent setDate(DateOption date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  /**
   * 
   * @see EventStatus
   */
  public EventStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see EventStatus
   */
  public RemindEvent setStatus(EventStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isIs_completed() {
    return this.is_completed;
  }

  public RemindEvent setIs_completed(boolean is_completed) {
    this.is_completed = is_completed;
    setIs_completedIsSet(true);
    return this;
  }

  public void unsetIs_completed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_COMPLETED_ISSET_ID);
  }

  /** Returns true if field is_completed is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_completed() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_COMPLETED_ISSET_ID);
  }

  public void setIs_completedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_COMPLETED_ISSET_ID, value);
  }

  /**
   * 
   * @see RemindType
   */
  public RemindType getRemind_type() {
    return this.remind_type;
  }

  /**
   * 
   * @see RemindType
   */
  public RemindEvent setRemind_type(RemindType remind_type) {
    this.remind_type = remind_type;
    return this;
  }

  public void unsetRemind_type() {
    this.remind_type = null;
  }

  /** Returns true if field remind_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRemind_type() {
    return this.remind_type != null;
  }

  public void setRemind_typeIsSet(boolean value) {
    if (!value) {
      this.remind_type = null;
    }
  }

  public String getTime_stamp() {
    return this.time_stamp;
  }

  public RemindEvent setTime_stamp(String time_stamp) {
    this.time_stamp = time_stamp;
    return this;
  }

  public void unsetTime_stamp() {
    this.time_stamp = null;
  }

  /** Returns true if field time_stamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_stamp() {
    return this.time_stamp != null;
  }

  public void setTime_stampIsSet(boolean value) {
    if (!value) {
      this.time_stamp = null;
    }
  }

  public int getSelectionSize() {
    return (this.selection == null) ? 0 : this.selection.size();
  }

  public java.util.Iterator<String> getSelectionIterator() {
    return (this.selection == null) ? null : this.selection.iterator();
  }

  public void addToSelection(String elem) {
    if (this.selection == null) {
      this.selection = new ArrayList<String>();
    }
    this.selection.add(elem);
  }

  public List<String> getSelection() {
    return this.selection;
  }

  public RemindEvent setSelection(List<String> selection) {
    this.selection = selection;
    return this;
  }

  public void unsetSelection() {
    this.selection = null;
  }

  /** Returns true if field selection is set (has been assigned a value) and false otherwise */
  public boolean isSetSelection() {
    return this.selection != null;
  }

  public void setSelectionIsSet(boolean value) {
    if (!value) {
      this.selection = null;
    }
  }

  public String getTimeval_sec() {
    return this.timeval_sec;
  }

  public RemindEvent setTimeval_sec(String timeval_sec) {
    this.timeval_sec = timeval_sec;
    return this;
  }

  public void unsetTimeval_sec() {
    this.timeval_sec = null;
  }

  /** Returns true if field timeval_sec is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeval_sec() {
    return this.timeval_sec != null;
  }

  public void setTimeval_secIsSet(boolean value) {
    if (!value) {
      this.timeval_sec = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_UID:
      if (value == null) {
        unsetEvent_uid();
      } else {
        setEvent_uid((String)value);
      }
      break;

    case EVENT_CONTENT:
      if (value == null) {
        unsetEvent_content();
      } else {
        setEvent_content((String)value);
      }
      break;

    case EVENT_TYPE:
      if (value == null) {
        unsetEvent_type();
      } else {
        setEvent_type((EventType)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((TimeInfo)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((DateOption)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((EventStatus)value);
      }
      break;

    case IS_COMPLETED:
      if (value == null) {
        unsetIs_completed();
      } else {
        setIs_completed((Boolean)value);
      }
      break;

    case REMIND_TYPE:
      if (value == null) {
        unsetRemind_type();
      } else {
        setRemind_type((RemindType)value);
      }
      break;

    case TIME_STAMP:
      if (value == null) {
        unsetTime_stamp();
      } else {
        setTime_stamp((String)value);
      }
      break;

    case SELECTION:
      if (value == null) {
        unsetSelection();
      } else {
        setSelection((List<String>)value);
      }
      break;

    case TIMEVAL_SEC:
      if (value == null) {
        unsetTimeval_sec();
      } else {
        setTimeval_sec((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_UID:
      return getEvent_uid();

    case EVENT_CONTENT:
      return getEvent_content();

    case EVENT_TYPE:
      return getEvent_type();

    case TIME:
      return getTime();

    case DATE:
      return getDate();

    case STATUS:
      return getStatus();

    case IS_COMPLETED:
      return Boolean.valueOf(isIs_completed());

    case REMIND_TYPE:
      return getRemind_type();

    case TIME_STAMP:
      return getTime_stamp();

    case SELECTION:
      return getSelection();

    case TIMEVAL_SEC:
      return getTimeval_sec();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_UID:
      return isSetEvent_uid();
    case EVENT_CONTENT:
      return isSetEvent_content();
    case EVENT_TYPE:
      return isSetEvent_type();
    case TIME:
      return isSetTime();
    case DATE:
      return isSetDate();
    case STATUS:
      return isSetStatus();
    case IS_COMPLETED:
      return isSetIs_completed();
    case REMIND_TYPE:
      return isSetRemind_type();
    case TIME_STAMP:
      return isSetTime_stamp();
    case SELECTION:
      return isSetSelection();
    case TIMEVAL_SEC:
      return isSetTimeval_sec();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RemindEvent)
      return this.equals((RemindEvent)that);
    return false;
  }

  public boolean equals(RemindEvent that) {
    if (that == null)
      return false;

    boolean this_present_event_uid = true && this.isSetEvent_uid();
    boolean that_present_event_uid = true && that.isSetEvent_uid();
    if (this_present_event_uid || that_present_event_uid) {
      if (!(this_present_event_uid && that_present_event_uid))
        return false;
      if (!this.event_uid.equals(that.event_uid))
        return false;
    }

    boolean this_present_event_content = true && this.isSetEvent_content();
    boolean that_present_event_content = true && that.isSetEvent_content();
    if (this_present_event_content || that_present_event_content) {
      if (!(this_present_event_content && that_present_event_content))
        return false;
      if (!this.event_content.equals(that.event_content))
        return false;
    }

    boolean this_present_event_type = true && this.isSetEvent_type();
    boolean that_present_event_type = true && that.isSetEvent_type();
    if (this_present_event_type || that_present_event_type) {
      if (!(this_present_event_type && that_present_event_type))
        return false;
      if (!this.event_type.equals(that.event_type))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_is_completed = true && this.isSetIs_completed();
    boolean that_present_is_completed = true && that.isSetIs_completed();
    if (this_present_is_completed || that_present_is_completed) {
      if (!(this_present_is_completed && that_present_is_completed))
        return false;
      if (this.is_completed != that.is_completed)
        return false;
    }

    boolean this_present_remind_type = true && this.isSetRemind_type();
    boolean that_present_remind_type = true && that.isSetRemind_type();
    if (this_present_remind_type || that_present_remind_type) {
      if (!(this_present_remind_type && that_present_remind_type))
        return false;
      if (!this.remind_type.equals(that.remind_type))
        return false;
    }

    boolean this_present_time_stamp = true && this.isSetTime_stamp();
    boolean that_present_time_stamp = true && that.isSetTime_stamp();
    if (this_present_time_stamp || that_present_time_stamp) {
      if (!(this_present_time_stamp && that_present_time_stamp))
        return false;
      if (!this.time_stamp.equals(that.time_stamp))
        return false;
    }

    boolean this_present_selection = true && this.isSetSelection();
    boolean that_present_selection = true && that.isSetSelection();
    if (this_present_selection || that_present_selection) {
      if (!(this_present_selection && that_present_selection))
        return false;
      if (!this.selection.equals(that.selection))
        return false;
    }

    boolean this_present_timeval_sec = true && this.isSetTimeval_sec();
    boolean that_present_timeval_sec = true && that.isSetTimeval_sec();
    if (this_present_timeval_sec || that_present_timeval_sec) {
      if (!(this_present_timeval_sec && that_present_timeval_sec))
        return false;
      if (!this.timeval_sec.equals(that.timeval_sec))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(RemindEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEvent_uid()).compareTo(other.isSetEvent_uid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_uid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_uid, other.event_uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_content()).compareTo(other.isSetEvent_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_content, other.event_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent_type()).compareTo(other.isSetEvent_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_completed()).compareTo(other.isSetIs_completed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_completed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_completed, other.is_completed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemind_type()).compareTo(other.isSetRemind_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemind_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remind_type, other.remind_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_stamp()).compareTo(other.isSetTime_stamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_stamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_stamp, other.time_stamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelection()).compareTo(other.isSetSelection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selection, other.selection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeval_sec()).compareTo(other.isSetTimeval_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeval_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeval_sec, other.timeval_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("RemindEvent(");
    boolean first = true;

    if (isSetEvent_uid()) {
      sb.append("event_uid:");
      if (this.event_uid == null) {
        sb.append("null");
      } else {
        sb.append(this.event_uid);
      }
      first = false;
    }
    if (isSetEvent_content()) {
      if (!first) sb.append(", ");
      sb.append("event_content:");
      if (this.event_content == null) {
        sb.append("null");
      } else {
        sb.append(this.event_content);
      }
      first = false;
    }
    if (isSetEvent_type()) {
      if (!first) sb.append(", ");
      sb.append("event_type:");
      if (this.event_type == null) {
        sb.append("null");
      } else {
        sb.append(this.event_type);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetIs_completed()) {
      if (!first) sb.append(", ");
      sb.append("is_completed:");
      sb.append(this.is_completed);
      first = false;
    }
    if (isSetRemind_type()) {
      if (!first) sb.append(", ");
      sb.append("remind_type:");
      if (this.remind_type == null) {
        sb.append("null");
      } else {
        sb.append(this.remind_type);
      }
      first = false;
    }
    if (isSetTime_stamp()) {
      if (!first) sb.append(", ");
      sb.append("time_stamp:");
      if (this.time_stamp == null) {
        sb.append("null");
      } else {
        sb.append(this.time_stamp);
      }
      first = false;
    }
    if (isSetSelection()) {
      if (!first) sb.append(", ");
      sb.append("selection:");
      if (this.selection == null) {
        sb.append("null");
      } else {
        sb.append(this.selection);
      }
      first = false;
    }
    if (isSetTimeval_sec()) {
      if (!first) sb.append(", ");
      sb.append("timeval_sec:");
      if (this.timeval_sec == null) {
        sb.append("null");
      } else {
        sb.append(this.timeval_sec);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (time != null) {
      time.validate();
    }
    if (date != null) {
      date.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemindEventStandardSchemeFactory implements SchemeFactory {
    public RemindEventStandardScheme getScheme() {
      return new RemindEventStandardScheme();
    }
  }

  private static class RemindEventStandardScheme extends StandardScheme<RemindEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RemindEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_uid = iprot.readString();
              struct.setEvent_uidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.event_content = iprot.readString();
              struct.setEvent_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.event_type = EventType.findByValue(iprot.readI32());
              struct.setEvent_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.time = new TimeInfo();
              struct.time.read(iprot);
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date = new DateOption();
              struct.date.read(iprot);
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = EventStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_completed = iprot.readBool();
              struct.setIs_completedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMIND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remind_type = RemindType.findByValue(iprot.readI32());
              struct.setRemind_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_stamp = iprot.readString();
              struct.setTime_stampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SELECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.selection = new ArrayList<String>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  struct.selection.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setSelectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMEVAL_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeval_sec = iprot.readString();
              struct.setTimeval_secIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RemindEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.event_uid != null) {
        if (struct.isSetEvent_uid()) {
          oprot.writeFieldBegin(EVENT_UID_FIELD_DESC);
          oprot.writeString(struct.event_uid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.event_content != null) {
        if (struct.isSetEvent_content()) {
          oprot.writeFieldBegin(EVENT_CONTENT_FIELD_DESC);
          oprot.writeString(struct.event_content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.event_type != null) {
        if (struct.isSetEvent_type()) {
          oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.event_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          struct.time.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          struct.date.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_completed()) {
        oprot.writeFieldBegin(IS_COMPLETED_FIELD_DESC);
        oprot.writeBool(struct.is_completed);
        oprot.writeFieldEnd();
      }
      if (struct.remind_type != null) {
        if (struct.isSetRemind_type()) {
          oprot.writeFieldBegin(REMIND_TYPE_FIELD_DESC);
          oprot.writeI32(struct.remind_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_stamp != null) {
        if (struct.isSetTime_stamp()) {
          oprot.writeFieldBegin(TIME_STAMP_FIELD_DESC);
          oprot.writeString(struct.time_stamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.selection != null) {
        if (struct.isSetSelection()) {
          oprot.writeFieldBegin(SELECTION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.selection.size()));
            for (String _iter19 : struct.selection)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeval_sec != null) {
        if (struct.isSetTimeval_sec()) {
          oprot.writeFieldBegin(TIMEVAL_SEC_FIELD_DESC);
          oprot.writeString(struct.timeval_sec);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemindEventTupleSchemeFactory implements SchemeFactory {
    public RemindEventTupleScheme getScheme() {
      return new RemindEventTupleScheme();
    }
  }

  private static class RemindEventTupleScheme extends TupleScheme<RemindEvent> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, RemindEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEvent_uid()) {
        optionals.set(0);
      }
      if (struct.isSetEvent_content()) {
        optionals.set(1);
      }
      if (struct.isSetEvent_type()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetDate()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetIs_completed()) {
        optionals.set(6);
      }
      if (struct.isSetRemind_type()) {
        optionals.set(7);
      }
      if (struct.isSetTime_stamp()) {
        optionals.set(8);
      }
      if (struct.isSetSelection()) {
        optionals.set(9);
      }
      if (struct.isSetTimeval_sec()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetEvent_uid()) {
        oprot.writeString(struct.event_uid);
      }
      if (struct.isSetEvent_content()) {
        oprot.writeString(struct.event_content);
      }
      if (struct.isSetEvent_type()) {
        oprot.writeI32(struct.event_type.getValue());
      }
      if (struct.isSetTime()) {
        struct.time.write(oprot);
      }
      if (struct.isSetDate()) {
        struct.date.write(oprot);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetIs_completed()) {
        oprot.writeBool(struct.is_completed);
      }
      if (struct.isSetRemind_type()) {
        oprot.writeI32(struct.remind_type.getValue());
      }
      if (struct.isSetTime_stamp()) {
        oprot.writeString(struct.time_stamp);
      }
      if (struct.isSetSelection()) {
        {
          oprot.writeI32(struct.selection.size());
          for (String _iter20 : struct.selection)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetTimeval_sec()) {
        oprot.writeString(struct.timeval_sec);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, RemindEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.event_uid = iprot.readString();
        struct.setEvent_uidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.event_content = iprot.readString();
        struct.setEvent_contentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.event_type = EventType.findByValue(iprot.readI32());
        struct.setEvent_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = new TimeInfo();
        struct.time.read(iprot);
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date = new DateOption();
        struct.date.read(iprot);
        struct.setDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = EventStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_completed = iprot.readBool();
        struct.setIs_completedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remind_type = RemindType.findByValue(iprot.readI32());
        struct.setRemind_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.time_stamp = iprot.readString();
        struct.setTime_stampIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.selection = new ArrayList<String>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            String _elem23;
            _elem23 = iprot.readString();
            struct.selection.add(_elem23);
          }
        }
        struct.setSelectionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.timeval_sec = iprot.readString();
        struct.setTimeval_secIsSet(true);
      }
    }
  }

}

