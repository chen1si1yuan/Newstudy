/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2017-10-14")
public class TVInstruction implements org.apache.thrift.TBase<TVInstruction, TVInstruction._Fields>, java.io.Serializable, Cloneable, Comparable<TVInstruction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVInstruction");

  private static final org.apache.thrift.protocol.TField TV_INSTRUCTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("tv_instruction_status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TV_PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("tv_program", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VOLUME_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("volume_value", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVInstructionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVInstructionTupleSchemeFactory());
  }

  /**
   * 
   * @see TVInstructionStstus
   */
  public TVInstructionStstus tv_instruction_status; // optional
  public String tv_program; // optional
  public double volume_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TVInstructionStstus
     */
    TV_INSTRUCTION_STATUS((short)1, "tv_instruction_status"),
    TV_PROGRAM((short)2, "tv_program"),
    VOLUME_VALUE((short)3, "volume_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TV_INSTRUCTION_STATUS
          return TV_INSTRUCTION_STATUS;
        case 2: // TV_PROGRAM
          return TV_PROGRAM;
        case 3: // VOLUME_VALUE
          return VOLUME_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUME_VALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TV_INSTRUCTION_STATUS,_Fields.TV_PROGRAM,_Fields.VOLUME_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TV_INSTRUCTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("tv_instruction_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TVInstructionStstus.class)));
    tmpMap.put(_Fields.TV_PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("tv_program", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOLUME_VALUE, new org.apache.thrift.meta_data.FieldMetaData("volume_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVInstruction.class, metaDataMap);
  }

  public TVInstruction() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVInstruction(TVInstruction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTv_instruction_status()) {
      this.tv_instruction_status = other.tv_instruction_status;
    }
    if (other.isSetTv_program()) {
      this.tv_program = other.tv_program;
    }
    this.volume_value = other.volume_value;
  }

  public TVInstruction deepCopy() {
    return new TVInstruction(this);
  }

  
  public void clear() {
    this.tv_instruction_status = null;
    this.tv_program = null;
    setVolume_valueIsSet(false);
    this.volume_value = 0.0;
  }

  /**
   * 
   * @see TVInstructionStstus
   */
  public TVInstructionStstus getTv_instruction_status() {
    return this.tv_instruction_status;
  }

  /**
   * 
   * @see TVInstructionStstus
   */
  public TVInstruction setTv_instruction_status(TVInstructionStstus tv_instruction_status) {
    this.tv_instruction_status = tv_instruction_status;
    return this;
  }

  public void unsetTv_instruction_status() {
    this.tv_instruction_status = null;
  }

  /** Returns true if field tv_instruction_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTv_instruction_status() {
    return this.tv_instruction_status != null;
  }

  public void setTv_instruction_statusIsSet(boolean value) {
    if (!value) {
      this.tv_instruction_status = null;
    }
  }

  public String getTv_program() {
    return this.tv_program;
  }

  public TVInstruction setTv_program(String tv_program) {
    this.tv_program = tv_program;
    return this;
  }

  public void unsetTv_program() {
    this.tv_program = null;
  }

  /** Returns true if field tv_program is set (has been assigned a value) and false otherwise */
  public boolean isSetTv_program() {
    return this.tv_program != null;
  }

  public void setTv_programIsSet(boolean value) {
    if (!value) {
      this.tv_program = null;
    }
  }

  public double getVolume_value() {
    return this.volume_value;
  }

  public TVInstruction setVolume_value(double volume_value) {
    this.volume_value = volume_value;
    setVolume_valueIsSet(true);
    return this;
  }

  public void unsetVolume_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_VALUE_ISSET_ID);
  }

  /** Returns true if field volume_value is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume_value() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_VALUE_ISSET_ID);
  }

  public void setVolume_valueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TV_INSTRUCTION_STATUS:
      if (value == null) {
        unsetTv_instruction_status();
      } else {
        setTv_instruction_status((TVInstructionStstus)value);
      }
      break;

    case TV_PROGRAM:
      if (value == null) {
        unsetTv_program();
      } else {
        setTv_program((String)value);
      }
      break;

    case VOLUME_VALUE:
      if (value == null) {
        unsetVolume_value();
      } else {
        setVolume_value((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TV_INSTRUCTION_STATUS:
      return getTv_instruction_status();

    case TV_PROGRAM:
      return getTv_program();

    case VOLUME_VALUE:
      return Double.valueOf(getVolume_value());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TV_INSTRUCTION_STATUS:
      return isSetTv_instruction_status();
    case TV_PROGRAM:
      return isSetTv_program();
    case VOLUME_VALUE:
      return isSetVolume_value();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVInstruction)
      return this.equals((TVInstruction)that);
    return false;
  }

  public boolean equals(TVInstruction that) {
    if (that == null)
      return false;

    boolean this_present_tv_instruction_status = true && this.isSetTv_instruction_status();
    boolean that_present_tv_instruction_status = true && that.isSetTv_instruction_status();
    if (this_present_tv_instruction_status || that_present_tv_instruction_status) {
      if (!(this_present_tv_instruction_status && that_present_tv_instruction_status))
        return false;
      if (!this.tv_instruction_status.equals(that.tv_instruction_status))
        return false;
    }

    boolean this_present_tv_program = true && this.isSetTv_program();
    boolean that_present_tv_program = true && that.isSetTv_program();
    if (this_present_tv_program || that_present_tv_program) {
      if (!(this_present_tv_program && that_present_tv_program))
        return false;
      if (!this.tv_program.equals(that.tv_program))
        return false;
    }

    boolean this_present_volume_value = true && this.isSetVolume_value();
    boolean that_present_volume_value = true && that.isSetVolume_value();
    if (this_present_volume_value || that_present_volume_value) {
      if (!(this_present_volume_value && that_present_volume_value))
        return false;
      if (this.volume_value != that.volume_value)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(TVInstruction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTv_instruction_status()).compareTo(other.isSetTv_instruction_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTv_instruction_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tv_instruction_status, other.tv_instruction_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTv_program()).compareTo(other.isSetTv_program());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTv_program()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tv_program, other.tv_program);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume_value()).compareTo(other.isSetVolume_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume_value, other.volume_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("TVInstruction(");
    boolean first = true;

    if (isSetTv_instruction_status()) {
      sb.append("tv_instruction_status:");
      if (this.tv_instruction_status == null) {
        sb.append("null");
      } else {
        sb.append(this.tv_instruction_status);
      }
      first = false;
    }
    if (isSetTv_program()) {
      if (!first) sb.append(", ");
      sb.append("tv_program:");
      if (this.tv_program == null) {
        sb.append("null");
      } else {
        sb.append(this.tv_program);
      }
      first = false;
    }
    if (isSetVolume_value()) {
      if (!first) sb.append(", ");
      sb.append("volume_value:");
      sb.append(this.volume_value);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVInstructionStandardSchemeFactory implements SchemeFactory {
    public TVInstructionStandardScheme getScheme() {
      return new TVInstructionStandardScheme();
    }
  }

  private static class TVInstructionStandardScheme extends StandardScheme<TVInstruction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVInstruction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TV_INSTRUCTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tv_instruction_status = TVInstructionStstus.findByValue(iprot.readI32());
              struct.setTv_instruction_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TV_PROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tv_program = iprot.readString();
              struct.setTv_programIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOLUME_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.volume_value = iprot.readDouble();
              struct.setVolume_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVInstruction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tv_instruction_status != null) {
        if (struct.isSetTv_instruction_status()) {
          oprot.writeFieldBegin(TV_INSTRUCTION_STATUS_FIELD_DESC);
          oprot.writeI32(struct.tv_instruction_status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tv_program != null) {
        if (struct.isSetTv_program()) {
          oprot.writeFieldBegin(TV_PROGRAM_FIELD_DESC);
          oprot.writeString(struct.tv_program);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolume_value()) {
        oprot.writeFieldBegin(VOLUME_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.volume_value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVInstructionTupleSchemeFactory implements SchemeFactory {
    public TVInstructionTupleScheme getScheme() {
      return new TVInstructionTupleScheme();
    }
  }

  private static class TVInstructionTupleScheme extends TupleScheme<TVInstruction> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, TVInstruction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTv_instruction_status()) {
        optionals.set(0);
      }
      if (struct.isSetTv_program()) {
        optionals.set(1);
      }
      if (struct.isSetVolume_value()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTv_instruction_status()) {
        oprot.writeI32(struct.tv_instruction_status.getValue());
      }
      if (struct.isSetTv_program()) {
        oprot.writeString(struct.tv_program);
      }
      if (struct.isSetVolume_value()) {
        oprot.writeDouble(struct.volume_value);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, TVInstruction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tv_instruction_status = TVInstructionStstus.findByValue(iprot.readI32());
        struct.setTv_instruction_statusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tv_program = iprot.readString();
        struct.setTv_programIsSet(true);
      }
      if (incoming.get(2)) {
        struct.volume_value = iprot.readDouble();
        struct.setVolume_valueIsSet(true);
      }
    }
  }

}

