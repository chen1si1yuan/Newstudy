/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class audio implements org.apache.thrift.TBase<audio, audio._Fields>, java.io.Serializable, Cloneable, Comparable<audio> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("audio");

  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("source_type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ABLUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ablum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ABLUM_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("ablum_url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PLAY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("play_url", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_id", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("program_id", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new audioStandardSchemeFactory());
    schemes.put(TupleScheme.class, new audioTupleSchemeFactory());
  }

  public String source_type; // optional
  public String name; // optional
  public String author; // optional
  public String ablum; // optional
  public String ablum_url; // optional
  public String play_url; // optional
  public String image; // optional
  public String channel_id; // optional
  public String program_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_TYPE((short)1, "source_type"),
    NAME((short)2, "name"),
    AUTHOR((short)3, "author"),
    ABLUM((short)4, "ablum"),
    ABLUM_URL((short)6, "ablum_url"),
    PLAY_URL((short)7, "play_url"),
    IMAGE((short)8, "image"),
    CHANNEL_ID((short)9, "channel_id"),
    PROGRAM_ID((short)10, "program_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 2: // NAME
          return NAME;
        case 3: // AUTHOR
          return AUTHOR;
        case 4: // ABLUM
          return ABLUM;
        case 6: // ABLUM_URL
          return ABLUM_URL;
        case 7: // PLAY_URL
          return PLAY_URL;
        case 8: // IMAGE
          return IMAGE;
        case 9: // CHANNEL_ID
          return CHANNEL_ID;
        case 10: // PROGRAM_ID
          return PROGRAM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SOURCE_TYPE,_Fields.NAME,_Fields.AUTHOR,_Fields.ABLUM,_Fields.ABLUM_URL,_Fields.PLAY_URL,_Fields.IMAGE,_Fields.CHANNEL_ID,_Fields.PROGRAM_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("source_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABLUM, new org.apache.thrift.meta_data.FieldMetaData("ablum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABLUM_URL, new org.apache.thrift.meta_data.FieldMetaData("ablum_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAY_URL, new org.apache.thrift.meta_data.FieldMetaData("play_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channel_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("program_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(audio.class, metaDataMap);
  }

  public audio() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public audio(audio other) {
    if (other.isSetSource_type()) {
      this.source_type = other.source_type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetAblum()) {
      this.ablum = other.ablum;
    }
    if (other.isSetAblum_url()) {
      this.ablum_url = other.ablum_url;
    }
    if (other.isSetPlay_url()) {
      this.play_url = other.play_url;
    }
    if (other.isSetImage()) {
      this.image = other.image;
    }
    if (other.isSetChannel_id()) {
      this.channel_id = other.channel_id;
    }
    if (other.isSetProgram_id()) {
      this.program_id = other.program_id;
    }
  }

  public audio deepCopy() {
    return new audio(this);
  }

  
  public void clear() {
    this.source_type = null;
    this.name = null;
    this.author = null;
    this.ablum = null;
    this.ablum_url = null;
    this.play_url = null;
    this.image = null;
    this.channel_id = null;
    this.program_id = null;
  }

  public String getSource_type() {
    return this.source_type;
  }

  public audio setSource_type(String source_type) {
    this.source_type = source_type;
    return this;
  }

  public void unsetSource_type() {
    this.source_type = null;
  }

  /** Returns true if field source_type is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_type() {
    return this.source_type != null;
  }

  public void setSource_typeIsSet(boolean value) {
    if (!value) {
      this.source_type = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public audio setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public audio setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getAblum() {
    return this.ablum;
  }

  public audio setAblum(String ablum) {
    this.ablum = ablum;
    return this;
  }

  public void unsetAblum() {
    this.ablum = null;
  }

  /** Returns true if field ablum is set (has been assigned a value) and false otherwise */
  public boolean isSetAblum() {
    return this.ablum != null;
  }

  public void setAblumIsSet(boolean value) {
    if (!value) {
      this.ablum = null;
    }
  }

  public String getAblum_url() {
    return this.ablum_url;
  }

  public audio setAblum_url(String ablum_url) {
    this.ablum_url = ablum_url;
    return this;
  }

  public void unsetAblum_url() {
    this.ablum_url = null;
  }

  /** Returns true if field ablum_url is set (has been assigned a value) and false otherwise */
  public boolean isSetAblum_url() {
    return this.ablum_url != null;
  }

  public void setAblum_urlIsSet(boolean value) {
    if (!value) {
      this.ablum_url = null;
    }
  }

  public String getPlay_url() {
    return this.play_url;
  }

  public audio setPlay_url(String play_url) {
    this.play_url = play_url;
    return this;
  }

  public void unsetPlay_url() {
    this.play_url = null;
  }

  /** Returns true if field play_url is set (has been assigned a value) and false otherwise */
  public boolean isSetPlay_url() {
    return this.play_url != null;
  }

  public void setPlay_urlIsSet(boolean value) {
    if (!value) {
      this.play_url = null;
    }
  }

  public String getImage() {
    return this.image;
  }

  public audio setImage(String image) {
    this.image = image;
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public String getChannel_id() {
    return this.channel_id;
  }

  public audio setChannel_id(String channel_id) {
    this.channel_id = channel_id;
    return this;
  }

  public void unsetChannel_id() {
    this.channel_id = null;
  }

  /** Returns true if field channel_id is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_id() {
    return this.channel_id != null;
  }

  public void setChannel_idIsSet(boolean value) {
    if (!value) {
      this.channel_id = null;
    }
  }

  public String getProgram_id() {
    return this.program_id;
  }

  public audio setProgram_id(String program_id) {
    this.program_id = program_id;
    return this;
  }

  public void unsetProgram_id() {
    this.program_id = null;
  }

  /** Returns true if field program_id is set (has been assigned a value) and false otherwise */
  public boolean isSetProgram_id() {
    return this.program_id != null;
  }

  public void setProgram_idIsSet(boolean value) {
    if (!value) {
      this.program_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_TYPE:
      if (value == null) {
        unsetSource_type();
      } else {
        setSource_type((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case ABLUM:
      if (value == null) {
        unsetAblum();
      } else {
        setAblum((String)value);
      }
      break;

    case ABLUM_URL:
      if (value == null) {
        unsetAblum_url();
      } else {
        setAblum_url((String)value);
      }
      break;

    case PLAY_URL:
      if (value == null) {
        unsetPlay_url();
      } else {
        setPlay_url((String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((String)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannel_id();
      } else {
        setChannel_id((String)value);
      }
      break;

    case PROGRAM_ID:
      if (value == null) {
        unsetProgram_id();
      } else {
        setProgram_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_TYPE:
      return getSource_type();

    case NAME:
      return getName();

    case AUTHOR:
      return getAuthor();

    case ABLUM:
      return getAblum();

    case ABLUM_URL:
      return getAblum_url();

    case PLAY_URL:
      return getPlay_url();

    case IMAGE:
      return getImage();

    case CHANNEL_ID:
      return getChannel_id();

    case PROGRAM_ID:
      return getProgram_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_TYPE:
      return isSetSource_type();
    case NAME:
      return isSetName();
    case AUTHOR:
      return isSetAuthor();
    case ABLUM:
      return isSetAblum();
    case ABLUM_URL:
      return isSetAblum_url();
    case PLAY_URL:
      return isSetPlay_url();
    case IMAGE:
      return isSetImage();
    case CHANNEL_ID:
      return isSetChannel_id();
    case PROGRAM_ID:
      return isSetProgram_id();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof audio)
      return this.equals((audio)that);
    return false;
  }

  public boolean equals(audio that) {
    if (that == null)
      return false;

    boolean this_present_source_type = true && this.isSetSource_type();
    boolean that_present_source_type = true && that.isSetSource_type();
    if (this_present_source_type || that_present_source_type) {
      if (!(this_present_source_type && that_present_source_type))
        return false;
      if (!this.source_type.equals(that.source_type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_ablum = true && this.isSetAblum();
    boolean that_present_ablum = true && that.isSetAblum();
    if (this_present_ablum || that_present_ablum) {
      if (!(this_present_ablum && that_present_ablum))
        return false;
      if (!this.ablum.equals(that.ablum))
        return false;
    }

    boolean this_present_ablum_url = true && this.isSetAblum_url();
    boolean that_present_ablum_url = true && that.isSetAblum_url();
    if (this_present_ablum_url || that_present_ablum_url) {
      if (!(this_present_ablum_url && that_present_ablum_url))
        return false;
      if (!this.ablum_url.equals(that.ablum_url))
        return false;
    }

    boolean this_present_play_url = true && this.isSetPlay_url();
    boolean that_present_play_url = true && that.isSetPlay_url();
    if (this_present_play_url || that_present_play_url) {
      if (!(this_present_play_url && that_present_play_url))
        return false;
      if (!this.play_url.equals(that.play_url))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    boolean this_present_channel_id = true && this.isSetChannel_id();
    boolean that_present_channel_id = true && that.isSetChannel_id();
    if (this_present_channel_id || that_present_channel_id) {
      if (!(this_present_channel_id && that_present_channel_id))
        return false;
      if (!this.channel_id.equals(that.channel_id))
        return false;
    }

    boolean this_present_program_id = true && this.isSetProgram_id();
    boolean that_present_program_id = true && that.isSetProgram_id();
    if (this_present_program_id || that_present_program_id) {
      if (!(this_present_program_id && that_present_program_id))
        return false;
      if (!this.program_id.equals(that.program_id))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(audio other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSource_type()).compareTo(other.isSetSource_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_type, other.source_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAblum()).compareTo(other.isSetAblum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAblum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ablum, other.ablum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAblum_url()).compareTo(other.isSetAblum_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAblum_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ablum_url, other.ablum_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlay_url()).compareTo(other.isSetPlay_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlay_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.play_url, other.play_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel_id()).compareTo(other.isSetChannel_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_id, other.channel_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgram_id()).compareTo(other.isSetProgram_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgram_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.program_id, other.program_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("audio(");
    boolean first = true;

    if (isSetSource_type()) {
      sb.append("source_type:");
      if (this.source_type == null) {
        sb.append("null");
      } else {
        sb.append(this.source_type);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetAblum()) {
      if (!first) sb.append(", ");
      sb.append("ablum:");
      if (this.ablum == null) {
        sb.append("null");
      } else {
        sb.append(this.ablum);
      }
      first = false;
    }
    if (isSetAblum_url()) {
      if (!first) sb.append(", ");
      sb.append("ablum_url:");
      if (this.ablum_url == null) {
        sb.append("null");
      } else {
        sb.append(this.ablum_url);
      }
      first = false;
    }
    if (isSetPlay_url()) {
      if (!first) sb.append(", ");
      sb.append("play_url:");
      if (this.play_url == null) {
        sb.append("null");
      } else {
        sb.append(this.play_url);
      }
      first = false;
    }
    if (isSetImage()) {
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        sb.append(this.image);
      }
      first = false;
    }
    if (isSetChannel_id()) {
      if (!first) sb.append(", ");
      sb.append("channel_id:");
      if (this.channel_id == null) {
        sb.append("null");
      } else {
        sb.append(this.channel_id);
      }
      first = false;
    }
    if (isSetProgram_id()) {
      if (!first) sb.append(", ");
      sb.append("program_id:");
      if (this.program_id == null) {
        sb.append("null");
      } else {
        sb.append(this.program_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class audioStandardSchemeFactory implements SchemeFactory {
    public audioStandardScheme getScheme() {
      return new audioStandardScheme();
    }
  }

  private static class audioStandardScheme extends StandardScheme<audio> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, audio struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source_type = iprot.readString();
              struct.setSource_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ABLUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ablum = iprot.readString();
              struct.setAblumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ABLUM_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ablum_url = iprot.readString();
              struct.setAblum_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.play_url = iprot.readString();
              struct.setPlay_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readString();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_id = iprot.readString();
              struct.setChannel_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.program_id = iprot.readString();
              struct.setProgram_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, audio struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.source_type != null) {
        if (struct.isSetSource_type()) {
          oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.source_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.author != null) {
        if (struct.isSetAuthor()) {
          oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
          oprot.writeString(struct.author);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ablum != null) {
        if (struct.isSetAblum()) {
          oprot.writeFieldBegin(ABLUM_FIELD_DESC);
          oprot.writeString(struct.ablum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ablum_url != null) {
        if (struct.isSetAblum_url()) {
          oprot.writeFieldBegin(ABLUM_URL_FIELD_DESC);
          oprot.writeString(struct.ablum_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.play_url != null) {
        if (struct.isSetPlay_url()) {
          oprot.writeFieldBegin(PLAY_URL_FIELD_DESC);
          oprot.writeString(struct.play_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.image != null) {
        if (struct.isSetImage()) {
          oprot.writeFieldBegin(IMAGE_FIELD_DESC);
          oprot.writeString(struct.image);
          oprot.writeFieldEnd();
        }
      }
      if (struct.channel_id != null) {
        if (struct.isSetChannel_id()) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channel_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.program_id != null) {
        if (struct.isSetProgram_id()) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.program_id);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class audioTupleSchemeFactory implements SchemeFactory {
    public audioTupleScheme getScheme() {
      return new audioTupleScheme();
    }
  }

  private static class audioTupleScheme extends TupleScheme<audio> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, audio struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSource_type()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetAblum()) {
        optionals.set(3);
      }
      if (struct.isSetAblum_url()) {
        optionals.set(4);
      }
      if (struct.isSetPlay_url()) {
        optionals.set(5);
      }
      if (struct.isSetImage()) {
        optionals.set(6);
      }
      if (struct.isSetChannel_id()) {
        optionals.set(7);
      }
      if (struct.isSetProgram_id()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetSource_type()) {
        oprot.writeString(struct.source_type);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetAblum()) {
        oprot.writeString(struct.ablum);
      }
      if (struct.isSetAblum_url()) {
        oprot.writeString(struct.ablum_url);
      }
      if (struct.isSetPlay_url()) {
        oprot.writeString(struct.play_url);
      }
      if (struct.isSetImage()) {
        oprot.writeString(struct.image);
      }
      if (struct.isSetChannel_id()) {
        oprot.writeString(struct.channel_id);
      }
      if (struct.isSetProgram_id()) {
        oprot.writeString(struct.program_id);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, audio struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.source_type = iprot.readString();
        struct.setSource_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ablum = iprot.readString();
        struct.setAblumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ablum_url = iprot.readString();
        struct.setAblum_urlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.play_url = iprot.readString();
        struct.setPlay_urlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.image = iprot.readString();
        struct.setImageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.channel_id = iprot.readString();
        struct.setChannel_idIsSet(true);
      }
      if (incoming.get(8)) {
        struct.program_id = iprot.readString();
        struct.setProgram_idIsSet(true);
      }
    }
  }

}

