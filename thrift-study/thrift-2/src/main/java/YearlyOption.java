/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class YearlyOption implements org.apache.thrift.TBase<YearlyOption, YearlyOption._Fields>, java.io.Serializable, Cloneable, Comparable<YearlyOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("YearlyOption");

  private static final org.apache.thrift.protocol.TField MONTH_OF_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("month_of_year", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DAY_OF_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("day_of_month", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WEEK_OF_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("week_of_month", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WEEK_OF_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("week_of_year", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DAY_OF_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("day_of_week", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new YearlyOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new YearlyOptionTupleSchemeFactory());
  }

  public int month_of_year; // optional
  public int day_of_month; // optional
  public int week_of_month; // optional
  public int week_of_year; // optional
  public int day_of_week; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MONTH_OF_YEAR((short)1, "month_of_year"),
    DAY_OF_MONTH((short)2, "day_of_month"),
    WEEK_OF_MONTH((short)3, "week_of_month"),
    WEEK_OF_YEAR((short)4, "week_of_year"),
    DAY_OF_WEEK((short)5, "day_of_week");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MONTH_OF_YEAR
          return MONTH_OF_YEAR;
        case 2: // DAY_OF_MONTH
          return DAY_OF_MONTH;
        case 3: // WEEK_OF_MONTH
          return WEEK_OF_MONTH;
        case 4: // WEEK_OF_YEAR
          return WEEK_OF_YEAR;
        case 5: // DAY_OF_WEEK
          return DAY_OF_WEEK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONTH_OF_YEAR_ISSET_ID = 0;
  private static final int __DAY_OF_MONTH_ISSET_ID = 1;
  private static final int __WEEK_OF_MONTH_ISSET_ID = 2;
  private static final int __WEEK_OF_YEAR_ISSET_ID = 3;
  private static final int __DAY_OF_WEEK_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MONTH_OF_YEAR,_Fields.DAY_OF_MONTH,_Fields.WEEK_OF_MONTH,_Fields.WEEK_OF_YEAR,_Fields.DAY_OF_WEEK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MONTH_OF_YEAR, new org.apache.thrift.meta_data.FieldMetaData("month_of_year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_OF_MONTH, new org.apache.thrift.meta_data.FieldMetaData("day_of_month", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEEK_OF_MONTH, new org.apache.thrift.meta_data.FieldMetaData("week_of_month", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEEK_OF_YEAR, new org.apache.thrift.meta_data.FieldMetaData("week_of_year", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY_OF_WEEK, new org.apache.thrift.meta_data.FieldMetaData("day_of_week", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(YearlyOption.class, metaDataMap);
  }

  public YearlyOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public YearlyOption(YearlyOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.month_of_year = other.month_of_year;
    this.day_of_month = other.day_of_month;
    this.week_of_month = other.week_of_month;
    this.week_of_year = other.week_of_year;
    this.day_of_week = other.day_of_week;
  }

  public YearlyOption deepCopy() {
    return new YearlyOption(this);
  }

  
  public void  clear(){
    setMonth_of_yearIsSet(false);
    this.month_of_year = 0;
    setDay_of_monthIsSet(false);
    this.day_of_month = 0;
    setWeek_of_monthIsSet(false);
    this.week_of_month = 0;
    setWeek_of_yearIsSet(false);
    this.week_of_year = 0;
    setDay_of_weekIsSet(false);
    this.day_of_week = 0;
  }

  public int getMonth_of_year() {
    return this.month_of_year;
  }

  public YearlyOption setMonth_of_year(int month_of_year) {
    this.month_of_year = month_of_year;
    setMonth_of_yearIsSet(true);
    return this;
  }

  public void unsetMonth_of_year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_OF_YEAR_ISSET_ID);
  }

  /** Returns true if field month_of_year is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth_of_year() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_OF_YEAR_ISSET_ID);
  }

  public void setMonth_of_yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_OF_YEAR_ISSET_ID, value);
  }

  public int getDay_of_month() {
    return this.day_of_month;
  }

  public YearlyOption setDay_of_month(int day_of_month) {
    this.day_of_month = day_of_month;
    setDay_of_monthIsSet(true);
    return this;
  }

  public void unsetDay_of_month() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_OF_MONTH_ISSET_ID);
  }

  /** Returns true if field day_of_month is set (has been assigned a value) and false otherwise */
  public boolean isSetDay_of_month() {
    return EncodingUtils.testBit(__isset_bitfield, __DAY_OF_MONTH_ISSET_ID);
  }

  public void setDay_of_monthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_OF_MONTH_ISSET_ID, value);
  }

  public int getWeek_of_month() {
    return this.week_of_month;
  }

  public YearlyOption setWeek_of_month(int week_of_month) {
    this.week_of_month = week_of_month;
    setWeek_of_monthIsSet(true);
    return this;
  }

  public void unsetWeek_of_month() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEK_OF_MONTH_ISSET_ID);
  }

  /** Returns true if field week_of_month is set (has been assigned a value) and false otherwise */
  public boolean isSetWeek_of_month() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEK_OF_MONTH_ISSET_ID);
  }

  public void setWeek_of_monthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEK_OF_MONTH_ISSET_ID, value);
  }

  public int getWeek_of_year() {
    return this.week_of_year;
  }

  public YearlyOption setWeek_of_year(int week_of_year) {
    this.week_of_year = week_of_year;
    setWeek_of_yearIsSet(true);
    return this;
  }

  public void unsetWeek_of_year() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEK_OF_YEAR_ISSET_ID);
  }

  /** Returns true if field week_of_year is set (has been assigned a value) and false otherwise */
  public boolean isSetWeek_of_year() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEK_OF_YEAR_ISSET_ID);
  }

  public void setWeek_of_yearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEK_OF_YEAR_ISSET_ID, value);
  }

  public int getDay_of_week() {
    return this.day_of_week;
  }

  public YearlyOption setDay_of_week(int day_of_week) {
    this.day_of_week = day_of_week;
    setDay_of_weekIsSet(true);
    return this;
  }

  public void unsetDay_of_week() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_OF_WEEK_ISSET_ID);
  }

  /** Returns true if field day_of_week is set (has been assigned a value) and false otherwise */
  public boolean isSetDay_of_week() {
    return EncodingUtils.testBit(__isset_bitfield, __DAY_OF_WEEK_ISSET_ID);
  }

  public void setDay_of_weekIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_OF_WEEK_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MONTH_OF_YEAR:
      if (value == null) {
        unsetMonth_of_year();
      } else {
        setMonth_of_year((Integer)value);
      }
      break;

    case DAY_OF_MONTH:
      if (value == null) {
        unsetDay_of_month();
      } else {
        setDay_of_month((Integer)value);
      }
      break;

    case WEEK_OF_MONTH:
      if (value == null) {
        unsetWeek_of_month();
      } else {
        setWeek_of_month((Integer)value);
      }
      break;

    case WEEK_OF_YEAR:
      if (value == null) {
        unsetWeek_of_year();
      } else {
        setWeek_of_year((Integer)value);
      }
      break;

    case DAY_OF_WEEK:
      if (value == null) {
        unsetDay_of_week();
      } else {
        setDay_of_week((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MONTH_OF_YEAR:
      return Integer.valueOf(getMonth_of_year());

    case DAY_OF_MONTH:
      return Integer.valueOf(getDay_of_month());

    case WEEK_OF_MONTH:
      return Integer.valueOf(getWeek_of_month());

    case WEEK_OF_YEAR:
      return Integer.valueOf(getWeek_of_year());

    case DAY_OF_WEEK:
      return Integer.valueOf(getDay_of_week());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MONTH_OF_YEAR:
      return isSetMonth_of_year();
    case DAY_OF_MONTH:
      return isSetDay_of_month();
    case WEEK_OF_MONTH:
      return isSetWeek_of_month();
    case WEEK_OF_YEAR:
      return isSetWeek_of_year();
    case DAY_OF_WEEK:
      return isSetDay_of_week();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof YearlyOption)
      return this.equals((YearlyOption)that);
    return false;
  }

  public boolean equals(YearlyOption that) {
    if (that == null)
      return false;

    boolean this_present_month_of_year = true && this.isSetMonth_of_year();
    boolean that_present_month_of_year = true && that.isSetMonth_of_year();
    if (this_present_month_of_year || that_present_month_of_year) {
      if (!(this_present_month_of_year && that_present_month_of_year))
        return false;
      if (this.month_of_year != that.month_of_year)
        return false;
    }

    boolean this_present_day_of_month = true && this.isSetDay_of_month();
    boolean that_present_day_of_month = true && that.isSetDay_of_month();
    if (this_present_day_of_month || that_present_day_of_month) {
      if (!(this_present_day_of_month && that_present_day_of_month))
        return false;
      if (this.day_of_month != that.day_of_month)
        return false;
    }

    boolean this_present_week_of_month = true && this.isSetWeek_of_month();
    boolean that_present_week_of_month = true && that.isSetWeek_of_month();
    if (this_present_week_of_month || that_present_week_of_month) {
      if (!(this_present_week_of_month && that_present_week_of_month))
        return false;
      if (this.week_of_month != that.week_of_month)
        return false;
    }

    boolean this_present_week_of_year = true && this.isSetWeek_of_year();
    boolean that_present_week_of_year = true && that.isSetWeek_of_year();
    if (this_present_week_of_year || that_present_week_of_year) {
      if (!(this_present_week_of_year && that_present_week_of_year))
        return false;
      if (this.week_of_year != that.week_of_year)
        return false;
    }

    boolean this_present_day_of_week = true && this.isSetDay_of_week();
    boolean that_present_day_of_week = true && that.isSetDay_of_week();
    if (this_present_day_of_week || that_present_day_of_week) {
      if (!(this_present_day_of_week && that_present_day_of_week))
        return false;
      if (this.day_of_week != that.day_of_week)
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(YearlyOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMonth_of_year()).compareTo(other.isSetMonth_of_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth_of_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month_of_year, other.month_of_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay_of_month()).compareTo(other.isSetDay_of_month());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay_of_month()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_of_month, other.day_of_month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeek_of_month()).compareTo(other.isSetWeek_of_month());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeek_of_month()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.week_of_month, other.week_of_month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeek_of_year()).compareTo(other.isSetWeek_of_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeek_of_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.week_of_year, other.week_of_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay_of_week()).compareTo(other.isSetDay_of_week());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay_of_week()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_of_week, other.day_of_week);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("YearlyOption(");
    boolean first = true;

    if (isSetMonth_of_year()) {
      sb.append("month_of_year:");
      sb.append(this.month_of_year);
      first = false;
    }
    if (isSetDay_of_month()) {
      if (!first) sb.append(", ");
      sb.append("day_of_month:");
      sb.append(this.day_of_month);
      first = false;
    }
    if (isSetWeek_of_month()) {
      if (!first) sb.append(", ");
      sb.append("week_of_month:");
      sb.append(this.week_of_month);
      first = false;
    }
    if (isSetWeek_of_year()) {
      if (!first) sb.append(", ");
      sb.append("week_of_year:");
      sb.append(this.week_of_year);
      first = false;
    }
    if (isSetDay_of_week()) {
      if (!first) sb.append(", ");
      sb.append("day_of_week:");
      sb.append(this.day_of_week);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class YearlyOptionStandardSchemeFactory implements SchemeFactory {
    public YearlyOptionStandardScheme getScheme() {
      return new YearlyOptionStandardScheme();
    }
  }

  private static class YearlyOptionStandardScheme extends StandardScheme<YearlyOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, YearlyOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MONTH_OF_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.month_of_year = iprot.readI32();
              struct.setMonth_of_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAY_OF_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day_of_month = iprot.readI32();
              struct.setDay_of_monthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEEK_OF_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.week_of_month = iprot.readI32();
              struct.setWeek_of_monthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WEEK_OF_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.week_of_year = iprot.readI32();
              struct.setWeek_of_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DAY_OF_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day_of_week = iprot.readI32();
              struct.setDay_of_weekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, YearlyOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMonth_of_year()) {
        oprot.writeFieldBegin(MONTH_OF_YEAR_FIELD_DESC);
        oprot.writeI32(struct.month_of_year);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDay_of_month()) {
        oprot.writeFieldBegin(DAY_OF_MONTH_FIELD_DESC);
        oprot.writeI32(struct.day_of_month);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeek_of_month()) {
        oprot.writeFieldBegin(WEEK_OF_MONTH_FIELD_DESC);
        oprot.writeI32(struct.week_of_month);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeek_of_year()) {
        oprot.writeFieldBegin(WEEK_OF_YEAR_FIELD_DESC);
        oprot.writeI32(struct.week_of_year);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDay_of_week()) {
        oprot.writeFieldBegin(DAY_OF_WEEK_FIELD_DESC);
        oprot.writeI32(struct.day_of_week);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class YearlyOptionTupleSchemeFactory implements SchemeFactory {
    public YearlyOptionTupleScheme getScheme() {
      return new YearlyOptionTupleScheme();
    }
  }

  private static class YearlyOptionTupleScheme extends TupleScheme<YearlyOption> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, YearlyOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMonth_of_year()) {
        optionals.set(0);
      }
      if (struct.isSetDay_of_month()) {
        optionals.set(1);
      }
      if (struct.isSetWeek_of_month()) {
        optionals.set(2);
      }
      if (struct.isSetWeek_of_year()) {
        optionals.set(3);
      }
      if (struct.isSetDay_of_week()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMonth_of_year()) {
        oprot.writeI32(struct.month_of_year);
      }
      if (struct.isSetDay_of_month()) {
        oprot.writeI32(struct.day_of_month);
      }
      if (struct.isSetWeek_of_month()) {
        oprot.writeI32(struct.week_of_month);
      }
      if (struct.isSetWeek_of_year()) {
        oprot.writeI32(struct.week_of_year);
      }
      if (struct.isSetDay_of_week()) {
        oprot.writeI32(struct.day_of_week);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, YearlyOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.month_of_year = iprot.readI32();
        struct.setMonth_of_yearIsSet(true);
      }
      if (incoming.get(1)) {
        struct.day_of_month = iprot.readI32();
        struct.setDay_of_monthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.week_of_month = iprot.readI32();
        struct.setWeek_of_monthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.week_of_year = iprot.readI32();
        struct.setWeek_of_yearIsSet(true);
      }
      if (incoming.get(4)) {
        struct.day_of_week = iprot.readI32();
        struct.setDay_of_weekIsSet(true);
      }
    }
  }

}

