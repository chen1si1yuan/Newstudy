/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class UserContext implements org.apache.thrift.TBase<UserContext, UserContext._Fields>, java.io.Serializable, Cloneable, Comparable<UserContext> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserContext");

  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("user_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField USER_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("user_context", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REMIND_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("remind_context", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField INTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("intents", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserContextTupleSchemeFactory());
  }

  public UserInfo user_info; // optional
  public List<UserContextUnit> user_context; // optional
  public RemindContext remind_context; // optional
  public Intents intents; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_INFO((short)1, "user_info"),
    USER_CONTEXT((short)2, "user_context"),
    REMIND_CONTEXT((short)3, "remind_context"),
    INTENTS((short)4, "intents");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_INFO
          return USER_INFO;
        case 2: // USER_CONTEXT
          return USER_CONTEXT;
        case 3: // REMIND_CONTEXT
          return REMIND_CONTEXT;
        case 4: // INTENTS
          return INTENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_INFO,_Fields.USER_CONTEXT,_Fields.REMIND_CONTEXT,_Fields.INTENTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("user_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserInfo.class)));
    tmpMap.put(_Fields.USER_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("user_context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserContextUnit.class))));
    tmpMap.put(_Fields.REMIND_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("remind_context", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemindContext.class)));
    tmpMap.put(_Fields.INTENTS, new org.apache.thrift.meta_data.FieldMetaData("intents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Intents.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserContext.class, metaDataMap);
  }

  public UserContext() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserContext(UserContext other) {
    if (other.isSetUser_info()) {
      this.user_info = new UserInfo(other.user_info);
    }
    if (other.isSetUser_context()) {
      List<UserContextUnit> __this__user_context = new ArrayList<UserContextUnit>(other.user_context.size());
      for (UserContextUnit other_element : other.user_context) {
        __this__user_context.add(new UserContextUnit(other_element));
      }
      this.user_context = __this__user_context;
    }
    if (other.isSetRemind_context()) {
      this.remind_context = new RemindContext(other.remind_context);
    }
    if (other.isSetIntents()) {
      this.intents = new Intents(other.intents);
    }
  }

  public UserContext deepCopy() {
    return new UserContext(this);
  }

  
  public void clear() {
    this.user_info = null;
    this.user_context = null;
    this.remind_context = null;
    this.intents = null;
  }

  public UserInfo getUser_info() {
    return this.user_info;
  }

  public UserContext setUser_info(UserInfo user_info) {
    this.user_info = user_info;
    return this;
  }

  public void unsetUser_info() {
    this.user_info = null;
  }

  /** Returns true if field user_info is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_info() {
    return this.user_info != null;
  }

  public void setUser_infoIsSet(boolean value) {
    if (!value) {
      this.user_info = null;
    }
  }

  public int getUser_contextSize() {
    return (this.user_context == null) ? 0 : this.user_context.size();
  }

  public java.util.Iterator<UserContextUnit> getUser_contextIterator() {
    return (this.user_context == null) ? null : this.user_context.iterator();
  }

  public void addToUser_context(UserContextUnit elem) {
    if (this.user_context == null) {
      this.user_context = new ArrayList<UserContextUnit>();
    }
    this.user_context.add(elem);
  }

  public List<UserContextUnit> getUser_context() {
    return this.user_context;
  }

  public UserContext setUser_context(List<UserContextUnit> user_context) {
    this.user_context = user_context;
    return this;
  }

  public void unsetUser_context() {
    this.user_context = null;
  }

  /** Returns true if field user_context is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_context() {
    return this.user_context != null;
  }

  public void setUser_contextIsSet(boolean value) {
    if (!value) {
      this.user_context = null;
    }
  }

  public RemindContext getRemind_context() {
    return this.remind_context;
  }

  public UserContext setRemind_context(RemindContext remind_context) {
    this.remind_context = remind_context;
    return this;
  }

  public void unsetRemind_context() {
    this.remind_context = null;
  }

  /** Returns true if field remind_context is set (has been assigned a value) and false otherwise */
  public boolean isSetRemind_context() {
    return this.remind_context != null;
  }

  public void setRemind_contextIsSet(boolean value) {
    if (!value) {
      this.remind_context = null;
    }
  }

  public Intents getIntents() {
    return this.intents;
  }

  public UserContext setIntents(Intents intents) {
    this.intents = intents;
    return this;
  }

  public void unsetIntents() {
    this.intents = null;
  }

  /** Returns true if field intents is set (has been assigned a value) and false otherwise */
  public boolean isSetIntents() {
    return this.intents != null;
  }

  public void setIntentsIsSet(boolean value) {
    if (!value) {
      this.intents = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_INFO:
      if (value == null) {
        unsetUser_info();
      } else {
        setUser_info((UserInfo)value);
      }
      break;

    case USER_CONTEXT:
      if (value == null) {
        unsetUser_context();
      } else {
        setUser_context((List<UserContextUnit>)value);
      }
      break;

    case REMIND_CONTEXT:
      if (value == null) {
        unsetRemind_context();
      } else {
        setRemind_context((RemindContext)value);
      }
      break;

    case INTENTS:
      if (value == null) {
        unsetIntents();
      } else {
        setIntents((Intents)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_INFO:
      return getUser_info();

    case USER_CONTEXT:
      return getUser_context();

    case REMIND_CONTEXT:
      return getRemind_context();

    case INTENTS:
      return getIntents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_INFO:
      return isSetUser_info();
    case USER_CONTEXT:
      return isSetUser_context();
    case REMIND_CONTEXT:
      return isSetRemind_context();
    case INTENTS:
      return isSetIntents();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserContext)
      return this.equals((UserContext)that);
    return false;
  }

  public boolean equals(UserContext that) {
    if (that == null)
      return false;

    boolean this_present_user_info = true && this.isSetUser_info();
    boolean that_present_user_info = true && that.isSetUser_info();
    if (this_present_user_info || that_present_user_info) {
      if (!(this_present_user_info && that_present_user_info))
        return false;
      if (!this.user_info.equals(that.user_info))
        return false;
    }

    boolean this_present_user_context = true && this.isSetUser_context();
    boolean that_present_user_context = true && that.isSetUser_context();
    if (this_present_user_context || that_present_user_context) {
      if (!(this_present_user_context && that_present_user_context))
        return false;
      if (!this.user_context.equals(that.user_context))
        return false;
    }

    boolean this_present_remind_context = true && this.isSetRemind_context();
    boolean that_present_remind_context = true && that.isSetRemind_context();
    if (this_present_remind_context || that_present_remind_context) {
      if (!(this_present_remind_context && that_present_remind_context))
        return false;
      if (!this.remind_context.equals(that.remind_context))
        return false;
    }

    boolean this_present_intents = true && this.isSetIntents();
    boolean that_present_intents = true && that.isSetIntents();
    if (this_present_intents || that_present_intents) {
      if (!(this_present_intents && that_present_intents))
        return false;
      if (!this.intents.equals(that.intents))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(UserContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser_info()).compareTo(other.isSetUser_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_info, other.user_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_context()).compareTo(other.isSetUser_context());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_context()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_context, other.user_context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemind_context()).compareTo(other.isSetRemind_context());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemind_context()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remind_context, other.remind_context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntents()).compareTo(other.isSetIntents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intents, other.intents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("UserContext(");
    boolean first = true;

    if (isSetUser_info()) {
      sb.append("user_info:");
      if (this.user_info == null) {
        sb.append("null");
      } else {
        sb.append(this.user_info);
      }
      first = false;
    }
    if (isSetUser_context()) {
      if (!first) sb.append(", ");
      sb.append("user_context:");
      if (this.user_context == null) {
        sb.append("null");
      } else {
        sb.append(this.user_context);
      }
      first = false;
    }
    if (isSetRemind_context()) {
      if (!first) sb.append(", ");
      sb.append("remind_context:");
      if (this.remind_context == null) {
        sb.append("null");
      } else {
        sb.append(this.remind_context);
      }
      first = false;
    }
    if (isSetIntents()) {
      if (!first) sb.append(", ");
      sb.append("intents:");
      if (this.intents == null) {
        sb.append("null");
      } else {
        sb.append(this.intents);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user_info != null) {
      user_info.validate();
    }
    if (remind_context != null) {
      remind_context.validate();
    }
    if (intents != null) {
      intents.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserContextStandardSchemeFactory implements SchemeFactory {
    public UserContextStandardScheme getScheme() {
      return new UserContextStandardScheme();
    }
  }

  private static class UserContextStandardScheme extends StandardScheme<UserContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_info = new UserInfo();
              struct.user_info.read(iprot);
              struct.setUser_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list400 = iprot.readListBegin();
                struct.user_context = new ArrayList<UserContextUnit>(_list400.size);
                for (int _i401 = 0; _i401 < _list400.size; ++_i401)
                {
                  UserContextUnit _elem402;
                  _elem402 = new UserContextUnit();
                  _elem402.read(iprot);
                  struct.user_context.add(_elem402);
                }
                iprot.readListEnd();
              }
              struct.setUser_contextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMIND_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.remind_context = new RemindContext();
              struct.remind_context.read(iprot);
              struct.setRemind_contextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.intents = new Intents();
              struct.intents.read(iprot);
              struct.setIntentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_info != null) {
        if (struct.isSetUser_info()) {
          oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
          struct.user_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user_context != null) {
        if (struct.isSetUser_context()) {
          oprot.writeFieldBegin(USER_CONTEXT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.user_context.size()));
            for (UserContextUnit _iter403 : struct.user_context)
            {
              _iter403.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.remind_context != null) {
        if (struct.isSetRemind_context()) {
          oprot.writeFieldBegin(REMIND_CONTEXT_FIELD_DESC);
          struct.remind_context.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.intents != null) {
        if (struct.isSetIntents()) {
          oprot.writeFieldBegin(INTENTS_FIELD_DESC);
          struct.intents.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserContextTupleSchemeFactory implements SchemeFactory {
    public UserContextTupleScheme getScheme() {
      return new UserContextTupleScheme();
    }
  }

  private static class UserContextTupleScheme extends TupleScheme<UserContext> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, UserContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser_info()) {
        optionals.set(0);
      }
      if (struct.isSetUser_context()) {
        optionals.set(1);
      }
      if (struct.isSetRemind_context()) {
        optionals.set(2);
      }
      if (struct.isSetIntents()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUser_info()) {
        struct.user_info.write(oprot);
      }
      if (struct.isSetUser_context()) {
        {
          oprot.writeI32(struct.user_context.size());
          for (UserContextUnit _iter404 : struct.user_context)
          {
            _iter404.write(oprot);
          }
        }
      }
      if (struct.isSetRemind_context()) {
        struct.remind_context.write(oprot);
      }
      if (struct.isSetIntents()) {
        struct.intents.write(oprot);
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, UserContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.user_info = new UserInfo();
        struct.user_info.read(iprot);
        struct.setUser_infoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list405 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.user_context = new ArrayList<UserContextUnit>(_list405.size);
          for (int _i406 = 0; _i406 < _list405.size; ++_i406)
          {
            UserContextUnit _elem407;
            _elem407 = new UserContextUnit();
            _elem407.read(iprot);
            struct.user_context.add(_elem407);
          }
        }
        struct.setUser_contextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remind_context = new RemindContext();
        struct.remind_context.read(iprot);
        struct.setRemind_contextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intents = new Intents();
        struct.intents.read(iprot);
        struct.setIntentsIsSet(true);
      }
    }
  }

}

