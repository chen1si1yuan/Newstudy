/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-7-28")
public class ControlParams implements org.apache.thrift.TBase<ControlParams, ControlParams._Fields>, java.io.Serializable, Cloneable, Comparable<ControlParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ControlParams");

  private static final org.apache.thrift.protocol.TField IS_SAY_HELLO_FIELD_DESC = new org.apache.thrift.protocol.TField("is_say_hello", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField QP_MAX_POST_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("qp_max_post_num", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QP_MAX_REPLY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("qp_max_reply_num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField QP_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("qp_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField QR_MAX_REPLY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("qr_max_reply_num", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField QR_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("qr_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField QR_THRESHOLD_RESORT_FIELD_DESC = new org.apache.thrift.protocol.TField("qr_threshold_resort", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ANTI_VULGAR_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("anti_vulgar_reply", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STRICT_PORN_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_porn_reply", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField QUERY_PORN_CON_FIELD_DESC = new org.apache.thrift.protocol.TField("query_porn_con", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField REPLY_PORN_CON_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_porn_con", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SERVICE_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("service_priority", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField IS_DEBUG_FIELD_DESC = new org.apache.thrift.protocol.TField("is_debug", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField REPLY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("reply_num", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("request_type", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.MAP, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ControlParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ControlParamsTupleSchemeFactory());
  }

  public boolean is_say_hello; // optional
  public int qp_max_post_num; // optional
  public int qp_max_reply_num; // optional
  public double qp_threshold; // optional
  public int qr_max_reply_num; // optional
  public double qr_threshold; // optional
  public double qr_threshold_resort; // optional
  public boolean anti_vulgar_reply; // optional
  public boolean strict_porn_reply; // optional
  public QueryPornCondition query_porn_con; // optional
  public ReplyPornCondition reply_porn_con; // optional
  public Map<ServiceName,Integer> service_priority; // required
  public boolean is_debug; // optional
  public int reply_num; // optional
  /**
   * 
   * @see RequestType
   */
  public RequestType request_type; // optional
  public Map<String,String> custom; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_SAY_HELLO((short)1, "is_say_hello"),
    QP_MAX_POST_NUM((short)2, "qp_max_post_num"),
    QP_MAX_REPLY_NUM((short)3, "qp_max_reply_num"),
    QP_THRESHOLD((short)4, "qp_threshold"),
    QR_MAX_REPLY_NUM((short)5, "qr_max_reply_num"),
    QR_THRESHOLD((short)6, "qr_threshold"),
    QR_THRESHOLD_RESORT((short)7, "qr_threshold_resort"),
    ANTI_VULGAR_REPLY((short)8, "anti_vulgar_reply"),
    STRICT_PORN_REPLY((short)9, "strict_porn_reply"),
    QUERY_PORN_CON((short)10, "query_porn_con"),
    REPLY_PORN_CON((short)11, "reply_porn_con"),
    SERVICE_PRIORITY((short)12, "service_priority"),
    IS_DEBUG((short)13, "is_debug"),
    REPLY_NUM((short)14, "reply_num"),
    /**
     * 
     * @see RequestType
     */
    REQUEST_TYPE((short)15, "request_type"),
    CUSTOM((short)16, "custom");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_SAY_HELLO
          return IS_SAY_HELLO;
        case 2: // QP_MAX_POST_NUM
          return QP_MAX_POST_NUM;
        case 3: // QP_MAX_REPLY_NUM
          return QP_MAX_REPLY_NUM;
        case 4: // QP_THRESHOLD
          return QP_THRESHOLD;
        case 5: // QR_MAX_REPLY_NUM
          return QR_MAX_REPLY_NUM;
        case 6: // QR_THRESHOLD
          return QR_THRESHOLD;
        case 7: // QR_THRESHOLD_RESORT
          return QR_THRESHOLD_RESORT;
        case 8: // ANTI_VULGAR_REPLY
          return ANTI_VULGAR_REPLY;
        case 9: // STRICT_PORN_REPLY
          return STRICT_PORN_REPLY;
        case 10: // QUERY_PORN_CON
          return QUERY_PORN_CON;
        case 11: // REPLY_PORN_CON
          return REPLY_PORN_CON;
        case 12: // SERVICE_PRIORITY
          return SERVICE_PRIORITY;
        case 13: // IS_DEBUG
          return IS_DEBUG;
        case 14: // REPLY_NUM
          return REPLY_NUM;
        case 15: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 16: // CUSTOM
          return CUSTOM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_SAY_HELLO_ISSET_ID = 0;
  private static final int __QP_MAX_POST_NUM_ISSET_ID = 1;
  private static final int __QP_MAX_REPLY_NUM_ISSET_ID = 2;
  private static final int __QP_THRESHOLD_ISSET_ID = 3;
  private static final int __QR_MAX_REPLY_NUM_ISSET_ID = 4;
  private static final int __QR_THRESHOLD_ISSET_ID = 5;
  private static final int __QR_THRESHOLD_RESORT_ISSET_ID = 6;
  private static final int __ANTI_VULGAR_REPLY_ISSET_ID = 7;
  private static final int __STRICT_PORN_REPLY_ISSET_ID = 8;
  private static final int __IS_DEBUG_ISSET_ID = 9;
  private static final int __REPLY_NUM_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_SAY_HELLO,_Fields.QP_MAX_POST_NUM,_Fields.QP_MAX_REPLY_NUM,_Fields.QP_THRESHOLD,_Fields.QR_MAX_REPLY_NUM,_Fields.QR_THRESHOLD,_Fields.QR_THRESHOLD_RESORT,_Fields.ANTI_VULGAR_REPLY,_Fields.STRICT_PORN_REPLY,_Fields.QUERY_PORN_CON,_Fields.REPLY_PORN_CON,_Fields.IS_DEBUG,_Fields.REPLY_NUM,_Fields.REQUEST_TYPE,_Fields.CUSTOM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_SAY_HELLO, new org.apache.thrift.meta_data.FieldMetaData("is_say_hello", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QP_MAX_POST_NUM, new org.apache.thrift.meta_data.FieldMetaData("qp_max_post_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QP_MAX_REPLY_NUM, new org.apache.thrift.meta_data.FieldMetaData("qp_max_reply_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QP_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("qp_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QR_MAX_REPLY_NUM, new org.apache.thrift.meta_data.FieldMetaData("qr_max_reply_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QR_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("qr_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QR_THRESHOLD_RESORT, new org.apache.thrift.meta_data.FieldMetaData("qr_threshold_resort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ANTI_VULGAR_REPLY, new org.apache.thrift.meta_data.FieldMetaData("anti_vulgar_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRICT_PORN_REPLY, new org.apache.thrift.meta_data.FieldMetaData("strict_porn_reply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_PORN_CON, new org.apache.thrift.meta_data.FieldMetaData("query_porn_con", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryPornCondition.class)));
    tmpMap.put(_Fields.REPLY_PORN_CON, new org.apache.thrift.meta_data.FieldMetaData("reply_porn_con", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReplyPornCondition.class)));
    tmpMap.put(_Fields.SERVICE_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("service_priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ServiceName.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_DEBUG, new org.apache.thrift.meta_data.FieldMetaData("is_debug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLY_NUM, new org.apache.thrift.meta_data.FieldMetaData("reply_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("request_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RequestType.class)));
    tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ControlParams.class, metaDataMap);
  }

  public ControlParams() {
    this.is_say_hello = false;

    this.qp_max_post_num = 20;

    this.qp_max_reply_num = 200;

    this.qp_threshold = 0.7;

    this.qr_max_reply_num = 10;

    this.qr_threshold = 0.89;

    this.qr_threshold_resort = 0.9;

    this.anti_vulgar_reply = true;

    this.strict_porn_reply = false;

    this.is_debug = false;

    this.request_type = RequestType.DIALOG;

  }

  public ControlParams(
    Map<ServiceName,Integer> service_priority)
  {
    this();
    this.service_priority = service_priority;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ControlParams(ControlParams other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_say_hello = other.is_say_hello;
    this.qp_max_post_num = other.qp_max_post_num;
    this.qp_max_reply_num = other.qp_max_reply_num;
    this.qp_threshold = other.qp_threshold;
    this.qr_max_reply_num = other.qr_max_reply_num;
    this.qr_threshold = other.qr_threshold;
    this.qr_threshold_resort = other.qr_threshold_resort;
    this.anti_vulgar_reply = other.anti_vulgar_reply;
    this.strict_porn_reply = other.strict_porn_reply;
    if (other.isSetQuery_porn_con()) {
      this.query_porn_con = new QueryPornCondition(other.query_porn_con);
    }
    if (other.isSetReply_porn_con()) {
      this.reply_porn_con = new ReplyPornCondition(other.reply_porn_con);
    }
    if (other.isSetService_priority()) {
      Map<ServiceName,Integer> __this__service_priority = new HashMap<ServiceName,Integer>(other.service_priority.size());
      for (Map.Entry<ServiceName, Integer> other_element : other.service_priority.entrySet()) {

        ServiceName other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        ServiceName __this__service_priority_copy_key = other_element_key;

        Integer __this__service_priority_copy_value = other_element_value;

        __this__service_priority.put(__this__service_priority_copy_key, __this__service_priority_copy_value);
      }
      this.service_priority = __this__service_priority;
    }
    this.is_debug = other.is_debug;
    this.reply_num = other.reply_num;
    if (other.isSetRequest_type()) {
      this.request_type = other.request_type;
    }
    if (other.isSetCustom()) {
      Map<String,String> __this__custom = new HashMap<String,String>(other.custom);
      this.custom = __this__custom;
    }
  }

  public ControlParams deepCopy() {
    return new ControlParams(this);
  }

  
  public void clear() {
    this.is_say_hello = false;

    this.qp_max_post_num = 20;

    this.qp_max_reply_num = 200;

    this.qp_threshold = 0.7;

    this.qr_max_reply_num = 10;

    this.qr_threshold = 0.89;

    this.qr_threshold_resort = 0.9;

    this.anti_vulgar_reply = true;

    this.strict_porn_reply = false;

    this.query_porn_con = null;
    this.reply_porn_con = null;
    this.service_priority = null;
    this.is_debug = false;

    setReply_numIsSet(false);
    this.reply_num = 0;
    this.request_type = RequestType.DIALOG;

    this.custom = null;
  }

  public boolean isIs_say_hello() {
    return this.is_say_hello;
  }

  public ControlParams setIs_say_hello(boolean is_say_hello) {
    this.is_say_hello = is_say_hello;
    setIs_say_helloIsSet(true);
    return this;
  }

  public void unsetIs_say_hello() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID);
  }

  /** Returns true if field is_say_hello is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_say_hello() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID);
  }

  public void setIs_say_helloIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_SAY_HELLO_ISSET_ID, value);
  }

  public int getQp_max_post_num() {
    return this.qp_max_post_num;
  }

  public ControlParams setQp_max_post_num(int qp_max_post_num) {
    this.qp_max_post_num = qp_max_post_num;
    setQp_max_post_numIsSet(true);
    return this;
  }

  public void unsetQp_max_post_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QP_MAX_POST_NUM_ISSET_ID);
  }

  /** Returns true if field qp_max_post_num is set (has been assigned a value) and false otherwise */
  public boolean isSetQp_max_post_num() {
    return EncodingUtils.testBit(__isset_bitfield, __QP_MAX_POST_NUM_ISSET_ID);
  }

  public void setQp_max_post_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QP_MAX_POST_NUM_ISSET_ID, value);
  }

  public int getQp_max_reply_num() {
    return this.qp_max_reply_num;
  }

  public ControlParams setQp_max_reply_num(int qp_max_reply_num) {
    this.qp_max_reply_num = qp_max_reply_num;
    setQp_max_reply_numIsSet(true);
    return this;
  }

  public void unsetQp_max_reply_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QP_MAX_REPLY_NUM_ISSET_ID);
  }

  /** Returns true if field qp_max_reply_num is set (has been assigned a value) and false otherwise */
  public boolean isSetQp_max_reply_num() {
    return EncodingUtils.testBit(__isset_bitfield, __QP_MAX_REPLY_NUM_ISSET_ID);
  }

  public void setQp_max_reply_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QP_MAX_REPLY_NUM_ISSET_ID, value);
  }

  public double getQp_threshold() {
    return this.qp_threshold;
  }

  public ControlParams setQp_threshold(double qp_threshold) {
    this.qp_threshold = qp_threshold;
    setQp_thresholdIsSet(true);
    return this;
  }

  public void unsetQp_threshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QP_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field qp_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetQp_threshold() {
    return EncodingUtils.testBit(__isset_bitfield, __QP_THRESHOLD_ISSET_ID);
  }

  public void setQp_thresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QP_THRESHOLD_ISSET_ID, value);
  }

  public int getQr_max_reply_num() {
    return this.qr_max_reply_num;
  }

  public ControlParams setQr_max_reply_num(int qr_max_reply_num) {
    this.qr_max_reply_num = qr_max_reply_num;
    setQr_max_reply_numIsSet(true);
    return this;
  }

  public void unsetQr_max_reply_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QR_MAX_REPLY_NUM_ISSET_ID);
  }

  /** Returns true if field qr_max_reply_num is set (has been assigned a value) and false otherwise */
  public boolean isSetQr_max_reply_num() {
    return EncodingUtils.testBit(__isset_bitfield, __QR_MAX_REPLY_NUM_ISSET_ID);
  }

  public void setQr_max_reply_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QR_MAX_REPLY_NUM_ISSET_ID, value);
  }

  public double getQr_threshold() {
    return this.qr_threshold;
  }

  public ControlParams setQr_threshold(double qr_threshold) {
    this.qr_threshold = qr_threshold;
    setQr_thresholdIsSet(true);
    return this;
  }

  public void unsetQr_threshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QR_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field qr_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetQr_threshold() {
    return EncodingUtils.testBit(__isset_bitfield, __QR_THRESHOLD_ISSET_ID);
  }

  public void setQr_thresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QR_THRESHOLD_ISSET_ID, value);
  }

  public double getQr_threshold_resort() {
    return this.qr_threshold_resort;
  }

  public ControlParams setQr_threshold_resort(double qr_threshold_resort) {
    this.qr_threshold_resort = qr_threshold_resort;
    setQr_threshold_resortIsSet(true);
    return this;
  }

  public void unsetQr_threshold_resort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QR_THRESHOLD_RESORT_ISSET_ID);
  }

  /** Returns true if field qr_threshold_resort is set (has been assigned a value) and false otherwise */
  public boolean isSetQr_threshold_resort() {
    return EncodingUtils.testBit(__isset_bitfield, __QR_THRESHOLD_RESORT_ISSET_ID);
  }

  public void setQr_threshold_resortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QR_THRESHOLD_RESORT_ISSET_ID, value);
  }

  public boolean isAnti_vulgar_reply() {
    return this.anti_vulgar_reply;
  }

  public ControlParams setAnti_vulgar_reply(boolean anti_vulgar_reply) {
    this.anti_vulgar_reply = anti_vulgar_reply;
    setAnti_vulgar_replyIsSet(true);
    return this;
  }

  public void unsetAnti_vulgar_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID);
  }

  /** Returns true if field anti_vulgar_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetAnti_vulgar_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID);
  }

  public void setAnti_vulgar_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANTI_VULGAR_REPLY_ISSET_ID, value);
  }

  public boolean isStrict_porn_reply() {
    return this.strict_porn_reply;
  }

  public ControlParams setStrict_porn_reply(boolean strict_porn_reply) {
    this.strict_porn_reply = strict_porn_reply;
    setStrict_porn_replyIsSet(true);
    return this;
  }

  public void unsetStrict_porn_reply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID);
  }

  /** Returns true if field strict_porn_reply is set (has been assigned a value) and false otherwise */
  public boolean isSetStrict_porn_reply() {
    return EncodingUtils.testBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID);
  }

  public void setStrict_porn_replyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STRICT_PORN_REPLY_ISSET_ID, value);
  }

  public QueryPornCondition getQuery_porn_con() {
    return this.query_porn_con;
  }

  public ControlParams setQuery_porn_con(QueryPornCondition query_porn_con) {
    this.query_porn_con = query_porn_con;
    return this;
  }

  public void unsetQuery_porn_con() {
    this.query_porn_con = null;
  }

  /** Returns true if field query_porn_con is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_porn_con() {
    return this.query_porn_con != null;
  }

  public void setQuery_porn_conIsSet(boolean value) {
    if (!value) {
      this.query_porn_con = null;
    }
  }

  public ReplyPornCondition getReply_porn_con() {
    return this.reply_porn_con;
  }

  public ControlParams setReply_porn_con(ReplyPornCondition reply_porn_con) {
    this.reply_porn_con = reply_porn_con;
    return this;
  }

  public void unsetReply_porn_con() {
    this.reply_porn_con = null;
  }

  /** Returns true if field reply_porn_con is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_porn_con() {
    return this.reply_porn_con != null;
  }

  public void setReply_porn_conIsSet(boolean value) {
    if (!value) {
      this.reply_porn_con = null;
    }
  }

  public int getService_prioritySize() {
    return (this.service_priority == null) ? 0 : this.service_priority.size();
  }

  public void putToService_priority(ServiceName key, int val) {
    if (this.service_priority == null) {
      this.service_priority = new HashMap<ServiceName,Integer>();
    }
    this.service_priority.put(key, val);
  }

  public Map<ServiceName,Integer> getService_priority() {
    return this.service_priority;
  }

  public ControlParams setService_priority(Map<ServiceName,Integer> service_priority) {
    this.service_priority = service_priority;
    return this;
  }

  public void unsetService_priority() {
    this.service_priority = null;
  }

  /** Returns true if field service_priority is set (has been assigned a value) and false otherwise */
  public boolean isSetService_priority() {
    return this.service_priority != null;
  }

  public void setService_priorityIsSet(boolean value) {
    if (!value) {
      this.service_priority = null;
    }
  }

  public boolean isIs_debug() {
    return this.is_debug;
  }

  public ControlParams setIs_debug(boolean is_debug) {
    this.is_debug = is_debug;
    setIs_debugIsSet(true);
    return this;
  }

  public void unsetIs_debug() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IS_DEBUG_ISSET_ID);
  }

  /** Returns true if field is_debug is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_debug() {
    return EncodingUtils.testBit(__isset_bitfield, __IS_DEBUG_ISSET_ID);
  }

  public void setIs_debugIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IS_DEBUG_ISSET_ID, value);
  }

  public int getReply_num() {
    return this.reply_num;
  }

  public ControlParams setReply_num(int reply_num) {
    this.reply_num = reply_num;
    setReply_numIsSet(true);
    return this;
  }

  public void unsetReply_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLY_NUM_ISSET_ID);
  }

  /** Returns true if field reply_num is set (has been assigned a value) and false otherwise */
  public boolean isSetReply_num() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLY_NUM_ISSET_ID);
  }

  public void setReply_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLY_NUM_ISSET_ID, value);
  }

  /**
   * 
   * @see RequestType
   */
  public RequestType getRequest_type() {
    return this.request_type;
  }

  /**
   * 
   * @see RequestType
   */
  public ControlParams setRequest_type(RequestType request_type) {
    this.request_type = request_type;
    return this;
  }

  public void unsetRequest_type() {
    this.request_type = null;
  }

  /** Returns true if field request_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_type() {
    return this.request_type != null;
  }

  public void setRequest_typeIsSet(boolean value) {
    if (!value) {
      this.request_type = null;
    }
  }

  public int getCustomSize() {
    return (this.custom == null) ? 0 : this.custom.size();
  }

  public void putToCustom(String key, String val) {
    if (this.custom == null) {
      this.custom = new HashMap<String,String>();
    }
    this.custom.put(key, val);
  }

  public Map<String,String> getCustom() {
    return this.custom;
  }

  public ControlParams setCustom(Map<String,String> custom) {
    this.custom = custom;
    return this;
  }

  public void unsetCustom() {
    this.custom = null;
  }

  /** Returns true if field custom is set (has been assigned a value) and false otherwise */
  public boolean isSetCustom() {
    return this.custom != null;
  }

  public void setCustomIsSet(boolean value) {
    if (!value) {
      this.custom = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_SAY_HELLO:
      if (value == null) {
        unsetIs_say_hello();
      } else {
        setIs_say_hello((Boolean)value);
      }
      break;

    case QP_MAX_POST_NUM:
      if (value == null) {
        unsetQp_max_post_num();
      } else {
        setQp_max_post_num((Integer)value);
      }
      break;

    case QP_MAX_REPLY_NUM:
      if (value == null) {
        unsetQp_max_reply_num();
      } else {
        setQp_max_reply_num((Integer)value);
      }
      break;

    case QP_THRESHOLD:
      if (value == null) {
        unsetQp_threshold();
      } else {
        setQp_threshold((Double)value);
      }
      break;

    case QR_MAX_REPLY_NUM:
      if (value == null) {
        unsetQr_max_reply_num();
      } else {
        setQr_max_reply_num((Integer)value);
      }
      break;

    case QR_THRESHOLD:
      if (value == null) {
        unsetQr_threshold();
      } else {
        setQr_threshold((Double)value);
      }
      break;

    case QR_THRESHOLD_RESORT:
      if (value == null) {
        unsetQr_threshold_resort();
      } else {
        setQr_threshold_resort((Double)value);
      }
      break;

    case ANTI_VULGAR_REPLY:
      if (value == null) {
        unsetAnti_vulgar_reply();
      } else {
        setAnti_vulgar_reply((Boolean)value);
      }
      break;

    case STRICT_PORN_REPLY:
      if (value == null) {
        unsetStrict_porn_reply();
      } else {
        setStrict_porn_reply((Boolean)value);
      }
      break;

    case QUERY_PORN_CON:
      if (value == null) {
        unsetQuery_porn_con();
      } else {
        setQuery_porn_con((QueryPornCondition)value);
      }
      break;

    case REPLY_PORN_CON:
      if (value == null) {
        unsetReply_porn_con();
      } else {
        setReply_porn_con((ReplyPornCondition)value);
      }
      break;

    case SERVICE_PRIORITY:
      if (value == null) {
        unsetService_priority();
      } else {
        setService_priority((Map<ServiceName,Integer>)value);
      }
      break;

    case IS_DEBUG:
      if (value == null) {
        unsetIs_debug();
      } else {
        setIs_debug((Boolean)value);
      }
      break;

    case REPLY_NUM:
      if (value == null) {
        unsetReply_num();
      } else {
        setReply_num((Integer)value);
      }
      break;

    case REQUEST_TYPE:
      if (value == null) {
        unsetRequest_type();
      } else {
        setRequest_type((RequestType)value);
      }
      break;

    case CUSTOM:
      if (value == null) {
        unsetCustom();
      } else {
        setCustom((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_SAY_HELLO:
      return Boolean.valueOf(isIs_say_hello());

    case QP_MAX_POST_NUM:
      return Integer.valueOf(getQp_max_post_num());

    case QP_MAX_REPLY_NUM:
      return Integer.valueOf(getQp_max_reply_num());

    case QP_THRESHOLD:
      return Double.valueOf(getQp_threshold());

    case QR_MAX_REPLY_NUM:
      return Integer.valueOf(getQr_max_reply_num());

    case QR_THRESHOLD:
      return Double.valueOf(getQr_threshold());

    case QR_THRESHOLD_RESORT:
      return Double.valueOf(getQr_threshold_resort());

    case ANTI_VULGAR_REPLY:
      return Boolean.valueOf(isAnti_vulgar_reply());

    case STRICT_PORN_REPLY:
      return Boolean.valueOf(isStrict_porn_reply());

    case QUERY_PORN_CON:
      return getQuery_porn_con();

    case REPLY_PORN_CON:
      return getReply_porn_con();

    case SERVICE_PRIORITY:
      return getService_priority();

    case IS_DEBUG:
      return Boolean.valueOf(isIs_debug());

    case REPLY_NUM:
      return Integer.valueOf(getReply_num());

    case REQUEST_TYPE:
      return getRequest_type();

    case CUSTOM:
      return getCustom();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_SAY_HELLO:
      return isSetIs_say_hello();
    case QP_MAX_POST_NUM:
      return isSetQp_max_post_num();
    case QP_MAX_REPLY_NUM:
      return isSetQp_max_reply_num();
    case QP_THRESHOLD:
      return isSetQp_threshold();
    case QR_MAX_REPLY_NUM:
      return isSetQr_max_reply_num();
    case QR_THRESHOLD:
      return isSetQr_threshold();
    case QR_THRESHOLD_RESORT:
      return isSetQr_threshold_resort();
    case ANTI_VULGAR_REPLY:
      return isSetAnti_vulgar_reply();
    case STRICT_PORN_REPLY:
      return isSetStrict_porn_reply();
    case QUERY_PORN_CON:
      return isSetQuery_porn_con();
    case REPLY_PORN_CON:
      return isSetReply_porn_con();
    case SERVICE_PRIORITY:
      return isSetService_priority();
    case IS_DEBUG:
      return isSetIs_debug();
    case REPLY_NUM:
      return isSetReply_num();
    case REQUEST_TYPE:
      return isSetRequest_type();
    case CUSTOM:
      return isSetCustom();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ControlParams)
      return this.equals((ControlParams)that);
    return false;
  }

  public boolean equals(ControlParams that) {
    if (that == null)
      return false;

    boolean this_present_is_say_hello = true && this.isSetIs_say_hello();
    boolean that_present_is_say_hello = true && that.isSetIs_say_hello();
    if (this_present_is_say_hello || that_present_is_say_hello) {
      if (!(this_present_is_say_hello && that_present_is_say_hello))
        return false;
      if (this.is_say_hello != that.is_say_hello)
        return false;
    }

    boolean this_present_qp_max_post_num = true && this.isSetQp_max_post_num();
    boolean that_present_qp_max_post_num = true && that.isSetQp_max_post_num();
    if (this_present_qp_max_post_num || that_present_qp_max_post_num) {
      if (!(this_present_qp_max_post_num && that_present_qp_max_post_num))
        return false;
      if (this.qp_max_post_num != that.qp_max_post_num)
        return false;
    }

    boolean this_present_qp_max_reply_num = true && this.isSetQp_max_reply_num();
    boolean that_present_qp_max_reply_num = true && that.isSetQp_max_reply_num();
    if (this_present_qp_max_reply_num || that_present_qp_max_reply_num) {
      if (!(this_present_qp_max_reply_num && that_present_qp_max_reply_num))
        return false;
      if (this.qp_max_reply_num != that.qp_max_reply_num)
        return false;
    }

    boolean this_present_qp_threshold = true && this.isSetQp_threshold();
    boolean that_present_qp_threshold = true && that.isSetQp_threshold();
    if (this_present_qp_threshold || that_present_qp_threshold) {
      if (!(this_present_qp_threshold && that_present_qp_threshold))
        return false;
      if (this.qp_threshold != that.qp_threshold)
        return false;
    }

    boolean this_present_qr_max_reply_num = true && this.isSetQr_max_reply_num();
    boolean that_present_qr_max_reply_num = true && that.isSetQr_max_reply_num();
    if (this_present_qr_max_reply_num || that_present_qr_max_reply_num) {
      if (!(this_present_qr_max_reply_num && that_present_qr_max_reply_num))
        return false;
      if (this.qr_max_reply_num != that.qr_max_reply_num)
        return false;
    }

    boolean this_present_qr_threshold = true && this.isSetQr_threshold();
    boolean that_present_qr_threshold = true && that.isSetQr_threshold();
    if (this_present_qr_threshold || that_present_qr_threshold) {
      if (!(this_present_qr_threshold && that_present_qr_threshold))
        return false;
      if (this.qr_threshold != that.qr_threshold)
        return false;
    }

    boolean this_present_qr_threshold_resort = true && this.isSetQr_threshold_resort();
    boolean that_present_qr_threshold_resort = true && that.isSetQr_threshold_resort();
    if (this_present_qr_threshold_resort || that_present_qr_threshold_resort) {
      if (!(this_present_qr_threshold_resort && that_present_qr_threshold_resort))
        return false;
      if (this.qr_threshold_resort != that.qr_threshold_resort)
        return false;
    }

    boolean this_present_anti_vulgar_reply = true && this.isSetAnti_vulgar_reply();
    boolean that_present_anti_vulgar_reply = true && that.isSetAnti_vulgar_reply();
    if (this_present_anti_vulgar_reply || that_present_anti_vulgar_reply) {
      if (!(this_present_anti_vulgar_reply && that_present_anti_vulgar_reply))
        return false;
      if (this.anti_vulgar_reply != that.anti_vulgar_reply)
        return false;
    }

    boolean this_present_strict_porn_reply = true && this.isSetStrict_porn_reply();
    boolean that_present_strict_porn_reply = true && that.isSetStrict_porn_reply();
    if (this_present_strict_porn_reply || that_present_strict_porn_reply) {
      if (!(this_present_strict_porn_reply && that_present_strict_porn_reply))
        return false;
      if (this.strict_porn_reply != that.strict_porn_reply)
        return false;
    }

    boolean this_present_query_porn_con = true && this.isSetQuery_porn_con();
    boolean that_present_query_porn_con = true && that.isSetQuery_porn_con();
    if (this_present_query_porn_con || that_present_query_porn_con) {
      if (!(this_present_query_porn_con && that_present_query_porn_con))
        return false;
      if (!this.query_porn_con.equals(that.query_porn_con))
        return false;
    }

    boolean this_present_reply_porn_con = true && this.isSetReply_porn_con();
    boolean that_present_reply_porn_con = true && that.isSetReply_porn_con();
    if (this_present_reply_porn_con || that_present_reply_porn_con) {
      if (!(this_present_reply_porn_con && that_present_reply_porn_con))
        return false;
      if (!this.reply_porn_con.equals(that.reply_porn_con))
        return false;
    }

    boolean this_present_service_priority = true && this.isSetService_priority();
    boolean that_present_service_priority = true && that.isSetService_priority();
    if (this_present_service_priority || that_present_service_priority) {
      if (!(this_present_service_priority && that_present_service_priority))
        return false;
      if (!this.service_priority.equals(that.service_priority))
        return false;
    }

    boolean this_present_is_debug = true && this.isSetIs_debug();
    boolean that_present_is_debug = true && that.isSetIs_debug();
    if (this_present_is_debug || that_present_is_debug) {
      if (!(this_present_is_debug && that_present_is_debug))
        return false;
      if (this.is_debug != that.is_debug)
        return false;
    }

    boolean this_present_reply_num = true && this.isSetReply_num();
    boolean that_present_reply_num = true && that.isSetReply_num();
    if (this_present_reply_num || that_present_reply_num) {
      if (!(this_present_reply_num && that_present_reply_num))
        return false;
      if (this.reply_num != that.reply_num)
        return false;
    }

    boolean this_present_request_type = true && this.isSetRequest_type();
    boolean that_present_request_type = true && that.isSetRequest_type();
    if (this_present_request_type || that_present_request_type) {
      if (!(this_present_request_type && that_present_request_type))
        return false;
      if (!this.request_type.equals(that.request_type))
        return false;
    }

    boolean this_present_custom = true && this.isSetCustom();
    boolean that_present_custom = true && that.isSetCustom();
    if (this_present_custom || that_present_custom) {
      if (!(this_present_custom && that_present_custom))
        return false;
      if (!this.custom.equals(that.custom))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    return 0;
  }

  
  public int compareTo(ControlParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIs_say_hello()).compareTo(other.isSetIs_say_hello());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_say_hello()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_say_hello, other.is_say_hello);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQp_max_post_num()).compareTo(other.isSetQp_max_post_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQp_max_post_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qp_max_post_num, other.qp_max_post_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQp_max_reply_num()).compareTo(other.isSetQp_max_reply_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQp_max_reply_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qp_max_reply_num, other.qp_max_reply_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQp_threshold()).compareTo(other.isSetQp_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQp_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qp_threshold, other.qp_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQr_max_reply_num()).compareTo(other.isSetQr_max_reply_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQr_max_reply_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qr_max_reply_num, other.qr_max_reply_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQr_threshold()).compareTo(other.isSetQr_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQr_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qr_threshold, other.qr_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQr_threshold_resort()).compareTo(other.isSetQr_threshold_resort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQr_threshold_resort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qr_threshold_resort, other.qr_threshold_resort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnti_vulgar_reply()).compareTo(other.isSetAnti_vulgar_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnti_vulgar_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anti_vulgar_reply, other.anti_vulgar_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrict_porn_reply()).compareTo(other.isSetStrict_porn_reply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrict_porn_reply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_porn_reply, other.strict_porn_reply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuery_porn_con()).compareTo(other.isSetQuery_porn_con());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_porn_con()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_porn_con, other.query_porn_con);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_porn_con()).compareTo(other.isSetReply_porn_con());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_porn_con()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_porn_con, other.reply_porn_con);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetService_priority()).compareTo(other.isSetService_priority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_priority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_priority, other.service_priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIs_debug()).compareTo(other.isSetIs_debug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_debug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_debug, other.is_debug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReply_num()).compareTo(other.isSetReply_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReply_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reply_num, other.reply_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest_type()).compareTo(other.isSetRequest_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_type, other.request_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("ControlParams(");
    boolean first = true;

    if (isSetIs_say_hello()) {
      sb.append("is_say_hello:");
      sb.append(this.is_say_hello);
      first = false;
    }
    if (isSetQp_max_post_num()) {
      if (!first) sb.append(", ");
      sb.append("qp_max_post_num:");
      sb.append(this.qp_max_post_num);
      first = false;
    }
    if (isSetQp_max_reply_num()) {
      if (!first) sb.append(", ");
      sb.append("qp_max_reply_num:");
      sb.append(this.qp_max_reply_num);
      first = false;
    }
    if (isSetQp_threshold()) {
      if (!first) sb.append(", ");
      sb.append("qp_threshold:");
      sb.append(this.qp_threshold);
      first = false;
    }
    if (isSetQr_max_reply_num()) {
      if (!first) sb.append(", ");
      sb.append("qr_max_reply_num:");
      sb.append(this.qr_max_reply_num);
      first = false;
    }
    if (isSetQr_threshold()) {
      if (!first) sb.append(", ");
      sb.append("qr_threshold:");
      sb.append(this.qr_threshold);
      first = false;
    }
    if (isSetQr_threshold_resort()) {
      if (!first) sb.append(", ");
      sb.append("qr_threshold_resort:");
      sb.append(this.qr_threshold_resort);
      first = false;
    }
    if (isSetAnti_vulgar_reply()) {
      if (!first) sb.append(", ");
      sb.append("anti_vulgar_reply:");
      sb.append(this.anti_vulgar_reply);
      first = false;
    }
    if (isSetStrict_porn_reply()) {
      if (!first) sb.append(", ");
      sb.append("strict_porn_reply:");
      sb.append(this.strict_porn_reply);
      first = false;
    }
    if (isSetQuery_porn_con()) {
      if (!first) sb.append(", ");
      sb.append("query_porn_con:");
      if (this.query_porn_con == null) {
        sb.append("null");
      } else {
        sb.append(this.query_porn_con);
      }
      first = false;
    }
    if (isSetReply_porn_con()) {
      if (!first) sb.append(", ");
      sb.append("reply_porn_con:");
      if (this.reply_porn_con == null) {
        sb.append("null");
      } else {
        sb.append(this.reply_porn_con);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("service_priority:");
    if (this.service_priority == null) {
      sb.append("null");
    } else {
      sb.append(this.service_priority);
    }
    first = false;
    if (isSetIs_debug()) {
      if (!first) sb.append(", ");
      sb.append("is_debug:");
      sb.append(this.is_debug);
      first = false;
    }
    if (isSetReply_num()) {
      if (!first) sb.append(", ");
      sb.append("reply_num:");
      sb.append(this.reply_num);
      first = false;
    }
    if (isSetRequest_type()) {
      if (!first) sb.append(", ");
      sb.append("request_type:");
      if (this.request_type == null) {
        sb.append("null");
      } else {
        sb.append(this.request_type);
      }
      first = false;
    }
    if (isSetCustom()) {
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (query_porn_con != null) {
      query_porn_con.validate();
    }
    if (reply_porn_con != null) {
      reply_porn_con.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ControlParamsStandardSchemeFactory implements SchemeFactory {
    public ControlParamsStandardScheme getScheme() {
      return new ControlParamsStandardScheme();
    }
  }

  private static class ControlParamsStandardScheme extends StandardScheme<ControlParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ControlParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_SAY_HELLO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_say_hello = iprot.readBool();
              struct.setIs_say_helloIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QP_MAX_POST_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qp_max_post_num = iprot.readI32();
              struct.setQp_max_post_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QP_MAX_REPLY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qp_max_reply_num = iprot.readI32();
              struct.setQp_max_reply_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QP_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.qp_threshold = iprot.readDouble();
              struct.setQp_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QR_MAX_REPLY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qr_max_reply_num = iprot.readI32();
              struct.setQr_max_reply_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QR_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.qr_threshold = iprot.readDouble();
              struct.setQr_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QR_THRESHOLD_RESORT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.qr_threshold_resort = iprot.readDouble();
              struct.setQr_threshold_resortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANTI_VULGAR_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.anti_vulgar_reply = iprot.readBool();
              struct.setAnti_vulgar_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STRICT_PORN_REPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_porn_reply = iprot.readBool();
              struct.setStrict_porn_replyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QUERY_PORN_CON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_porn_con = new QueryPornCondition();
              struct.query_porn_con.read(iprot);
              struct.setQuery_porn_conIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REPLY_PORN_CON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reply_porn_con = new ReplyPornCondition();
              struct.reply_porn_con.read(iprot);
              struct.setReply_porn_conIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SERVICE_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map338 = iprot.readMapBegin();
                struct.service_priority = new HashMap<ServiceName,Integer>(2*_map338.size);
                for (int _i339 = 0; _i339 < _map338.size; ++_i339)
                {
                  ServiceName _key340;
                  int _val341;
                  _key340 = ServiceName.findByValue(iprot.readI32());
                  _val341 = iprot.readI32();
                  struct.service_priority.put(_key340, _val341);
                }
                iprot.readMapEnd();
              }
              struct.setService_priorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_DEBUG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_debug = iprot.readBool();
              struct.setIs_debugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPLY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reply_num = iprot.readI32();
              struct.setReply_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.request_type = RequestType.findByValue(iprot.readI32());
              struct.setRequest_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CUSTOM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map342 = iprot.readMapBegin();
                struct.custom = new HashMap<String,String>(2*_map342.size);
                for (int _i343 = 0; _i343 < _map342.size; ++_i343)
                {
                  String _key344;
                  String _val345;
                  _key344 = iprot.readString();
                  _val345 = iprot.readString();
                  struct.custom.put(_key344, _val345);
                }
                iprot.readMapEnd();
              }
              struct.setCustomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ControlParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIs_say_hello()) {
        oprot.writeFieldBegin(IS_SAY_HELLO_FIELD_DESC);
        oprot.writeBool(struct.is_say_hello);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQp_max_post_num()) {
        oprot.writeFieldBegin(QP_MAX_POST_NUM_FIELD_DESC);
        oprot.writeI32(struct.qp_max_post_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQp_max_reply_num()) {
        oprot.writeFieldBegin(QP_MAX_REPLY_NUM_FIELD_DESC);
        oprot.writeI32(struct.qp_max_reply_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQp_threshold()) {
        oprot.writeFieldBegin(QP_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.qp_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQr_max_reply_num()) {
        oprot.writeFieldBegin(QR_MAX_REPLY_NUM_FIELD_DESC);
        oprot.writeI32(struct.qr_max_reply_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQr_threshold()) {
        oprot.writeFieldBegin(QR_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.qr_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQr_threshold_resort()) {
        oprot.writeFieldBegin(QR_THRESHOLD_RESORT_FIELD_DESC);
        oprot.writeDouble(struct.qr_threshold_resort);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnti_vulgar_reply()) {
        oprot.writeFieldBegin(ANTI_VULGAR_REPLY_FIELD_DESC);
        oprot.writeBool(struct.anti_vulgar_reply);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrict_porn_reply()) {
        oprot.writeFieldBegin(STRICT_PORN_REPLY_FIELD_DESC);
        oprot.writeBool(struct.strict_porn_reply);
        oprot.writeFieldEnd();
      }
      if (struct.query_porn_con != null) {
        if (struct.isSetQuery_porn_con()) {
          oprot.writeFieldBegin(QUERY_PORN_CON_FIELD_DESC);
          struct.query_porn_con.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reply_porn_con != null) {
        if (struct.isSetReply_porn_con()) {
          oprot.writeFieldBegin(REPLY_PORN_CON_FIELD_DESC);
          struct.reply_porn_con.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.service_priority != null) {
        oprot.writeFieldBegin(SERVICE_PRIORITY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.service_priority.size()));
          for (Map.Entry<ServiceName, Integer> _iter346 : struct.service_priority.entrySet())
          {
            oprot.writeI32(_iter346.getKey().getValue());
            oprot.writeI32(_iter346.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_debug()) {
        oprot.writeFieldBegin(IS_DEBUG_FIELD_DESC);
        oprot.writeBool(struct.is_debug);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReply_num()) {
        oprot.writeFieldBegin(REPLY_NUM_FIELD_DESC);
        oprot.writeI32(struct.reply_num);
        oprot.writeFieldEnd();
      }
      if (struct.request_type != null) {
        if (struct.isSetRequest_type()) {
          oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
          oprot.writeI32(struct.request_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.custom != null) {
        if (struct.isSetCustom()) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.custom.size()));
            for (Map.Entry<String, String> _iter347 : struct.custom.entrySet())
            {
              oprot.writeString(_iter347.getKey());
              oprot.writeString(_iter347.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ControlParamsTupleSchemeFactory implements SchemeFactory {
    public ControlParamsTupleScheme getScheme() {
      return new ControlParamsTupleScheme();
    }
  }

  private static class ControlParamsTupleScheme extends TupleScheme<ControlParams> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, ControlParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIs_say_hello()) {
        optionals.set(0);
      }
      if (struct.isSetQp_max_post_num()) {
        optionals.set(1);
      }
      if (struct.isSetQp_max_reply_num()) {
        optionals.set(2);
      }
      if (struct.isSetQp_threshold()) {
        optionals.set(3);
      }
      if (struct.isSetQr_max_reply_num()) {
        optionals.set(4);
      }
      if (struct.isSetQr_threshold()) {
        optionals.set(5);
      }
      if (struct.isSetQr_threshold_resort()) {
        optionals.set(6);
      }
      if (struct.isSetAnti_vulgar_reply()) {
        optionals.set(7);
      }
      if (struct.isSetStrict_porn_reply()) {
        optionals.set(8);
      }
      if (struct.isSetQuery_porn_con()) {
        optionals.set(9);
      }
      if (struct.isSetReply_porn_con()) {
        optionals.set(10);
      }
      if (struct.isSetService_priority()) {
        optionals.set(11);
      }
      if (struct.isSetIs_debug()) {
        optionals.set(12);
      }
      if (struct.isSetReply_num()) {
        optionals.set(13);
      }
      if (struct.isSetRequest_type()) {
        optionals.set(14);
      }
      if (struct.isSetCustom()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetIs_say_hello()) {
        oprot.writeBool(struct.is_say_hello);
      }
      if (struct.isSetQp_max_post_num()) {
        oprot.writeI32(struct.qp_max_post_num);
      }
      if (struct.isSetQp_max_reply_num()) {
        oprot.writeI32(struct.qp_max_reply_num);
      }
      if (struct.isSetQp_threshold()) {
        oprot.writeDouble(struct.qp_threshold);
      }
      if (struct.isSetQr_max_reply_num()) {
        oprot.writeI32(struct.qr_max_reply_num);
      }
      if (struct.isSetQr_threshold()) {
        oprot.writeDouble(struct.qr_threshold);
      }
      if (struct.isSetQr_threshold_resort()) {
        oprot.writeDouble(struct.qr_threshold_resort);
      }
      if (struct.isSetAnti_vulgar_reply()) {
        oprot.writeBool(struct.anti_vulgar_reply);
      }
      if (struct.isSetStrict_porn_reply()) {
        oprot.writeBool(struct.strict_porn_reply);
      }
      if (struct.isSetQuery_porn_con()) {
        struct.query_porn_con.write(oprot);
      }
      if (struct.isSetReply_porn_con()) {
        struct.reply_porn_con.write(oprot);
      }
      if (struct.isSetService_priority()) {
        {
          oprot.writeI32(struct.service_priority.size());
          for (Map.Entry<ServiceName, Integer> _iter348 : struct.service_priority.entrySet())
          {
            oprot.writeI32(_iter348.getKey().getValue());
            oprot.writeI32(_iter348.getValue());
          }
        }
      }
      if (struct.isSetIs_debug()) {
        oprot.writeBool(struct.is_debug);
      }
      if (struct.isSetReply_num()) {
        oprot.writeI32(struct.reply_num);
      }
      if (struct.isSetRequest_type()) {
        oprot.writeI32(struct.request_type.getValue());
      }
      if (struct.isSetCustom()) {
        {
          oprot.writeI32(struct.custom.size());
          for (Map.Entry<String, String> _iter349 : struct.custom.entrySet())
          {
            oprot.writeString(_iter349.getKey());
            oprot.writeString(_iter349.getValue());
          }
        }
      }
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, ControlParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.is_say_hello = iprot.readBool();
        struct.setIs_say_helloIsSet(true);
      }
      if (incoming.get(1)) {
        struct.qp_max_post_num = iprot.readI32();
        struct.setQp_max_post_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.qp_max_reply_num = iprot.readI32();
        struct.setQp_max_reply_numIsSet(true);
      }
      if (incoming.get(3)) {
        struct.qp_threshold = iprot.readDouble();
        struct.setQp_thresholdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.qr_max_reply_num = iprot.readI32();
        struct.setQr_max_reply_numIsSet(true);
      }
      if (incoming.get(5)) {
        struct.qr_threshold = iprot.readDouble();
        struct.setQr_thresholdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.qr_threshold_resort = iprot.readDouble();
        struct.setQr_threshold_resortIsSet(true);
      }
      if (incoming.get(7)) {
        struct.anti_vulgar_reply = iprot.readBool();
        struct.setAnti_vulgar_replyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.strict_porn_reply = iprot.readBool();
        struct.setStrict_porn_replyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.query_porn_con = new QueryPornCondition();
        struct.query_porn_con.read(iprot);
        struct.setQuery_porn_conIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reply_porn_con = new ReplyPornCondition();
        struct.reply_porn_con.read(iprot);
        struct.setReply_porn_conIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map350 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.service_priority = new HashMap<ServiceName,Integer>(2*_map350.size);
          for (int _i351 = 0; _i351 < _map350.size; ++_i351)
          {
            ServiceName _key352;
            int _val353;
            _key352 = ServiceName.findByValue(iprot.readI32());
            _val353 = iprot.readI32();
            struct.service_priority.put(_key352, _val353);
          }
        }
        struct.setService_priorityIsSet(true);
      }
      if (incoming.get(12)) {
        struct.is_debug = iprot.readBool();
        struct.setIs_debugIsSet(true);
      }
      if (incoming.get(13)) {
        struct.reply_num = iprot.readI32();
        struct.setReply_numIsSet(true);
      }
      if (incoming.get(14)) {
        struct.request_type = RequestType.findByValue(iprot.readI32());
        struct.setRequest_typeIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map354 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.custom = new HashMap<String,String>(2*_map354.size);
          for (int _i355 = 0; _i355 < _map354.size; ++_i355)
          {
            String _key356;
            String _val357;
            _key356 = iprot.readString();
            _val357 = iprot.readString();
            struct.custom.put(_key356, _val357);
          }
        }
        struct.setCustomIsSet(true);
      }
    }
  }

}

